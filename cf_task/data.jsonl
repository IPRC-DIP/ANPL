{"id": 4000, "question": "You are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.\n\nYour task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.\n\nThe simple path is the path that visits each vertex at most once.\n\n\n-----Input-----\n\nThe first line contains one integer number $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree. \n\nNext $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \\le a_i$, $b_i \\le n$, $a_i \\ne b_i$). It is guaranteed that given graph is a tree.\n\n\n-----Output-----\n\nIn the first line print one integer $res$ \u2014 the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.\n\nIn the second line print three integers $a, b, c$ such that $1 \\le a, b, c \\le n$ and $a \\ne, b \\ne c, a \\ne c$.\n\nIf there are several answers, you can print any.\n\n\n-----Example-----\nInput\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n\nOutput\n5\n1 8 6\n\n\n\n-----Note-----\n\nThe picture corresponding to the first example (and another one correct answer):\n\n[Image]\n\nIf you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.", "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nNEGINF = -1000000\\n\\nn = int(input())\\nadj = [[] for i in range(n)]\\nparent = [-1] * n\\n\\nvisited = [False] * n\\nfor _ in range(n - 1):\\n    a, b = list(map(int, input().split()))\\n    adj[a - 1].append(b - 1)\\n    adj[b - 1].append(a - 1)\\n\\ntup = tuple()\\nouts = [tup] * n\\nq = [(0, 0)]\\n\\nwhile q:\\n    node, type = q.pop()\\n    if type == 0:\\n        visited[node] = True\\n        q.append((node, 1))\\n        for v in adj[node]:\\n            if not visited[v]:\\n                parent[v] = node\\n                q.append((v, 0))\\n    else:\\n        ones = [(0, node)]\\n        twos = []\\n        threes = []\\n        for v in adj[node]:\\n            if v != parent[node]:\\n                a, b, c = outs[v]\\n                ones.append((a[0] + 1, a[1], v))\\n                twos.append((b[0] + 1, b[1], v))\\n                threes.append(c)\\n        ones.sort(reverse = True)\\n        twos.sort(reverse = True)\\n        threes.sort(reverse = True)\\n\\n        bestOne = (ones[0][0], ones[0][1])\\n        \\n        bestsTwo = [(NEGINF, (0, 0))]\\n        if len(twos) > 0:\\n            bestsTwo.append((twos[0][0], twos[0][1]))\\n        if len(ones) > 1:\\n            o1 = ones[0]\\n            o2 = ones[1]\\n            bestsTwo.append((o1[0] + o2[0], (o1[1], o2[1])))\\n\\n        bestsThree = [(NEGINF, (0, 0, 0))]\\n        if len(threes) > 0:\\n            bestsThree.append(threes[0])\\n        if len(ones) > 2:\\n            o1 = ones[0]\\n            o2 = ones[1]\\n            o3 = ones[2]\\n            bestsThree.append((o1[0] + o2[0] + o3[0], (o1[1], o2[1], o3[1])))\\n        if len(twos) > 0:\\n            o1 = ones[0]\\n            t1 = twos[0]\\n            if o1[2] != t1[2]:\\n                bestsThree.append((o1[0] + t1[0], (o1[1], t1[1][0], t1[1][1])))\\n            else:\\n                if len(twos) > 1:\\n                    t2 = twos[1]\\n                    bestsThree.append((o1[0] + t2[0], (o1[1], t2[1][0], t2[1][1])))\\n                if len(ones) > 1:\\n                    o2 = ones[1]\\n                    bestsThree.append((o2[0] + t1[0], (o2[1], t1[1][0], t1[1][1])))\\n                    \\n\\n        outs[node] = (bestOne, max(bestsTwo), max(bestsThree))\\n\\nfinal = outs[0][2]\\nprint(final[0])\\nprint(' '.join([str(x + 1) for x in final[1]]))\\n\", \"import sys\\nfrom collections import deque\\n\\n# inf = open('input.txt', 'r')\\n# reader = (line.rstrip() for line in inf)\\nreader = (line.rstrip() for line in sys.stdin)\\ninput = reader.__next__\\n\\nn = int(input())\\ng = [[] for _ in range(n)]\\nfor _ in range(n - 1):\\n    v, to = list(map(int, input().split()))\\n    v -= 1\\n    to -= 1\\n    g[v].append(to)\\n    g[to].append(v)\\n\\n# (vertex, distance)\\nqueue = deque([(0, 0)])\\nvisited = [False] * n\\nwhile queue:\\n    v, d = queue.popleft()\\n    visited[v] = True\\n    for to in g[v]:\\n        if not visited[to]:\\n            queue.append((to, d + 1))\\na = v\\n\\n# (vertex, distance)\\nqueue = deque([(a, 0)])\\nprev = [-1] * n\\nfor i in range(n):\\n    visited[i] = False\\nwhile queue:\\n    v, d = queue.popleft()\\n    visited[v] = True\\n    for to in g[v]:\\n        if not visited[to]:\\n            queue.append((to, d + 1))\\n            prev[to] = v\\nb, ctr = v, d\\n\\nfor i in range(n):\\n    visited[i] = False\\ncurr = prev[b]\\nnxt = b\\nprv = prev[curr]\\nadd = 0\\nif a != 0 and b != 0:\\n    c = 0\\nelif a != 1 and b != 1:\\n    c = 1\\nelse:\\n    c = 2\\nwhile curr != a:\\n    visited[curr] = True\\n    for to in g[curr]:\\n        if to == nxt or to == prv:\\n            continue\\n        queue = deque([(to, 1)])\\n        while queue:\\n            v, d = queue.popleft()\\n            visited[v] = True\\n            for to in g[v]:\\n                if not visited[to]:\\n                    queue.append((to, d + 1))\\n        if add < d:\\n            c, add = v, d    \\n    nxt = curr\\n    curr = prev[curr]\\n    prv = prev[curr]\\n    \\nprint(ctr + add)\\nprint(a + 1, b + 1, c + 1)\\n\\n# inf.close()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nE=[[] for i in range(n+1)]\\n\\nfor i in range(n-1):\\n    x,y=list(map(int,input().split()))\\n    E[x].append(y)\\n    E[y].append(x)\\n\\ndef dfs(t):\\n    L=[-1]*(n+1)\\n    L[t]=0\\n\\n    Q=[t]\\n\\n    while Q:\\n        x=Q.pop()\\n        for to in E[x]:\\n            if L[to]==-1:\\n                L[to]=L[x]+1\\n                Q.append(to)\\n\\n    return L.index(max(L))\\n\\nA=dfs(1)\\nB=dfs(A)\\n\\nDEPTH=[-1]*(n+1)\\nDEPTH[1]=0\\n\\nfrom collections import deque\\nQUE = deque([1])\\nQUE2 = deque()\\nEULER=[]\\n\\nUSED=[0]*(n+1)\\nwhile QUE:\\n    x=QUE.pop()\\n    EULER.append((DEPTH[x],x))\\n    if USED[x]==1:\\n        continue\\n    for to in E[x]:\\n        \\n        if USED[to]==0:\\n            DEPTH[to]=DEPTH[x]+1\\n            QUE2.append(to)\\n        else:\\n            QUE.append(to)\\n    QUE.extend(QUE2)\\n    QUE2=deque()\\n \\n    USED[x]=1\\n\\nMINP=[1<<30]*(n+1)\\nMAXP=[-1]*(n+1)\\n\\nfor ind,(depth,p) in enumerate(EULER):\\n    MINP[p]=min(MINP[p],ind)\\n    MAXP[p]=max(MAXP[p],ind)\\n\\nLEN=len(EULER)\\n\\nseg_el=1<<(LEN.bit_length())\\nSEG=[(1<<30,0)]*(2*seg_el)\\n\\nfor i in range(LEN):\\n    SEG[i+seg_el]=EULER[i]\\n\\nfor i in range(seg_el-1,0,-1):\\n    SEG[i]=min(SEG[i*2],SEG[i*2+1])\\n\\ndef update(n,x,seg_el):\\n    i=n+seg_el\\n    SEG[i]=x\\n    i>>=1\\n    \\n    while i!=0:\\n        SEG[i]=min(SEG[i*2],SEG[i*2+1])\\n        i>>=1\\n        \\ndef getvalues(l,r):\\n    L=l+seg_el\\n    R=r+seg_el\\n    ANS=(1<<30,0)\\n\\n    while L<R:\\n        if L & 1:\\n            ANS=min(ANS , SEG[L])\\n            L+=1\\n\\n        if R & 1:\\n            R-=1\\n            ANS=min(ANS , SEG[R])\\n        L>>=1\\n        R>>=1\\n\\n    return ANS\\n\\ndef LCA(l,r):\\n    return getvalues(min(MINP[l],MINP[r]),max(MAXP[l],MAXP[r])+1)\\n\\nA2=DEPTH[A]*2+DEPTH[B]*2-LCA(A,B)[0]*2\\nANS=0\\n\\nfor i in range(1,n+1):\\n    if i==A or i==B:\\n        continue\\n\\n    if ANS<A2+DEPTH[i]*2-LCA(i,A)[0]*2-LCA(i,B)[0]*2:\\n        ANS=A2+DEPTH[i]*2-LCA(i,A)[0]*2-LCA(i,B)[0]*2\\n        Aind=i\\n\\nprint(ANS//2)\\nprint(A,B,Aind)\\n    \\n    \\n\", \"import sys\\nfrom collections import deque\\nn = int(input())\\nadj = [[] for _ in range(n)]\\nfor u, v in (list(map(int, l.split())) for l in sys.stdin):\\n    adj[u-1].append(v-1)\\n    adj[v-1].append(u-1)\\n\\ninf = 10**9\\n\\n\\ndef rec(s):\\n    prev = [-1]*n\\n    prev[s] = inf\\n    dq = deque([s])\\n    last = s\\n\\n    while dq:\\n        v = dq.popleft()\\n        last = v\\n        for dest in adj[v]:\\n            if prev[dest] > -1:\\n                continue\\n            prev[dest] = v\\n            dq.append(dest)\\n\\n    return last, prev\\n\\n\\nv1, _ = rec(0)\\nv2, prev = rec(v1)\\nv = prev[v2]\\nvisited = [0]*n\\nvisited[v] = visited[v1] = visited[v2] = 1\\ndia = 0\\nmax_e, max_e_i = 0, v\\n\\nwhile v != inf:\\n    dia += 1\\n    if prev[v] != inf:\\n        visited[prev[v]] = 1\\n\\n    stack = [(v, 0)]\\n    while stack:\\n        cv, e = stack.pop()\\n        if max_e < e:\\n            max_e, max_e_i = e, cv\\n        e += 1\\n\\n        for dest in adj[cv]:\\n            if visited[dest]:\\n                continue\\n            visited[dest] = 1\\n            stack.append((dest, e))\\n\\n    v = prev[v]\\n\\nprint(dia + max_e)\\nprint(v1+1, v2+1, max_e_i+1)\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\",\n    \"5\\n3 2\\n3 5\\n2 4\\n1 3\\n\",\n    \"4\\n1 2\\n2 3\\n3 4\\n\",\n    \"6\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n\",\n    \"4\\n4 3\\n3 1\\n1 2\\n\",\n    \"3\\n1 2\\n1 3\\n\",\n    \"3\\n1 2\\n1 3\\n\",\n    \"3\\n3 1\\n1 2\\n\",\n    \"3\\n1 3\\n1 2\\n\",\n    \"3\\n1 2\\n1 3\\n\",\n    \"3\\n1 2\\n1 3\\n\",\n    \"3\\n3 1\\n3 2\\n\",\n    \"3\\n1 3\\n2 1\\n\",\n    \"3\\n1 3\\n1 2\\n\",\n    \"3\\n3 1\\n2 1\\n\",\n    \"3\\n1 2\\n1 3\\n\",\n    \"3\\n2 1\\n3 1\\n\",\n    \"3\\n2 3\\n3 1\\n\",\n    \"3\\n1 3\\n3 2\\n\",\n    \"3\\n1 3\\n1 2\\n\",\n    \"3\\n3 2\\n1 3\\n\",\n    \"3\\n1 2\\n3 1\\n\",\n    \"3\\n1 2\\n1 3\\n\",\n    \"3\\n3 2\\n2 1\\n\",\n    \"3\\n3 2\\n3 1\\n\",\n    \"3\\n1 2\\n2 3\\n\",\n    \"3\\n3 1\\n3 2\\n\",\n    \"3\\n2 3\\n1 3\\n\",\n    \"3\\n1 2\\n3 2\\n\",\n    \"3\\n3 2\\n3 1\\n\",\n    \"3\\n3 2\\n1 2\\n\",\n    \"3\\n2 3\\n2 1\\n\",\n    \"3\\n3 2\\n1 3\\n\",\n    \"3\\n2 3\\n3 1\\n\",\n    \"3\\n2 3\\n2 1\\n\",\n    \"3\\n1 2\\n2 3\\n\",\n    \"3\\n2 3\\n3 1\\n\",\n    \"3\\n3 2\\n3 1\\n\",\n    \"3\\n2 3\\n2 1\\n\",\n    \"3\\n2 3\\n3 1\\n\",\n    \"4\\n1 3\\n1 2\\n1 4\\n\",\n    \"4\\n1 3\\n3 4\\n2 3\\n\",\n    \"4\\n1 2\\n1 3\\n1 4\\n\",\n    \"4\\n1 4\\n1 3\\n2 1\\n\",\n    \"4\\n4 1\\n1 2\\n3 1\\n\",\n    \"4\\n3 1\\n4 1\\n2 1\\n\",\n    \"4\\n4 1\\n1 2\\n1 3\\n\",\n    \"4\\n1 4\\n3 1\\n1 2\\n\",\n    \"4\\n1 3\\n4 1\\n3 2\\n\",\n    \"4\\n1 4\\n3 4\\n1 2\\n\",\n    \"4\\n2 1\\n1 4\\n2 3\\n\",\n    \"4\\n4 1\\n3 1\\n1 2\\n\",\n    \"4\\n2 1\\n3 1\\n4 1\\n\",\n    \"4\\n1 3\\n1 4\\n3 2\\n\",\n    \"4\\n4 1\\n1 2\\n3 1\\n\",\n    \"4\\n4 1\\n4 2\\n3 1\\n\",\n    \"4\\n1 4\\n3 2\\n3 4\\n\",\n    \"4\\n3 2\\n1 2\\n4 1\\n\",\n    \"4\\n2 1\\n1 4\\n2 3\\n\",\n    \"4\\n3 4\\n2 4\\n3 1\\n\",\n    \"4\\n1 4\\n3 4\\n2 4\\n\",\n    \"4\\n3 1\\n2 3\\n2 4\\n\",\n    \"4\\n2 3\\n1 2\\n1 4\\n\",\n    \"4\\n4 1\\n2 3\\n1 3\\n\",\n    \"4\\n2 1\\n2 3\\n4 3\\n\",\n    \"4\\n4 1\\n2 4\\n1 3\\n\",\n    \"4\\n4 2\\n1 3\\n3 4\\n\",\n    \"4\\n2 3\\n4 2\\n1 3\\n\",\n    \"4\\n2 3\\n1 4\\n4 2\\n\",\n    \"4\\n3 4\\n2 4\\n1 4\\n\",\n    \"4\\n2 3\\n3 1\\n2 4\\n\",\n    \"4\\n2 3\\n4 1\\n4 3\\n\",\n    \"4\\n2 3\\n3 1\\n4 2\\n\",\n    \"4\\n2 1\\n4 3\\n3 2\\n\",\n    \"4\\n4 1\\n4 2\\n3 4\\n\",\n    \"5\\n1 3\\n3 2\\n5 1\\n1 4\\n\",\n    \"5\\n1 3\\n1 2\\n4 1\\n1 5\\n\",\n    \"5\\n1 5\\n4 1\\n1 2\\n1 3\\n\",\n    \"5\\n1 2\\n1 4\\n5 1\\n1 3\\n\",\n    \"5\\n2 1\\n3 1\\n4 1\\n5 1\\n\",\n    \"5\\n5 1\\n4 2\\n4 1\\n1 3\\n\",\n    \"5\\n3 1\\n2 1\\n1 5\\n4 1\\n\",\n    \"5\\n1 5\\n3 1\\n1 4\\n2 1\\n\",\n    \"5\\n2 3\\n1 5\\n4 1\\n3 1\\n\",\n    \"5\\n1 2\\n4 1\\n3 1\\n1 5\\n\",\n    \"5\\n5 4\\n1 4\\n1 2\\n3 4\\n\",\n    \"5\\n5 1\\n5 4\\n4 3\\n1 2\\n\",\n    \"5\\n2 4\\n4 1\\n1 3\\n1 5\\n\",\n    \"5\\n3 1\\n2 1\\n1 5\\n1 4\\n\",\n    \"5\\n1 4\\n2 1\\n5 1\\n5 3\\n\",\n    \"5\\n1 5\\n3 4\\n2 3\\n1 3\\n\",\n    \"5\\n2 5\\n5 3\\n1 3\\n2 4\\n\",\n    \"5\\n3 1\\n5 1\\n2 1\\n4 2\\n\",\n    \"5\\n1 3\\n5 3\\n2 1\\n1 4\\n\",\n    \"5\\n3 5\\n3 1\\n2 1\\n4 3\\n\",\n    \"5\\n2 3\\n2 1\\n1 5\\n4 2\\n\",\n    \"5\\n5 2\\n4 5\\n1 2\\n3 5\\n\",\n    \"5\\n5 3\\n2 4\\n1 2\\n4 3\\n\",\n    \"5\\n4 1\\n1 5\\n3 5\\n2 5\\n\",\n    \"5\\n5 3\\n4 2\\n1 2\\n2 5\\n\",\n    \"5\\n5 1\\n2 3\\n5 4\\n3 5\\n\",\n    \"5\\n4 5\\n1 5\\n2 5\\n2 3\\n\",\n    \"5\\n5 1\\n4 2\\n5 4\\n3 5\\n\",\n    \"5\\n1 5\\n2 3\\n2 5\\n3 4\\n\",\n    \"5\\n2 3\\n4 1\\n5 4\\n5 2\\n\",\n    \"5\\n5 4\\n2 3\\n2 5\\n1 3\\n\",\n    \"5\\n5 4\\n5 2\\n1 3\\n4 3\\n\",\n    \"5\\n2 5\\n2 1\\n3 2\\n4 3\\n\",\n    \"5\\n4 5\\n2 1\\n3 2\\n5 3\\n\",\n    \"5\\n5 2\\n4 3\\n1 2\\n2 4\\n\",\n    \"6\\n4 2\\n5 1\\n6 1\\n2 1\\n1 3\\n\",\n    \"6\\n2 1\\n1 4\\n1 6\\n1 3\\n5 1\\n\",\n    \"6\\n5 1\\n1 4\\n2 3\\n1 6\\n1 3\\n\",\n    \"6\\n1 5\\n1 3\\n6 1\\n4 1\\n1 2\\n\",\n    \"6\\n1 2\\n5 3\\n3 4\\n1 3\\n6 3\\n\",\n    \"6\\n2 4\\n4 1\\n4 3\\n5 4\\n1 6\\n\",\n    \"6\\n2 1\\n5 1\\n1 4\\n6 1\\n1 3\\n\",\n    \"6\\n1 3\\n5 1\\n2 4\\n1 2\\n1 6\\n\",\n    \"6\\n1 5\\n1 6\\n4 1\\n1 2\\n3 1\\n\",\n    \"6\\n5 6\\n4 1\\n3 1\\n6 1\\n2 6\\n\",\n    \"6\\n6 1\\n5 4\\n1 3\\n1 5\\n5 2\\n\",\n    \"6\\n1 6\\n6 3\\n4 3\\n5 6\\n2 1\\n\",\n    \"6\\n2 3\\n1 6\\n1 3\\n1 4\\n5 6\\n\",\n    \"6\\n5 1\\n3 1\\n4 1\\n1 6\\n2 6\\n\",\n    \"6\\n2 1\\n1 6\\n3 1\\n4 2\\n2 5\\n\",\n    \"6\\n1 3\\n1 6\\n6 4\\n5 1\\n2 5\\n\",\n    \"6\\n2 5\\n4 1\\n2 1\\n1 6\\n3 4\\n\",\n    \"6\\n2 4\\n6 1\\n5 1\\n6 2\\n3 6\\n\",\n    \"6\\n1 5\\n1 6\\n6 2\\n1 4\\n4 3\\n\",\n    \"6\\n1 4\\n5 3\\n3 1\\n2 5\\n1 6\\n\",\n    \"6\\n5 3\\n5 4\\n2 1\\n2 4\\n6 4\\n\",\n    \"6\\n4 3\\n5 6\\n6 1\\n5 2\\n6 3\\n\",\n    \"6\\n5 3\\n3 1\\n5 6\\n4 5\\n2 3\\n\",\n    \"6\\n4 3\\n4 2\\n2 1\\n2 6\\n5 4\\n\",\n    \"6\\n3 6\\n6 2\\n6 5\\n2 1\\n6 4\\n\",\n    \"6\\n5 4\\n5 3\\n2 4\\n5 6\\n2 1\\n\",\n    \"6\\n6 3\\n4 2\\n6 5\\n4 1\\n2 5\\n\",\n    \"6\\n5 3\\n4 6\\n6 2\\n1 2\\n2 3\\n\",\n    \"6\\n1 4\\n6 2\\n2 5\\n3 5\\n2 4\\n\",\n    \"6\\n2 4\\n3 6\\n5 1\\n3 5\\n6 2\\n\",\n    \"6\\n5 4\\n6 2\\n1 5\\n4 6\\n5 3\\n\",\n    \"6\\n6 2\\n3 5\\n4 2\\n5 4\\n1 2\\n\",\n    \"6\\n1 4\\n2 3\\n5 6\\n5 3\\n2 4\\n\",\n    \"6\\n6 4\\n4 1\\n5 6\\n3 2\\n4 2\\n\",\n    \"6\\n6 1\\n5 6\\n5 3\\n2 5\\n2 4\\n\",\n    \"7\\n1 7\\n6 1\\n5 1\\n2 1\\n3 2\\n2 4\\n\",\n    \"7\\n3 1\\n6 1\\n4 1\\n1 5\\n5 2\\n1 7\\n\",\n    \"7\\n7 1\\n5 1\\n1 3\\n1 2\\n6 1\\n4 7\\n\",\n    \"7\\n1 7\\n2 1\\n1 5\\n4 1\\n3 1\\n5 6\\n\",\n    \"7\\n3 1\\n1 5\\n1 7\\n1 4\\n6 1\\n2 1\\n\",\n    \"7\\n1 4\\n7 4\\n5 1\\n3 2\\n6 4\\n3 1\\n\",\n    \"7\\n1 3\\n6 1\\n1 7\\n1 4\\n5 4\\n1 2\\n\",\n    \"7\\n5 1\\n6 1\\n2 1\\n1 3\\n1 7\\n1 4\\n\",\n    \"7\\n5 1\\n5 7\\n1 2\\n5 6\\n3 1\\n4 5\\n\",\n    \"7\\n1 4\\n6 1\\n2 1\\n7 5\\n1 7\\n1 3\\n\",\n    \"7\\n1 2\\n7 3\\n1 6\\n5 1\\n2 7\\n4 6\\n\",\n    \"7\\n2 6\\n5 6\\n4 1\\n1 7\\n1 6\\n3 5\\n\",\n    \"7\\n3 2\\n1 4\\n3 1\\n1 6\\n7 1\\n5 4\\n\",\n    \"7\\n1 5\\n4 1\\n2 1\\n2 3\\n1 7\\n6 2\\n\",\n    \"7\\n7 2\\n3 4\\n4 2\\n7 1\\n6 7\\n5 7\\n\",\n    \"7\\n1 6\\n3 1\\n5 6\\n1 4\\n1 2\\n1 7\\n\",\n    \"7\\n2 7\\n4 6\\n7 1\\n5 1\\n3 1\\n7 6\\n\",\n    \"7\\n3 2\\n5 1\\n3 5\\n2 7\\n3 6\\n4 2\\n\",\n    \"7\\n4 1\\n4 3\\n7 5\\n1 6\\n7 4\\n2 6\\n\",\n    \"7\\n5 3\\n2 4\\n6 1\\n4 7\\n3 1\\n2 3\\n\",\n    \"7\\n1 7\\n6 5\\n4 3\\n7 4\\n2 5\\n5 4\\n\",\n    \"7\\n1 4\\n3 6\\n6 7\\n3 5\\n4 2\\n2 7\\n\",\n    \"7\\n2 7\\n2 4\\n1 3\\n5 6\\n5 3\\n3 2\\n\",\n    \"7\\n4 2\\n6 3\\n5 1\\n6 1\\n7 4\\n6 4\\n\",\n    \"7\\n3 2\\n1 7\\n7 2\\n6 5\\n6 1\\n4 5\\n\",\n    \"7\\n3 2\\n3 5\\n4 7\\n3 6\\n4 5\\n5 1\\n\",\n    \"7\\n7 6\\n7 1\\n4 2\\n4 5\\n7 3\\n5 3\\n\",\n    \"7\\n1 2\\n3 6\\n6 5\\n4 3\\n7 5\\n2 6\\n\",\n    \"7\\n2 7\\n6 7\\n5 4\\n1 2\\n5 3\\n3 6\\n\",\n    \"7\\n1 5\\n4 2\\n5 3\\n6 5\\n7 2\\n1 2\\n\",\n    \"7\\n5 2\\n3 6\\n7 1\\n3 7\\n3 4\\n2 6\\n\",\n    \"7\\n1 5\\n3 5\\n7 2\\n7 6\\n3 7\\n4 5\\n\",\n    \"7\\n7 6\\n2 1\\n6 5\\n3 2\\n3 6\\n7 4\\n\",\n    \"7\\n7 6\\n2 3\\n3 6\\n5 4\\n4 2\\n1 5\\n\",\n    \"7\\n2 4\\n7 1\\n6 5\\n3 6\\n2 7\\n7 6\\n\",\n    \"8\\n1 5\\n1 8\\n7 1\\n1 6\\n1 2\\n4 2\\n1 3\\n\",\n    \"8\\n6 1\\n2 1\\n5 4\\n8 1\\n7 3\\n7 1\\n4 7\\n\",\n    \"8\\n6 8\\n1 8\\n8 2\\n1 7\\n5 7\\n1 3\\n4 1\\n\",\n    \"8\\n2 1\\n6 1\\n4 1\\n7 1\\n1 3\\n1 5\\n1 8\\n\",\n    \"8\\n1 8\\n2 1\\n1 7\\n1 5\\n1 3\\n4 8\\n1 6\\n\",\n    \"8\\n2 1\\n2 8\\n7 8\\n5 1\\n2 6\\n3 1\\n4 6\\n\",\n    \"8\\n6 4\\n7 6\\n1 5\\n1 3\\n1 6\\n8 1\\n2 7\\n\",\n    \"8\\n8 5\\n6 4\\n2 4\\n1 5\\n1 7\\n1 4\\n4 3\\n\",\n    \"8\\n6 5\\n7 4\\n1 3\\n8 7\\n1 7\\n2 1\\n6 1\\n\",\n    \"8\\n7 3\\n2 8\\n4 1\\n1 3\\n2 1\\n6 3\\n5 1\\n\",\n    \"8\\n1 4\\n6 5\\n1 6\\n7 1\\n2 1\\n3 6\\n5 8\\n\",\n    \"8\\n4 8\\n4 6\\n1 3\\n7 4\\n7 5\\n1 4\\n1 2\\n\",\n    \"8\\n7 8\\n5 4\\n8 1\\n8 6\\n1 2\\n4 3\\n1 4\\n\",\n    \"8\\n2 3\\n6 5\\n1 7\\n2 1\\n4 6\\n8 4\\n1 6\\n\",\n    \"8\\n5 3\\n4 2\\n6 5\\n8 1\\n5 1\\n7 8\\n1 2\\n\",\n    \"8\\n7 3\\n5 6\\n6 1\\n7 4\\n6 2\\n2 8\\n6 4\\n\",\n    \"8\\n8 3\\n4 2\\n4 1\\n1 7\\n1 3\\n6 2\\n8 5\\n\",\n    \"8\\n5 1\\n1 6\\n6 3\\n4 3\\n5 2\\n1 7\\n3 8\\n\",\n    \"8\\n5 1\\n7 2\\n4 3\\n8 5\\n7 1\\n4 6\\n5 4\\n\",\n    \"8\\n8 7\\n3 2\\n1 3\\n6 4\\n1 8\\n1 4\\n8 5\\n\",\n    \"8\\n7 2\\n5 4\\n2 6\\n1 3\\n3 2\\n4 2\\n4 8\\n\",\n    \"8\\n3 5\\n3 6\\n8 7\\n2 7\\n2 1\\n2 6\\n1 4\\n\",\n    \"8\\n1 8\\n5 4\\n2 5\\n6 3\\n1 5\\n1 7\\n8 6\\n\",\n    \"8\\n1 7\\n6 7\\n2 3\\n8 4\\n5 7\\n2 1\\n6 8\\n\",\n    \"8\\n8 1\\n3 4\\n6 4\\n3 5\\n2 4\\n8 4\\n7 3\\n\",\n    \"8\\n2 3\\n4 7\\n3 7\\n2 6\\n5 6\\n4 1\\n3 8\\n\",\n    \"8\\n3 6\\n8 2\\n3 1\\n8 4\\n8 7\\n6 4\\n1 5\\n\",\n    \"8\\n1 6\\n2 7\\n4 5\\n6 5\\n4 8\\n2 5\\n3 7\\n\",\n    \"8\\n2 3\\n6 5\\n1 8\\n4 5\\n4 8\\n7 6\\n2 6\\n\",\n    \"8\\n1 2\\n5 8\\n6 8\\n4 5\\n6 2\\n3 7\\n7 4\\n\",\n    \"8\\n1 7\\n2 8\\n7 8\\n4 5\\n3 4\\n1 5\\n6 3\\n\",\n    \"8\\n2 8\\n8 1\\n5 7\\n6 4\\n4 7\\n7 2\\n7 3\\n\",\n    \"8\\n8 5\\n6 3\\n8 3\\n7 2\\n1 2\\n5 4\\n6 7\\n\",\n    \"8\\n6 7\\n5 8\\n4 1\\n3 5\\n3 6\\n7 2\\n4 2\\n\",\n    \"8\\n6 7\\n6 8\\n1 3\\n2 3\\n5 6\\n8 4\\n7 3\\n\",\n    \"9\\n3 1\\n7 4\\n1 4\\n1 8\\n2 1\\n2 6\\n9 1\\n1 5\\n\",\n    \"9\\n8 9\\n6 2\\n1 6\\n1 4\\n3 1\\n9 1\\n1 5\\n1 7\\n\",\n    \"9\\n3 9\\n5 1\\n4 1\\n7 6\\n3 1\\n3 2\\n8 1\\n7 1\\n\",\n    \"9\\n1 3\\n6 4\\n4 1\\n5 1\\n7 5\\n1 9\\n8 5\\n1 2\\n\",\n    \"9\\n4 1\\n8 2\\n6 1\\n1 5\\n3 1\\n6 7\\n9 5\\n1 2\\n\",\n    \"9\\n1 9\\n4 9\\n7 1\\n3 2\\n1 2\\n1 6\\n1 8\\n2 5\\n\",\n    \"9\\n4 1\\n2 9\\n1 2\\n8 1\\n9 5\\n3 2\\n7 6\\n7 1\\n\",\n    \"9\\n8 4\\n5 8\\n3 1\\n2 8\\n1 7\\n9 8\\n1 6\\n1 8\\n\",\n    \"9\\n8 3\\n6 8\\n9 4\\n1 8\\n8 5\\n9 3\\n2 1\\n1 7\\n\",\n    \"9\\n1 8\\n5 1\\n4 3\\n9 1\\n2 1\\n1 4\\n7 1\\n6 1\\n\",\n    \"9\\n7 2\\n2 4\\n5 8\\n8 3\\n2 1\\n1 6\\n6 9\\n1 8\\n\",\n    \"9\\n5 1\\n8 1\\n2 1\\n4 1\\n3 4\\n1 7\\n7 6\\n5 9\\n\",\n    \"9\\n8 1\\n9 6\\n6 1\\n1 3\\n2 1\\n7 2\\n1 4\\n4 5\\n\",\n    \"9\\n1 2\\n9 8\\n5 8\\n7 5\\n6 2\\n5 3\\n1 4\\n1 5\\n\",\n    \"9\\n7 1\\n6 5\\n1 8\\n4 9\\n2 8\\n4 1\\n3 8\\n8 6\\n\",\n    \"9\\n3 7\\n3 9\\n1 5\\n6 1\\n1 2\\n4 3\\n8 2\\n3 2\\n\",\n    \"9\\n6 2\\n3 7\\n5 1\\n6 5\\n3 1\\n9 4\\n6 8\\n4 3\\n\",\n    \"9\\n4 3\\n6 9\\n1 9\\n1 3\\n5 1\\n7 1\\n8 7\\n2 5\\n\",\n    \"9\\n3 5\\n9 1\\n4 1\\n7 4\\n3 8\\n2 6\\n9 2\\n3 2\\n\",\n    \"9\\n4 2\\n9 5\\n1 4\\n1 7\\n4 9\\n5 3\\n3 6\\n9 8\\n\",\n    \"9\\n5 2\\n3 9\\n2 4\\n7 8\\n5 6\\n9 8\\n1 2\\n9 4\\n\",\n    \"9\\n5 8\\n8 9\\n2 6\\n2 7\\n3 6\\n2 1\\n8 1\\n4 9\\n\",\n    \"9\\n4 2\\n2 6\\n4 1\\n8 5\\n8 7\\n6 5\\n3 4\\n9 2\\n\",\n    \"9\\n1 4\\n5 8\\n8 7\\n3 4\\n6 3\\n5 3\\n2 4\\n2 9\\n\",\n    \"9\\n3 6\\n9 7\\n1 6\\n2 8\\n7 4\\n9 5\\n8 6\\n3 9\\n\",\n    \"9\\n7 9\\n6 7\\n4 6\\n3 9\\n9 8\\n2 5\\n2 8\\n1 2\\n\",\n    \"9\\n9 3\\n5 8\\n2 7\\n2 3\\n9 6\\n1 7\\n4 5\\n4 2\\n\",\n    \"9\\n2 7\\n3 7\\n8 2\\n6 7\\n1 3\\n2 9\\n5 2\\n4 6\\n\",\n    \"9\\n9 2\\n6 8\\n4 1\\n2 5\\n1 9\\n8 7\\n3 6\\n5 7\\n\",\n    \"9\\n4 3\\n6 9\\n4 8\\n6 5\\n7 5\\n1 6\\n8 5\\n7 2\\n\",\n    \"9\\n6 7\\n8 6\\n1 4\\n3 8\\n4 7\\n5 6\\n9 3\\n2 7\\n\",\n    \"9\\n6 4\\n9 5\\n7 8\\n1 8\\n9 3\\n4 2\\n7 5\\n7 4\\n\",\n    \"9\\n9 2\\n3 8\\n4 6\\n7 9\\n2 5\\n5 3\\n1 6\\n9 1\\n\",\n    \"9\\n6 9\\n1 3\\n6 7\\n2 8\\n4 6\\n2 6\\n5 2\\n3 7\\n\",\n    \"9\\n1 8\\n6 9\\n6 7\\n4 3\\n3 5\\n8 7\\n2 6\\n9 3\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n1 8 6\\n\",\n    \"4\\n5 1 4\\n\",\n    \"3 \\n1 2 4\\n\",\n    \"5\\n5 4 6\\n\",\n    \"3 \\n2 1 4\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n2 1 3\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"2 \\n1 2 3\\n\",\n    \"2 \\n1 3 2\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n2 1 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3 \\n4 1 2\\n\",\n    \"3 \\n2 1 3\\n\",\n    \"3 \\n4 1 3\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3 \\n4 1 2\\n\",\n    \"3\\n3 2 4\\n\",\n    \"3 \\n3 1 2\\n\",\n    \"3 \\n1 4 2\\n\",\n    \"3 \\n4 1 3\\n\",\n    \"3 \\n4 1 3\\n\",\n    \"3 \\n1 3 2\\n\",\n    \"3\\n2 1 3\\n\",\n    \"3 \\n1 3 4\\n\",\n    \"3 \\n4 1 3\\n\",\n    \"3 \\n4 1 2\\n\",\n    \"3 \\n1 2 4\\n\",\n    \"3 \\n3 1 2\\n\",\n    \"3 \\n1 3 2\\n\",\n    \"3 \\n1 3 4\\n\",\n    \"3 \\n1 4 3\\n\",\n    \"3\\n2 1 3\\n\",\n    \"3 \\n1 3 4\\n\",\n    \"3 \\n1 4 2\\n\",\n    \"3 \\n1 3 4\\n\",\n    \"3 \\n1 2 4\\n\",\n    \"3\\n2 1 3\\n\",\n    \"4\\n5 4 2\\n\",\n    \"3\\n4 3 5\\n\",\n    \"3\\n4 3 5\\n\",\n    \"3\\n4 3 5\\n\",\n    \"3\\n4 3 5\\n\",\n    \"4\\n5 3 2\\n\",\n    \"3\\n4 3 5\\n\",\n    \"3\\n4 3 5\\n\",\n    \"4\\n5 4 2\\n\",\n    \"3\\n4 3 5\\n\",\n    \"4\\n2 3 5\\n\",\n    \"4 \\n2 1 3\\n\",\n    \"4\\n5 3 2\\n\",\n    \"3\\n4 3 5\\n\",\n    \"4\\n4 2 3\\n\",\n    \"4\\n5 2 4\\n\",\n    \"4 \\n1 3 4\\n\",\n    \"4\\n5 3 4\\n\",\n    \"4\\n4 2 5\\n\",\n    \"4\\n2 4 5\\n\",\n    \"4\\n5 3 4\\n\",\n    \"4\\n1 3 4\\n\",\n    \"4 \\n1 2 5\\n\",\n    \"4\\n4 2 3\\n\",\n    \"4\\n4 1 3\\n\",\n    \"4\\n4 1 2\\n\",\n    \"4\\n4 1 3\\n\",\n    \"4\\n3 1 2\\n\",\n    \"4 \\n1 5 4\\n\",\n    \"4 \\n1 4 3\\n\",\n    \"4 \\n1 3 4\\n\",\n    \"4 \\n1 3 2\\n\",\n    \"4\\n5 1 4\\n\",\n    \"4 \\n1 2 4\\n\",\n    \"4\\n5 1 3\\n\",\n    \"4\\n6 5 4\\n\",\n    \"3\\n5 4 6\\n\",\n    \"4\\n6 5 2\\n\",\n    \"3\\n5 4 6\\n\",\n    \"4\\n2 5 6\\n\",\n    \"4\\n6 3 5\\n\",\n    \"3\\n5 4 6\\n\",\n    \"4\\n6 5 4\\n\",\n    \"3\\n5 4 6\\n\",\n    \"4\\n4 3 5\\n\",\n    \"4\\n6 3 4\\n\",\n    \"5\\n2 5 4\\n\",\n    \"5\\n2 4 5\\n\",\n    \"4\\n5 4 2\\n\",\n    \"4\\n6 4 5\\n\",\n    \"5\\n2 3 4\\n\",\n    \"5\\n3 6 5\\n\",\n    \"5\\n5 3 4\\n\",\n    \"5\\n2 5 3\\n\",\n    \"5\\n6 4 2\\n\",\n    \"5\\n1 6 3\\n\",\n    \"5\\n2 1 4\\n\",\n    \"4\\n2 4 6\\n\",\n    \"4\\n6 3 5\\n\",\n    \"4\\n1 4 5\\n\",\n    \"5\\n1 3 6\\n\",\n    \"5 \\n1 4 3\\n\",\n    \"5\\n4 1 5\\n\",\n    \"5\\n1 6 3\\n\",\n    \"5 \\n1 5 4\\n\",\n    \"5\\n3 1 2\\n\",\n    \"5\\n6 1 3\\n\",\n    \"5 \\n1 4 6\\n\",\n    \"5\\n3 1 5\\n\",\n    \"5\\n1 3 4\\n\",\n    \"4\\n7 6 4\\n\",\n    \"4\\n7 6 2\\n\",\n    \"4\\n6 5 4\\n\",\n    \"4\\n7 4 6\\n\",\n    \"3\\n6 5 7\\n\",\n    \"5\\n2 6 7\\n\",\n    \"4\\n7 6 5\\n\",\n    \"3\\n6 5 7\\n\",\n    \"4\\n3 6 7\\n\",\n    \"4\\n6 4 5\\n\",\n    \"6\\n4 5 3\\n\",\n    \"5\\n7 4 3\\n\",\n    \"5\\n2 7 5\\n\",\n    \"4\\n7 5 6\\n\",\n    \"5\\n6 5 3\\n\",\n    \"4\\n7 4 5\\n\",\n    \"5\\n5 3 4\\n\",\n    \"5\\n1 6 7\\n\",\n    \"6\\n2 3 5\\n\",\n    \"6\\n6 5 7\\n\",\n    \"5\\n1 3 6\\n\",\n    \"6 \\n1 4 5\\n\",\n    \"5\\n6 4 7\\n\",\n    \"5\\n5 3 7\\n\",\n    \"6 \\n3 2 4\\n\",\n    \"5\\n6 2 7\\n\",\n    \"6\\n6 1 2\\n\",\n    \"6\\n4 1 7\\n\",\n    \"6 \\n1 2 4\\n\",\n    \"5\\n6 4 7\\n\",\n    \"6\\n1 4 5\\n\",\n    \"5\\n4 2 6\\n\",\n    \"6\\n1 5 4\\n\",\n    \"6 \\n1 5 7\\n\",\n    \"5\\n4 3 5\\n\",\n    \"4\\n8 7 4\\n\",\n    \"5\\n8 6 5\\n\",\n    \"5\\n5 4 6\\n\",\n    \"3\\n7 6 8\\n\",\n    \"4\\n7 6 4\\n\",\n    \"6\\n5 4 7\\n\",\n    \"5\\n8 5 2\\n\",\n    \"5\\n6 7 8\\n\",\n    \"5\\n5 4 8\\n\",\n    \"5\\n7 6 8\\n\",\n    \"5\\n7 4 8\\n\",\n    \"5\\n3 8 5\\n\",\n    \"5\\n5 6 7\\n\",\n    \"6\\n3 7 8\\n\",\n    \"6\\n6 4 7\\n\",\n    \"6\\n8 5 3\\n\",\n    \"7\\n5 7 6\\n\",\n    \"6\\n2 7 8\\n\",\n    \"6\\n2 8 6\\n\",\n    \"6\\n6 2 7\\n\",\n    \"5\\n1 7 8\\n\",\n    \"7\\n8 4 5\\n\",\n    \"6\\n4 7 3\\n\",\n    \"7\\n3 5 4\\n\",\n    \"5\\n1 6 7\\n\",\n    \"7\\n1 8 5\\n\",\n    \"7\\n5 2 7\\n\",\n    \"7\\n8 1 3\\n\",\n    \"7\\n1 7 3\\n\",\n    \"7 \\n1 2 3\\n\",\n    \"7 \\n2 8 6\\n\",\n    \"6\\n1 5 6\\n\",\n    \"7 \\n1 2 4\\n\",\n    \"7 \\n1 4 8\\n\",\n    \"6\\n2 5 4\\n\",\n    \"5\\n6 9 7\\n\",\n    \"5\\n2 7 8\\n\",\n    \"5\\n6 8 9\\n\",\n    \"5\\n6 9 8\\n\",\n    \"6\\n8 7 9\\n\",\n    \"5\\n4 8 5\\n\",\n    \"6\\n6 8 5\\n\",\n    \"4\\n7 6 9\\n\",\n    \"6\\n7 6 4\\n\",\n    \"4\\n9 8 3\\n\",\n    \"6\\n7 5 9\\n\",\n    \"6\\n6 3 9\\n\",\n    \"6\\n7 5 9\\n\",\n    \"6\\n6 7 9\\n\",\n    \"6\\n9 7 5\\n\",\n    \"5\\n6 8 9\\n\",\n    \"7\\n8 7 9\\n\",\n    \"6\\n6 4 8\\n\",\n    \"7\\n7 6 8\\n\",\n    \"7\\n7 8 6\\n\",\n    \"7\\n6 3 7\\n\",\n    \"7\\n3 7 4\\n\",\n    \"7\\n3 9 7\\n\",\n    \"7\\n9 6 7\\n\",\n    \"7\\n2 5 4\\n\",\n    \"7\\n5 3 4\\n\",\n    \"8\\n6 1 8\\n\",\n    \"6\\n4 1 9\\n\",\n    \"8 \\n4 1 3\\n\",\n    \"7\\n9 2 3\\n\",\n    \"7\\n1 5 9\\n\",\n    \"7\\n6 1 3\\n\",\n    \"8\\n4 7 8\\n\",\n    \"6\\n1 9 8\\n\",\n    \"7\\n1 4 5\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1294/F", "starter_code": ""}
{"id": 4001, "question": "Recently you have received two positive integer numbers $x$ and $y$. You forgot them, but you remembered a shuffled list containing all divisors of $x$ (including $1$ and $x$) and all divisors of $y$ (including $1$ and $y$). If $d$ is a divisor of both numbers $x$ and $y$ at the same time, there are two occurrences of $d$ in the list.\n\nFor example, if $x=4$ and $y=6$ then the given list can be any permutation of the list $[1, 2, 4, 1, 2, 3, 6]$. Some of the possible lists are: $[1, 1, 2, 4, 6, 3, 2]$, $[4, 6, 1, 1, 2, 3, 2]$ or $[1, 6, 3, 2, 4, 1, 2]$.\n\nYour problem is to restore suitable positive integer numbers $x$ and $y$ that would yield the same list of divisors (possibly in different order).\n\nIt is guaranteed that the answer exists, i.e. the given list of divisors corresponds to some positive integers $x$ and $y$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 128$) \u2014 the number of divisors of $x$ and $y$.\n\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^4$), where $d_i$ is either divisor of $x$ or divisor of $y$. If a number is divisor of both numbers $x$ and $y$ then there are two copies of this number in the list.\n\n\n-----Output-----\n\nPrint two positive integer numbers $x$ and $y$ \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.\n\n\n-----Example-----\nInput\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput\n20 8", "solutions": "[\"n = int(input())\\n\\nseq = sorted(list(map(int, input().split())))[::-1]\\n\\na = seq[0]\\nlast = -1\\nfor i in range(len(seq)):\\n    if a % seq[i] == 0:\\n        if last != seq[i]:\\n            last = seq[i]\\n        else:\\n            b = seq[i]\\n            break\\n    else:\\n        b = seq[i]\\n        break\\nprint(a, b)\\n\", \"input()\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\nx = a[0]\\ny1 = x + 1\\nfor y in a:\\n    if x % y or y == y1:\\n        print(x, y)\\n        break\\n    y1 = y\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nA.sort()\\nx = A[-1]\\nused = [0] * (x + 1)\\ny = 0\\nfor i in A:\\n    if x % i == 0:\\n        if used[i] == 1:\\n            y = max(y, i)\\n        else:\\n            used[i] = 1\\n    else:\\n        y = max(y, i)\\nprint(x, y)\", \"def get():\\n    return list(map(int,input().split()))\\nn=int(input())\\na=get()\\ns=max(a)\\na.remove(s)\\nfor i in range(1,s//2+1):\\n    if s%i==0:\\n        a.remove(i)\\nprint(s,max(a))\\n\", \"n = int(input())\\na = list(map(int,input().split()))\\na = sorted(a)\\nr = a[-1]\\nfor i in range(1,r+1):\\n    if r%i==0:\\n        a.remove(i)\\na = sorted(a)\\nt = a[-1]\\nprint(r,t)\\n\", \"input()\\nds = list(map(int, input().split()))\\nx = max(ds)\\nfor v in {v for v in ds if x % v == 0}:\\n    ds.remove(v)\\ny = max(ds)\\nprint(x, y)\\n\", \"input()\\nd = list(map(int, input().split()))\\n\\na = max(d)\\n\\nfor i in range(2, a + 1):\\n\\tif a % i == 0:\\n\\t\\td.remove(i)\\n\\nprint(a, max(d))\", \"n=int(input())\\nA=list(map(int,input().split()))\\nx=max(A)\\n\\nfrom collections import Counter\\ncounter=Counter(A)\\n\\nimport math\\nxr=math.ceil(math.sqrt(x))\\n\\nLIST=[]\\nfor i in range(1,xr+1):\\n    if x%i==0:\\n        LIST.append(i)\\n        LIST.append(x//i)\\n\\nLIST=set(LIST)\\n\\nfor l in LIST:\\n    counter[l]-=1\\n\\nREST=[i for i in list(counter.keys()) if counter[i]!=0]\\ny=max(REST)\\n\\nprint(x,y)\\n\", \"n = int(input())\\n\\nnums = [int(c) for c in input().split(\\\" \\\")]\\n# nums.sort()\\n\\noccur = {}\\nfor num in nums:\\n    if num not in occur: occur[num] = 0\\n    occur[num] += 1\\n\\ngcd = 1\\nfor num in occur:\\n    if occur[num] == 2: gcd = max(gcd, num)\\n\\nb = max(nums)\\n\\n#print(occur)\\n\\nfor num in occur:\\n    if b%num == 0:\\n        occur[num] -= 1\\n\\n#print(occur)\\n\\na = 1\\nfor num in occur:\\n    if occur[num] == 1:\\n        a = max(a, num)\\n\\nprint(a, b)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = max(a)\\nb = []\\nfor i in range(1, x + 1) :\\n    if x % i == 0 :\\n        b.append(i)\\n\\nfor i in range(len(b)) :\\n    a.remove(b[i])\\n\\nprint(x, max(a))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\n\\nx = a[-1]\\nwhile a:\\n    d = a.pop()\\n    if x % d != 0 or a and a[-1] == d:\\n        y = d\\n        break\\nprint(x, y)\\n\", \"n=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nnum=max(a)\\nd=dict()\\nfor i in range(n):\\n    d[a[i]]=0\\nfor i in range(n):\\n    d[a[i]]+=1\\na=list(set(a))\\nv=[]\\nfor i in range(len(a)):\\n    if d[a[i]]==2 or num%a[i]!=0:\\n        v.append(a[i])\\nnum2=max(v)\\nprint(num,num2)\\n    \\n\", \"n=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nmaxi=a[n-1]\\nfor i in range(1,maxi+1,1):\\n\\tif(maxi%i==0):\\n\\t\\ta.remove(i)\\nm2=max(a)\\nprint(maxi,m2)\", \"n = int(input())\\nd = [ int(a) for a in input().split() ]\\n\\nd.sort()\\n\\nbig = d[-1]\\nfor x in range(1, big+1):\\n    if big % x == 0:\\n        d.remove(x)\\n\\nprint(big, d[-1])\\n\", \"# map(int,input().split(\\\" \\\"))\\n\\nn=int(input())\\n\\nl=list(map(int,input().split(\\\" \\\")))\\n\\n\\nm=max(l)\\n\\ni=1;\\n\\nwhile (i*i<=m):\\n\\tif(m%i==0):\\n\\t\\tif(len(l)>0 and (i in l)):\\n\\t\\t\\tl.remove(i)\\n\\t\\tif(len(l)>0 and ((m//i) in l) and (i!=(m//i))):\\n\\t\\t\\tl.remove(m//i)\\n\\ti+=1\\n\\nprint(m,max(l))\\n# print(l)\\n\\n\\n\", \"input()\\n\\nlst = list(map(int, input().split()))\\nlst.sort()\\nfirst = lst[-1]\\n\\ni = 1\\nwhile i <= first:\\n    if first % i == 0:\\n        lst.remove(i)\\n    i += 1\\n\\nprint(first, lst[-1])\\n\", \"t=1\\nj=0\\nfor i in range(10):\\n    j+=1\\nfor _ in range(1):\\n    n=int(input())\\n    a=list(map(int,input().split()))\\n    a.sort()\\n    num=max(a)\\n    d=dict()\\n    for i in range(n):\\n        d[a[i]]=0\\n    for i in range(n):\\n        d[a[i]]+=1\\n    a=list(set(a))\\n    v=[]\\n    for i in range(len(a)):\\n        if d[a[i]]==2 or num%a[i]!=0:\\n            v.append(a[i])\\n    num2=max(v)\\n    print(num,num2)\\n    \\n\", \"import math\\n\\ndef divisorGenerator(n):\\n    large_divisors = []\\n    for i in range(1, int(math.sqrt(n) + 1)):\\n        if n % i == 0:\\n            yield i\\n            if i*i != n:\\n                large_divisors.append(n / i)\\n    for divisor in reversed(large_divisors):\\n        yield divisor\\n\\nn = int(input())\\na = list(map(int, input().split()))\\nn1 = max(a)\\nfor i in divisorGenerator(n1):\\n    a.remove(i)\\nn2 = max(a)\\nprint('{} {}'.format(n1, n2))\\n\", \"from math import gcd\\nn = int(input())\\nk = []\\np = []\\narr = [int(x) for x in input().split()]\\ng = max(arr)\\nprint(g, end = ' ')\\nfor i in arr:\\n    if (g % i == 0) and i not in k:\\n        k.append(i)\\n    else:\\n        p.append(i)\\nlcm = p[0]\\nfor i in p[1:]:\\n    lcm = lcm*i//gcd(lcm, i)\\nprint(lcm)\", \"n = int(input())\\nd = [int(t) for t in input().split(' ')]\\nd.sort()\\nd.reverse()\\n\\nd1 = d[0]\\nd2 = None\\nfor i in range(1, len(d)):\\n    if d1 % d[i] != 0 or d[i] == d[i-1]:\\n        d2 = d[i]\\n        break\\nprint(d1, d2)\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = max(a)\\ns = set()\\ni = 0\\nwhile i < len(a):\\n    if x % a[i] == 0:\\n        t = len(s)\\n        s.add(a[i])\\n        if len(s) > t:\\n            a.pop(i)\\n        else:\\n            i += 1\\n    else:\\n        i += 1\\nprint(x, max(a))\", \"n=int(input())\\na=[int(i) for i in input().split()]\\nk=max(a)\\nb=[]\\nc=set()\\nfor i in range(n):\\n    if k%a[i]==0 and a[i] not in c:\\n        c.add(a[i])\\n    else:\\n        b.append(a[i])\\nprint(k,max(b))\", \"a=int(input())\\nb=list(map(int,input().split()))\\nx=max(b)\\nfor i in range(1,x+1):\\n    if x%i==0:\\n        b.remove(i)\\nprint(x,max(b))\\n\", \"n = int(input())\\nd = list(map(int, input().split()))\\nd.sort(reverse = True)\\nx = d[0]\\nx_yakusuu = []\\nfor i in range(1, 10001):\\n    if x % i == 0:\\n        x_yakusuu.append(i)\\nfor i in x_yakusuu:\\n    d.remove(i)\\nd.sort(reverse = True)\\nprint(str(x)+\\\" \\\"+str(d[0]))\\n\", \"n=int(input())\\nA=list(map(int,input().split()))\\nx=max(A)\\nfor i in range(1,x+1):\\n    if(x%i==0):\\n        A.remove(i)\\ny=max(A)\\nprint(x,y)\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"10\\n10 2 8 1 2 4 1 20 4 5\\n\",\n    \"4\\n9973 9973 1 1\\n\",\n    \"66\\n35 90 36 7560 189 14 360 180 168 12 1 252 21 8 630 15 40 1512 18 9973 108 7 540 3 210 270 2520 504 1890 6 378 70 1080 30 20 84 1260 420 105 9 135 28 60 72 315 24 63 126 27 280 45 5 120 1 42 945 216 4 756 140 840 56 10 2 54 3780\\n\",\n    \"128\\n540 90 378 3780 270 35 180 15 6 14 20 3780 2520 140 1080 54 540 120 1890 15 420 840 20 756 10 126 42 54 36 14 216 8 168 210 60 7 63 2 216 21 30 189 28 135 2 630 21 30 60 1512 7560 70 5 12 40 7560 252 378 3 108 5 72 10 3 28 24 1 27 9 45 180 56 1260 945 1080 420 168 2520 18 70 1 27 9 7 315 4 84 40 504 360 252 6 8 360 315 140 45 210 84 56 945 135 1260 280 756 90 108 630 36 42 72 504 1512 189 120 105 105 280 24 270 63 18 840 1890 126 35 12 4\\n\",\n    \"23\\n16 128 256 27 32 243 1 512 64 8192 2 1024 81 8 1 4 729 4096 3 2187 6561 9 2048\\n\",\n    \"65\\n108 90 27 72 2520 30 3780 35 20 21 315 42 63 120 1 945 135 1512 28 40 210 756 9 24 180 1890 1 2 189 378 5 1080 280 168 126 840 45 7 6 216 630 4 7560 18 8 56 140 504 60 105 54 252 3 360 1260 15 420 12 14 36 270 70 10 540 84\\n\",\n    \"28\\n8192 4 128 1024 8 4 2048 8 16 64 2 512 1 2048 32 256 8192 4096 64 4096 256 16 1024 512 128 2 32 1\\n\",\n    \"2\\n1 1\\n\",\n    \"50\\n1250 5000 250 1000 500 10 40 250 80 16 10000 125 200 50 80 1 4 20 1 10000 2500 100 4 20 625 10 2 200 8 1000 16 2000 400 5 5 2500 8 400 5000 2 625 125 50 25 2000 1250 100 40 500 25\\n\",\n    \"89\\n1080 126 315 18 3780 84 180 2520 12 756 70 504 15 9 36 630 20 2 2500 360 200 1000 100 108 5000 5 14 1890 10 90 105 7560 2 80 16 28 35 840 1 189 125 6 4 1512 945 40 10 210 8 25 280 8 20 270 27 1260 72 420 120 168 30 625 500 540 140 42 252 1 54 50 56 40 21 7 1250 63 216 250 4 10000 5 400 3 60 45 24 135 2000 378\\n\",\n    \"8\\n1234 4321 29 1 2 1 149 617\\n\",\n    \"64\\n945 130 78 135 91 630 14 2730 27 1 35 2 5 210 9 65 195 1365 7 3 390 70 455 10 15 378 3 315 39 105 273 10 21 2 45 15 546 35 42 90 18 182 26 910 63 189 30 210 6 70 105 30 54 270 1890 6 13 5 21 7 1 42 14 126\\n\",\n    \"20\\n1 243 1 6561 128 81 4 8 32 16 3 2187 64 512 9 27 256 1024 2 729\\n\",\n    \"12\\n66 6 3 33 22 3 1 1 2 11 11 33\\n\",\n    \"6\\n6 1 1 2 3 3\\n\",\n    \"14\\n14 28 2 2 56 1 14 28 4 7 1 7 8 4\\n\",\n    \"69\\n1 7560 2 3780 3 2520 4 1890 5 1512 6 1260 7 1080 8 945 9 840 10 756 12 630 14 540 15 504 18 420 20 378 21 360 24 315 27 280 28 270 30 252 35 216 36 210 40 189 42 180 45 168 54 140 56 135 60 126 63 120 70 108 72 105 84 90 1 2 4 8 16\\n\",\n    \"14\\n2 1 3 1 16 2 12 8 24 6 3 6 48 4\\n\",\n    \"10\\n2 1 5 6 15 2 30 10 3 1\\n\",\n    \"18\\n1 2 4 5 10 20 1 2 4 5 10 20 30 60 15 3 6 12\\n\",\n    \"5\\n1 3 9 3 1\\n\",\n    \"7\\n1 1 2 2 4 4 8\\n\",\n    \"6\\n1 7 1 14 7 2\\n\",\n    \"7\\n1 2 4 1 2 4 8\\n\",\n    \"8\\n1 2 4 1 2 4 8 16\\n\",\n    \"12\\n5 2 10 8 20 4 2 4 1 40 1 8\\n\",\n    \"6\\n29 29 1 1 58 2\\n\",\n    \"10\\n1 2 4 5 10 20 1 2 5 10\\n\",\n    \"8\\n16 8 4 2 1 4 2 1\\n\",\n    \"10\\n1 2 5 10 1 2 4 5 10 20\\n\",\n    \"5\\n1 2 4 1 2\\n\",\n    \"12\\n3 15 1 10 2 15 1 3 30 5 5 6\\n\",\n    \"10\\n1 2 1 2 4 5 5 10 10 20\\n\",\n    \"5\\n1 7 49 1 7\\n\",\n    \"5\\n1 1 2 2 4\\n\",\n    \"6\\n29 58 2 29 1 1\\n\",\n    \"10\\n7 14 5 35 70 1 7 2 10 1\\n\",\n    \"5\\n1 2 1 2 4\\n\",\n    \"15\\n12 36 8 4 6 9 72 2 4 2 1 18 24 3 1\\n\",\n    \"12\\n1 2 8 4 3 24 4 6 1 2 8 12\\n\",\n    \"12\\n2 32 64 4 16 16 8 8 2 1 1 4\\n\",\n    \"5\\n31 1 1 7 49\\n\",\n    \"12\\n2 3 13 3 39 13 1 6 39 26 78 1\\n\",\n    \"9\\n7 49 1 1 98 14 49 7 2\\n\",\n    \"6\\n13 5 1 1 13 65\\n\",\n    \"4\\n1 61 31 1\\n\",\n    \"5\\n1 5 5 25 1\\n\",\n    \"5\\n25 5 1 5 1\\n\",\n    \"10\\n1 1 2 2 3 3 4 6 6 12\\n\",\n    \"5\\n25 5 5 1 1\\n\",\n    \"6\\n23 1 2 46 23 1\\n\",\n    \"18\\n10 1 4 5 20 10 40 16 20 8 2 5 8 40 2 80 1 4\\n\",\n    \"6\\n1 1 2 2 5 10\\n\",\n    \"10\\n6 10 1 3 15 5 2 61 30 1\\n\",\n    \"6\\n1 6 3 2 3 1\\n\",\n    \"16\\n30 1 3 90 9 27 3 9 45 10 6 18 1 15 2 5\\n\",\n    \"11\\n54 18 1 3 27 9 6 1 9 3 2\\n\",\n    \"7\\n1 2 4 8 16 1 2\\n\",\n    \"7\\n1 16 1 4 2 2 8\\n\",\n    \"6\\n1 1 2 5 5 10\\n\",\n    \"9\\n9 2 6 3 18 1 1 3 9\\n\",\n    \"13\\n1 2 3 4 6 9 12 18 36 1 2 3 6\\n\",\n    \"6\\n1 1 2 3 3 6\\n\",\n    \"8\\n2 2 1 5 50 25 10 1\\n\",\n    \"4\\n67 1 13 1\\n\",\n    \"18\\n75 3 9 8 18 2 12 36 25 3 15 72 24 4 6 1 5 1\\n\",\n    \"12\\n2 1 3 12 4 8 24 4 1 8 6 2\\n\",\n    \"9\\n20 10 5 4 2 1 4 2 1\\n\",\n    \"18\\n8 8 3 16 4 2 20 2 5 4 24 6 40 1 1 10 80 12\\n\",\n    \"13\\n100 50 25 20 10 5 4 2 1 10 5 2 1\\n\",\n    \"6\\n94 2 47 1 1 3\\n\",\n    \"6\\n58 2 2 1 29 1\\n\",\n    \"20\\n1 18 10 9 2 15 5 45 3 10 1 30 15 6 5 2 30 3 6 90\\n\",\n    \"13\\n2 1 8 10 2 4 16 5 40 1 4 20 80\\n\",\n    \"6\\n6 3 1 3 2 1\\n\",\n    \"10\\n1 3 5 15 1 3 5 9 15 45\\n\",\n    \"6\\n47 47 2 94 1 1\\n\",\n    \"14\\n4 56 14 4 2 7 28 8 14 7 1 1 2 28\\n\",\n    \"6\\n1 1 2 2 4 8\\n\",\n    \"6\\n55 5 11 1 1 5\\n\",\n    \"11\\n36 2 3 1 18 6 2 4 1 9 12\\n\",\n    \"6\\n1 2 31 31 1 62\\n\",\n    \"10\\n1 7 11 77 121 847 1 7 11 77\\n\",\n    \"4\\n1 1 2 7\\n\",\n    \"18\\n90 18 2 9 5 6 18 1 6 3 1 3 10 45 9 15 2 30\\n\",\n    \"6\\n1 2 1 2 4 8\\n\",\n    \"20\\n24 16 32 2 3 96 1 2 12 48 4 6 8 12 6 8 24 3 4 1\\n\",\n    \"10\\n1 2 3 6 1 2 3 4 6 12\\n\",\n    \"10\\n11 11 1 44 2 22 4 22 1 2\\n\",\n    \"10\\n3 1 15 2 30 10 1 5 23 6\\n\",\n    \"8\\n1 3 9 27 81 1 3 9\\n\",\n    \"6\\n6 1 3 3 2 1\\n\",\n    \"10\\n76 38 1 2 1 4 5 3 15 19\\n\",\n    \"6\\n1 2 3 6 1 3\\n\",\n    \"6\\n23 23 2 1 1 46\\n\",\n    \"3\\n1 3 1\\n\",\n    \"12\\n4 1 1 12 6 21 63 2 9 3 7 3\\n\",\n    \"6\\n11 1 2 22 2 1\\n\",\n    \"10\\n21 3 63 9 5 1 15 7 1 3\\n\",\n    \"10\\n3 11 1 11 1 33 33 3 9 99\\n\",\n    \"10\\n22 1 33 11 3 6 66 11 1 2\\n\",\n    \"18\\n4 2 30 5 3 1 12 6 4 60 12 15 1 3 6 10 2 20\\n\",\n    \"16\\n2 7 84 14 6 1 7 1 3 21 12 42 28 2 4 14\\n\",\n    \"6\\n1 2 5 10 1 5\\n\",\n    \"3\\n1 1 2\\n\",\n    \"12\\n3 1 2 6 5 1 10 2 10 5 30 15\\n\",\n    \"10\\n3 1 5 30 10 2 15 6 3 1\\n\",\n    \"21\\n72 9 3 6 3 1 18 36 2 24 36 2 12 4 9 12 8 18 6 4 1\\n\",\n    \"11\\n2 6 12 4 18 3 1 3 36 1 9\\n\",\n    \"18\\n1 4 12 6 72 8 3 36 1 18 9 18 24 2 3 2 9 6\\n\",\n    \"11\\n36 3 1 1 4 9 12 2 3 18 6\\n\",\n    \"6\\n65 1 5 5 1 13\\n\",\n    \"8\\n1 2 17 17 34 68 1 4\\n\",\n    \"5\\n1 1 3 3 9\\n\",\n    \"10\\n39 26 6 1 1 2 13 78 3 13\\n\",\n    \"12\\n2 5 50 25 25 5 10 20 100 1 4 1\\n\",\n    \"14\\n1 6 9 90 10 5 5 2 30 1 18 15 3 45\\n\",\n    \"10\\n17 17 1 34 4 68 2 2 34 1\\n\",\n    \"16\\n4 36 3 4 2 1 72 9 8 2 6 8 12 24 18 1\\n\",\n    \"11\\n1 9 54 27 6 3 2 1 9 3 18\\n\",\n    \"5\\n1 3 3 9 1\\n\",\n    \"8\\n1 65 29 58 5 2 1 13\\n\",\n    \"3\\n1 2 1\\n\",\n    \"14\\n2 2 3 7 1 42 14 28 84 4 21 6 12 1\\n\",\n    \"8\\n7 14 7 1 2 4 1 28\\n\",\n    \"6\\n1 2 1 2 3 6\\n\",\n    \"12\\n25 20 2 5 1 1 4 10 50 100 5 25\\n\",\n    \"10\\n1 8 3 9 4 2 33 11 99 1\\n\",\n    \"6\\n1 11 1 11 5 55\\n\",\n    \"10\\n32 1 1 2 2 8 4 4 8 16\\n\",\n    \"8\\n9 9 1 81 3 27 1 3\\n\",\n    \"6\\n7 1 11 7 77 1\\n\",\n    \"20\\n12 21 7 21 2 1 6 42 3 42 3 7 4 84 14 14 2 6 28 1\\n\",\n    \"4\\n1 2 53 1\\n\",\n    \"14\\n1 2 4 5 8 10 20 40 1 2 4 5 10 20\\n\",\n    \"18\\n1 4 16 3 12 12 3 24 1 4 6 48 8 6 2 24 2 8\\n\",\n    \"4\\n5 1 1 61\\n\",\n    \"15\\n24 8 4 3 2 6 1 2 32 1 48 12 96 4 16\\n\",\n    \"6\\n62 1 31 31 2 1\\n\",\n    \"11\\n2 18 4 27 54 3 2 1 6 1 9\\n\",\n    \"18\\n6 1 36 3 1 9 9 72 4 18 12 6 2 3 18 8 2 24\\n\",\n    \"6\\n1 3 2 1 39 13\\n\",\n    \"6\\n87 29 29 3 1 1\\n\",\n    \"12\\n4 8 7 14 14 2 2 7 28 56 1 1\\n\",\n    \"6\\n2 1 43 86 1 2\\n\",\n    \"12\\n21 2 33 6 66 7 3 3 1 1 11 22\\n\",\n    \"5\\n1 7 1 49 7\\n\",\n    \"12\\n2 1 16 4 6 3 8 1 48 24 2 12\\n\",\n    \"4\\n1 43 1 13\\n\",\n    \"11\\n5 2 25 100 20 50 10 1 5 1 4\\n\",\n    \"9\\n27 6 81 3 3 1 1 2 9\\n\",\n    \"6\\n1 1 29 3 87 29\\n\",\n    \"8\\n15 5 3 75 1 5 1 25\\n\",\n    \"10\\n4 32 16 4 1 2 8 64 2 1\\n\",\n    \"8\\n3 12 6 4 3 1 1 2\\n\",\n    \"6\\n47 1 1 94 7 2\\n\",\n    \"12\\n3 7 1 1 21 14 21 6 3 42 2 7\\n\",\n    \"8\\n1 5 1 2 4 5 10 20\\n\",\n    \"16\\n2 1 5 30 1 6 12 2 4 10 60 20 10 5 15 3\\n\",\n    \"20\\n9 12 2 24 36 24 1 3 18 6 8 72 12 4 1 2 8 3 6 4\\n\",\n    \"14\\n24 9 18 8 6 12 72 1 3 4 1 5 2 36\\n\",\n    \"6\\n1 7 1 7 5 35\\n\",\n    \"16\\n6 4 1 1 6 2 2 36 8 3 12 9 3 18 24 72\\n\",\n    \"3\\n67 1 1\\n\",\n    \"6\\n1 58 29 1 2 2\\n\",\n    \"20\\n12 8 6 96 4 3 16 8 32 12 6 4 48 1 24 3 24 1 2 2\\n\",\n    \"4\\n5 25 1 1\\n\",\n    \"8\\n5 33 9 99 3 11 1 1\\n\",\n    \"6\\n1 1 17 51 3 3\\n\",\n    \"8\\n87 7 14 1 2 29 1 3\\n\",\n    \"6\\n23 23 2 46 1 1\\n\",\n    \"10\\n1 1 2 2 4 5 5 10 10 20\\n\",\n    \"9\\n81 2 1 9 27 3 6 3 1\\n\",\n    \"14\\n48 16 4 6 1 8 3 4 12 1 2 2 8 24\\n\",\n    \"6\\n1 2 2 14 1 7\\n\",\n    \"14\\n12 18 4 2 2 72 6 36 24 8 3 1 9 1\\n\",\n    \"12\\n15 5 10 1 1 5 6 30 3 2 3 15\\n\",\n    \"6\\n1 2 5 95 1 19\\n\",\n    \"10\\n1 7 42 7 1 2 21 3 14 6\\n\",\n    \"9\\n1 18 2 6 9 1 3 3 9\\n\",\n    \"12\\n8 6 1 3 1 4 12 24 2 16 48 3\\n\",\n    \"5\\n1 25 1 5 5\\n\",\n    \"7\\n3 27 1 81 3 1 9\\n\",\n    \"11\\n6 24 8 1 2 4 1 12 3 4 2\\n\",\n    \"11\\n4 10 5 20 25 2 50 1 2 100 1\\n\",\n    \"8\\n23 46 2 4 1 1 23 92\\n\",\n    \"6\\n85 17 5 17 1 1\\n\",\n    \"9\\n4 4 11 44 2 22 2 1 1\\n\",\n    \"11\\n2 4 1 4 16 32 16 8 8 1 2\\n\",\n    \"14\\n8 2 16 5 2 1 10 1 4 80 20 10 5 40\\n\",\n    \"11\\n18 2 1 3 12 6 1 4 2 36 9\\n\",\n    \"6\\n1 2 4 8 1 16\\n\",\n    \"8\\n10 4 20 2 1 1 5 2\\n\",\n    \"5\\n1 1 3 9 3\\n\",\n    \"18\\n10 20 4 12 30 6 5 5 3 4 10 1 20 1 15 2 2 60\\n\",\n    \"13\\n4 16 8 4 2 1 8 64 1 2 32 16 32\\n\",\n    \"10\\n27 54 18 1 2 1 9 3 6 3\\n\",\n    \"8\\n7 6 1 1 5 3 2 35\\n\",\n    \"16\\n28 2 14 4 3 12 84 6 7 21 1 2 3 42 6 1\\n\",\n    \"10\\n9 1 11 33 1 11 99 3 33 3\\n\",\n    \"11\\n2 1 6 12 8 2 24 3 4 1 4\\n\",\n    \"18\\n2 6 8 6 2 4 1 3 1 36 72 3 12 24 12 4 18 9\\n\",\n    \"15\\n96 48 16 4 2 24 12 6 1 8 2 1 4 32 3\\n\",\n    \"18\\n12 28 3 3 14 6 4 7 2 42 12 21 6 1 2 1 84 4\\n\",\n    \"15\\n5 3 3 6 15 18 45 9 9 10 1 90 2 1 30\\n\",\n    \"12\\n10 1 5 100 25 20 4 2 50 1 5 25\\n\",\n    \"6\\n3 1 3 1 6 2\\n\",\n    \"10\\n95 1 19 6 18 1 9 5 3 2\\n\",\n    \"18\\n72 24 2 3 6 8 3 6 18 9 9 36 1 2 1 12 18 4\\n\",\n    \"6\\n71 47 2 1 94 1\\n\",\n    \"20\\n8 96 5 2 6 12 10 1 4 6 3 48 3 32 30 15 2 16 1 24\\n\",\n    \"7\\n9 3 1 31 93 3 1\\n\",\n    \"10\\n1 1 2 2 4 4 5 8 10 20\\n\",\n    \"12\\n7 5 14 2 1 14 70 35 2 1 7 10\\n\",\n    \"4\\n1 1 29 19\\n\",\n    \"14\\n4 12 1 1 2 6 30 10 5 20 3 60 15 5\\n\",\n    \"11\\n3 36 12 3 9 18 6 4 2 1 1\\n\",\n    \"12\\n1 24 2 16 48 3 4 8 3 1 6 12\\n\",\n    \"10\\n4 3 6 2 12 1 24 3 8 1\\n\",\n    \"6\\n1 16 4 1 8 2\\n\",\n    \"5\\n7 49 2 1 1\\n\",\n    \"7\\n1 27 81 1 9 3 7\\n\",\n    \"4\\n4 1 2 1\\n\",\n    \"13\\n50 25 5 100 1 4 10 1 2 20 2 4 8\\n\",\n    \"9\\n8 5 16 1 32 1 4 2 64\\n\",\n    \"8\\n32 64 1 4 16 8 1 2\\n\",\n    \"12\\n3 4 1 12 48 16 1 24 2 6 8 3\\n\",\n    \"4\\n1 3 9 1\\n\",\n    \"6\\n5 1 5 19 1 95\\n\",\n    \"9\\n64 32 16 1 2 1 8 3 4\\n\",\n    \"5\\n1 1 67 2 4\\n\",\n    \"5\\n1 3 1 3 9\\n\",\n    \"9\\n9 27 81 3 27 1 9 3 1\\n\",\n    \"8\\n10 1 1 20 2 5 5 4\\n\",\n    \"5\\n5 3 1 25 1\\n\",\n    \"6\\n2 5 3 15 1 1\\n\",\n    \"10\\n4 1 1 6 3 24 8 3 2 12\\n\",\n    \"3\\n5 1 1\\n\",\n    \"4\\n1 1 5 25\\n\",\n    \"12\\n5 70 5 1 35 2 1 2 7 14 10 10\\n\",\n    \"4\\n9 1 1 3\\n\",\n    \"9\\n81 4 1 9 3 1 27 8 2\\n\",\n    \"6\\n1 2 4 1 5 25\\n\",\n    \"9\\n1 2 4 1 2 4 5 10 20\\n\"\n  ],\n  \"outputs\": [\n    \"20 8\\n\",\n    \"9973 9973\\n\",\n    \"9973 7560\\n\",\n    \"7560 7560\\n\",\n    \"8192 6561\\n\",\n    \"7560 1\\n\",\n    \"8192 8192\\n\",\n    \"1 1\\n\",\n    \"10000 10000\\n\",\n    \"10000 7560\\n\",\n    \"4321 1234\\n\",\n    \"2730 1890\\n\",\n    \"6561 1024\\n\",\n    \"66 33\\n\",\n    \"6 3\\n\",\n    \"56 28\\n\",\n    \"7560 16\\n\",\n    \"48 6\\n\",\n    \"30 2\\n\",\n    \"60 20\\n\",\n    \"9 3\\n\",\n    \"8 4\\n\",\n    \"14 7\\n\",\n    \"8 4\\n\",\n    \"16 4\\n\",\n    \"40 8\\n\",\n    \"58 29\\n\",\n    \"20 10\\n\",\n    \"16 4\\n\",\n    \"20 10\\n\",\n    \"4 2\\n\",\n    \"30 15\\n\",\n    \"20 10\\n\",\n    \"49 7\\n\",\n    \"4 2\\n\",\n    \"58 29\\n\",\n    \"70 7\\n\",\n    \"4 2\\n\",\n    \"72 4\\n\",\n    \"24 8\\n\",\n    \"64 16\\n\",\n    \"49 31\\n\",\n    \"78 39\\n\",\n    \"98 49\\n\",\n    \"65 13\\n\",\n    \"61 31\\n\",\n    \"25 5\\n\",\n    \"25 5\\n\",\n    \"12 6\\n\",\n    \"25 5\\n\",\n    \"46 23\\n\",\n    \"80 40\\n\",\n    \"10 2\\n\",\n    \"61 30\\n\",\n    \"6 3\\n\",\n    \"90 27\\n\",\n    \"54 9\\n\",\n    \"16 2\\n\",\n    \"16 2\\n\",\n    \"10 5\\n\",\n    \"18 9\\n\",\n    \"36 6\\n\",\n    \"6 3\\n\",\n    \"50 2\\n\",\n    \"67 13\\n\",\n    \"75 72\\n\",\n    \"24 8\\n\",\n    \"20 4\\n\",\n    \"80 24\\n\",\n    \"100 10\\n\",\n    \"94 3\\n\",\n    \"58 2\\n\",\n    \"90 30\\n\",\n    \"80 4\\n\",\n    \"6 3\\n\",\n    \"45 15\\n\",\n    \"94 47\\n\",\n    \"56 28\\n\",\n    \"8 2\\n\",\n    \"55 5\\n\",\n    \"36 2\\n\",\n    \"62 31\\n\",\n    \"847 77\\n\",\n    \"7 2\\n\",\n    \"90 18\\n\",\n    \"8 2\\n\",\n    \"96 24\\n\",\n    \"12 6\\n\",\n    \"44 22\\n\",\n    \"30 23\\n\",\n    \"81 9\\n\",\n    \"6 3\\n\",\n    \"76 15\\n\",\n    \"6 3\\n\",\n    \"46 23\\n\",\n    \"3 1\\n\",\n    \"63 12\\n\",\n    \"22 2\\n\",\n    \"63 15\\n\",\n    \"99 33\\n\",\n    \"66 11\\n\",\n    \"60 12\\n\",\n    \"84 14\\n\",\n    \"10 5\\n\",\n    \"2 1\\n\",\n    \"30 10\\n\",\n    \"30 3\\n\",\n    \"72 36\\n\",\n    \"36 3\\n\",\n    \"72 18\\n\",\n    \"36 3\\n\",\n    \"65 5\\n\",\n    \"68 17\\n\",\n    \"9 3\\n\",\n    \"78 13\\n\",\n    \"100 25\\n\",\n    \"90 5\\n\",\n    \"68 34\\n\",\n    \"72 8\\n\",\n    \"54 9\\n\",\n    \"9 3\\n\",\n    \"65 58\\n\",\n    \"2 1\\n\",\n    \"84 2\\n\",\n    \"28 7\\n\",\n    \"6 2\\n\",\n    \"100 25\\n\",\n    \"99 8\\n\",\n    \"55 11\\n\",\n    \"32 8\\n\",\n    \"81 9\\n\",\n    \"77 7\\n\",\n    \"84 42\\n\",\n    \"53 2\\n\",\n    \"40 20\\n\",\n    \"48 24\\n\",\n    \"61 5\\n\",\n    \"96 4\\n\",\n    \"62 31\\n\",\n    \"54 4\\n\",\n    \"72 18\\n\",\n    \"39 2\\n\",\n    \"87 29\\n\",\n    \"56 14\\n\",\n    \"86 2\\n\",\n    \"66 21\\n\",\n    \"49 7\\n\",\n    \"48 2\\n\",\n    \"43 13\\n\",\n    \"100 5\\n\",\n    \"81 6\\n\",\n    \"87 29\\n\",\n    \"75 5\\n\",\n    \"64 4\\n\",\n    \"12 3\\n\",\n    \"94 7\\n\",\n    \"42 21\\n\",\n    \"20 5\\n\",\n    \"60 10\\n\",\n    \"72 24\\n\",\n    \"72 5\\n\",\n    \"35 7\\n\",\n    \"72 6\\n\",\n    \"67 1\\n\",\n    \"58 2\\n\",\n    \"96 24\\n\",\n    \"25 1\\n\",\n    \"99 5\\n\",\n    \"51 3\\n\",\n    \"87 14\\n\",\n    \"46 23\\n\",\n    \"20 10\\n\",\n    \"81 6\\n\",\n    \"48 8\\n\",\n    \"14 2\\n\",\n    \"72 2\\n\",\n    \"30 15\\n\",\n    \"95 2\\n\",\n    \"42 7\\n\",\n    \"18 9\\n\",\n    \"48 3\\n\",\n    \"25 5\\n\",\n    \"81 3\\n\",\n    \"24 4\\n\",\n    \"100 2\\n\",\n    \"92 23\\n\",\n    \"85 17\\n\",\n    \"44 4\\n\",\n    \"32 16\\n\",\n    \"80 10\\n\",\n    \"36 2\\n\",\n    \"16 1\\n\",\n    \"20 2\\n\",\n    \"9 3\\n\",\n    \"60 20\\n\",\n    \"64 32\\n\",\n    \"54 3\\n\",\n    \"35 6\\n\",\n    \"84 6\\n\",\n    \"99 33\\n\",\n    \"24 4\\n\",\n    \"72 12\\n\",\n    \"96 4\\n\",\n    \"84 12\\n\",\n    \"90 9\\n\",\n    \"100 25\\n\",\n    \"6 3\\n\",\n    \"95 18\\n\",\n    \"72 18\\n\",\n    \"94 71\\n\",\n    \"96 30\\n\",\n    \"93 9\\n\",\n    \"20 8\\n\",\n    \"70 14\\n\",\n    \"29 19\\n\",\n    \"60 5\\n\",\n    \"36 3\\n\",\n    \"48 3\\n\",\n    \"24 3\\n\",\n    \"16 1\\n\",\n    \"49 2\\n\",\n    \"81 7\\n\",\n    \"4 1\\n\",\n    \"100 8\\n\",\n    \"64 5\\n\",\n    \"64 1\\n\",\n    \"48 3\\n\",\n    \"9 1\\n\",\n    \"95 5\\n\",\n    \"64 3\\n\",\n    \"67 4\\n\",\n    \"9 3\\n\",\n    \"81 27\\n\",\n    \"20 5\\n\",\n    \"25 3\\n\",\n    \"15 2\\n\",\n    \"24 3\\n\",\n    \"5 1\\n\",\n    \"25 1\\n\",\n    \"70 10\\n\",\n    \"9 1\\n\",\n    \"81 8\\n\",\n    \"25 4\\n\",\n    \"20 4\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1108/B", "starter_code": ""}
{"id": 4002, "question": "You are given a matrix $a$ of size $n \\times m$ consisting of integers.\n\nYou can choose no more than $\\left\\lfloor\\frac{m}{2}\\right\\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.\n\nIn other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.\n\nNote that you can choose zero elements (and the sum of such set is $0$).\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n$, $m$ and $k$ ($1 \\le n, m, k \\le 70$) \u2014 the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \\le a_{i, j} \\le 70$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum sum divisible by $k$ you can obtain.\n\n\n-----Examples-----\nInput\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\nOutput\n24\n\nInput\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\nOutput\n56\n\n\n\n-----Note-----\n\nIn the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.", "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\ndef main():\\n    n, m, k = map(int, input().split())\\n    half = m // 2\\n    se_s = []\\n    for i in range(n):\\n        lst = list(map(int, input().split()))\\n        lst.sort(reverse = True)\\n        total_sub = sum(lst[:half])\\n        dp = [[0 for _ in range(k)] for _ in range(half + 1)]\\n        for num2 in lst:\\n            for i in range(half, 0, -1):\\n                for num in dp[i - 1]:\\n                    pos = (num + num2) % k\\n                    dp[i][pos] = max(dp[i][pos], num + num2)\\n        se_s.append(set(dp[-1]))\\n    \\n    ans = 0\\n    ans_sub = set([0])\\n    for se in se_s:\\n        se_tmp = set()\\n        for num in se:\\n            for num2 in ans_sub:\\n                se_tmp.add(num + num2)\\n                if (num + num2) % k == 0:\\n                    ans = max(ans, num + num2)\\n        tmp = [0 for _ in range(k)]\\n        for num in se_tmp:\\n            tmp[num % k] = max(tmp[num % k], num)\\n        ans_sub = set(tmp)\\n        \\n    print(ans)\\n                \\n    \\nmain()\", \"\\n\\\"\\\"\\\"\\n\\n70*70*70\\n70*70*70\\n\\ndp[num][k] = ?\\n\\n\\\"\\\"\\\"\\n\\nimport math\\nfrom sys import stdin\\n\\nn,m,k = map(int,stdin.readline().split())\\n\\na = []\\nfor i in range(n):\\n    tmp = list(map(int,stdin.readline().split()))\\n    a.append(tmp)\\n\\nmaxlis = []\\n\\nfor i in range(n):\\n\\n    tdp = [[float(\\\"-inf\\\")] * k for i in range(m//2+1)]\\n    tdp[0][0] = 0\\n    \\n    for j in range(m):\\n        for x in range(len(tdp)-2,-1,-1):\\n            for y in range(k):\\n                tdp[x+1][(y+a[i][j])%k] = max(tdp[x+1][(y+a[i][j])%k] , tdp[x][y] + a[i][j])\\n    \\n    udp = [float(\\\"-inf\\\")] * k\\n    for x in range(len(tdp)):\\n        for y in range(k):\\n            udp[y] = max(udp[y] , tdp[x][y])\\n\\n    maxlis.append(udp)\\n\\n\\ndp = maxlis[0]\\n\\nfor i in range(1,len(maxlis)):\\n\\n    now = maxlis[i]\\n    ndp = [float(\\\"-inf\\\")] * k\\n\\n    for x in range(k):\\n        for y in range(k):\\n            ndp[(x+y)%k] = max(ndp[(x+y)%k] , dp[x]+now[y])\\n    dp = ndp\\n\\n#print (maxlis)\\nprint (dp[0])\", \"maxn = int(75)\\nnvc = int(-100000005)\\nG = [[nvc for _ in range(maxn)] for _ in range(maxn)]\\nF = [[nvc for _ in range(maxn)] for _ in range(maxn)]\\na = [0 for _ in range(maxn)]\\nn,m,k = list(map(int,input().split(' ')))\\nF[0][0]=0\\nfor i in range(n):\\n    a = list(map(int, input().split(' ')))\\n    for u in range(m//2+1):\\n        for v in range(k):\\n            G[0][v] = max(G[0][v],F[u][v])\\n    F = [[nvc for _ in range(maxn)] for _ in range(maxn)]\\n    for j in range(m):\\n        for u in range(m//2+1):\\n            for v in range(k):\\n                F[u+1][(v+a[j])%k] = max(F[u+1][(v+a[j])%k] , G[u][v]+a[j])\\n                F[u][v] = max(F[u][v],G[u][v])\\n        for u in range(m // 2 + 1):\\n            for v in range(k): G[u][v]=F[u][v];\\nres = 0\\nfor i in range((m//2)+1): res = max(res , F[i][0])\\nprint(res)\\n\", \"n, m, k = list(map(int, input().split()))\\nmat = [list(map(int, input().split())) for i in range(n)]\\ninf = 1 << 30\\nmodulars = [[-inf]*(k) for i in range(n)]\\n\\nfor index in range(n):\\n    a = mat[index]\\n    dp = [[[-inf]*k for i in range(m//2+1)]for _ in range(m+1)]\\n    #dp[index][picked][mod] = index\\u756a\\u76ee\\u307e\\u3067\\u898b\\u3066\\u305d\\u306e\\u3046\\u3061picked\\u500b\\u53d6\\u3063\\u3066modular(mod k) \\u306b\\u306a\\u308b\\u6642\\u306e\\u6700\\u5927\\u5024\\n    dp[0][0][0] = 0\\n    for i in range(1, m+1):\\n        v = a[i-1]\\n        for picked in range(m//2+1):\\n            for mod in range(k):\\n                if picked >= 1:\\n                    dp[i][picked][mod] = max(dp[i][picked][mod],dp[i-1][picked][mod], dp[i-1][picked-1][(mod-v) % k]+v)\\n                else:\\n                    dp[i][picked][mod] = max(dp[i][picked][mod],dp[i-1][picked][mod])\\n\\n    for mod in range(k):\\n        modulars[index][mod] = max(dp[m][picked][mod]\\n                                   for picked in range(m//2+1))\\n\\ndp = [[-inf]*(k) for i in range(n+1)]\\ndp[0][0] = 0\\n#dp[n][mod] = n\\u756a\\u76ee\\u307e\\u3067\\u898b\\u3066\\u7dcf\\u548c\\u304cmod\\u306e\\u6642\\u306e\\u6700\\u5927\\u5024\\nfor i in range(1, n+1):\\n    for mod in range(k):\\n        dp[i][mod] = max(dp[i-1][(mod-prevmod) % k] +\\n                         modulars[i-1][prevmod]for prevmod in range(k))\\n\\nans = dp[n][0]\\nprint(ans)\\n\\n\\n\", \"def read_generator():\\n    while True:\\n        tokens = input().split(' ')\\n        for t in tokens:\\n            yield t\\n\\nreader = read_generator()\\n\\ndef readword():\\n    return next(reader)\\n\\ndef readint():\\n    return int(next(reader))\\n\\ndef readfloat():\\n    return float(next(reader))\\n\\ndef readline():\\n    return input()\\n\\n\\ndef solve(n, m, t, a):\\n    ss = []\\n    for i in range(n):\\n        h = sum(a[i])\\n        s = [-1] * (h + 73)\\n        s[0] = 0\\n        for j in range(m):\\n            for k in range(h + 1, -1, -1):\\n                if 0 < (s[k] + 1) <= m // 2:\\n                    v = a[i][j]\\n                    s[k + v] = min(s[k + v], s[k] + 1)\\n                    if s[k + v] == -1:\\n                        s[k + v] = s[k] + 1\\n        toAdd = []\\n        for j in range(len(s)):\\n            if s[j] > -1:\\n                toAdd.append(j)\\n\\n        ss.append(toAdd)\\n\\n    res = [0] * t\\n\\n    for s in ss:\\n        nextRes = [0] * t\\n        for j in range(t):\\n            for v in s:\\n                nextRes[(v + res[j]) % t] = max(res[j] + v, nextRes[(v + res[j]) % t])\\n        res = nextRes\\n\\n    return res[0]\\n\\ntests = 1\\n\\nfor t in range(tests):\\n    n = readint()\\n    m = readint()\\n    k = readint()\\n    a = []\\n    for i in range(n):\\n        r = []\\n        for j in range(m):\\n            r.append(readint())\\n        a.append(r)\\n    print(solve(n, m, k, a))\\n\", \"n,m,k = list(map(int, input().split()))\\nA  = [list(map(int, input().split())) for _ in range(n)]\\n\\ndp1 = []\\nfor i in range(n):\\n    B = A[i]\\n    temp = [[-1]*(k) for _ in range(m//2+1)]\\n    temp[0][0] = 0\\n    for b in B:\\n        for l in reversed(list(range(m//2))):\\n            for j in range(k):\\n                if temp[l][j] != -1:\\n                    temp[l+1][(b+j)%k] = max(temp[l+1][(b+j)%k], temp[l][j]+b)\\n    temp2 = [-1]*k\\n    for j in range(k):\\n        for l in range(m//2+1):\\n            temp2[j] = max(temp2[j], temp[l][j])\\n    dp1.append(temp2)\\n#print(dp1)\\ndp2 = [[-1]*k for i in range(n+1)]\\ndp2[0][0] = 0\\nfor i in range(n):\\n    for j in range(k):\\n        dp2[i+1][j] =dp2[i][j]\\n    for j in range(k):\\n        if dp1[i][j] == -1:\\n            continue\\n        for l in range(k):\\n            if dp2[i][l] == -1:\\n                continue\\n            dp2[i+1][(j+l)%k] = max(dp2[i+1][(j+l)%k], dp2[i][l]+dp1[i][j])\\nans = dp2[n][0]\\nprint(max(ans, 0))\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\",\n    \"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\",\n    \"1 1 2\\n1\\n\",\n    \"1 1 2\\n70\\n\",\n    \"1 2 3\\n3 2\\n\",\n    \"1 2 3\\n3 3\\n\",\n    \"2 1 2\\n1\\n1\\n\",\n    \"2 1 3\\n69\\n69\\n\",\n    \"4 2 49\\n16 42\\n58 37\\n2 17\\n40 61\\n\",\n    \"2 2 5\\n1 3\\n3 1\\n\",\n    \"2 2 8\\n7 7\\n7 7\\n\",\n    \"5 2 5\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\",\n    \"3 3 70\\n1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"2 2 3\\n1 7\\n1 7\\n\",\n    \"1 2 4\\n70 1\\n\",\n    \"2 2 3\\n2 2\\n2 2\\n\",\n    \"2 2 5\\n1 6\\n6 6\\n\",\n    \"1 2 3\\n10 10\\n\",\n    \"1 2 2\\n3 3\\n\",\n    \"3 4 19\\n10 10 1 1\\n10 10 1 1\\n10 10 1 1\\n\",\n    \"3 4 7\\n51 2 6 7\\n52 62 65 5\\n6 6 62 62\\n\",\n    \"3 3 2\\n1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"1 2 10\\n17 3\\n\",\n    \"2 2 3\\n3 1\\n70 1\\n\",\n    \"2 2 5\\n4 4\\n4 4\\n\",\n    \"3 2 2\\n5 5\\n5 5\\n5 5\\n\",\n    \"1 3 3\\n4 4 4\\n\",\n    \"10 6 55\\n15 17 49 38 7 61\\n60 22 27 46 21 65\\n33 51 2 33 36 69\\n14 54 24 36 51 9\\n36 61 38 38 46 64\\n51 20 38 4 19 2\\n47 34 65 43 56 65\\n5 39 31 59 27 9\\n17 47 13 33 57 51\\n48 22 53 69 28 68\\n\",\n    \"5 3 3\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n\",\n    \"3 3 6\\n4 6 4\\n2 7 1\\n2 2 2\\n\",\n    \"4 2 46\\n1 56\\n6 46\\n12 28\\n69 42\\n\",\n    \"3 4 10\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n\",\n    \"3 3 10\\n4 1 1\\n4 1 1\\n4 1 1\\n\",\n    \"2 2 4\\n3 3\\n3 3\\n\",\n    \"2 2 4\\n1 5\\n1 6\\n\",\n    \"2 2 4\\n5 5\\n5 5\\n\",\n    \"3 2 10\\n55 1\\n1 1\\n1 1\\n\",\n    \"1 3 3\\n8 8 8\\n\",\n    \"2 2 2\\n1 3\\n1 4\\n\",\n    \"2 2 4\\n1 9\\n1 5\\n\",\n    \"2 2 5\\n3 3\\n3 3\\n\",\n    \"1 4 5\\n2 3 11 13\\n\",\n    \"4 2 6\\n10 9\\n10 9\\n10 5\\n10 5\\n\",\n    \"1 2 50\\n51 51\\n\",\n    \"3 2 47\\n1 14\\n66 37\\n30 12\\n\",\n    \"2 8 35\\n41 60 45 69 29 13 35 36\\n6 42 28 22 2 56 43 68\\n\",\n    \"7 2 9\\n6 9\\n3 6\\n10 5\\n5 10\\n5 2\\n4 3\\n8 4\\n\",\n    \"4 2 21\\n10 26\\n2 46\\n68 57\\n22 61\\n\",\n    \"3 3 8\\n70 69 62\\n70 70 70\\n70 70 70\\n\",\n    \"4 4 2\\n8 8 8 8\\n8 8 8 8\\n8 8 8 8\\n8 7 2 2\\n\",\n    \"9 6 26\\n9 37 42 47 27 70\\n30 22 30 58 45 70\\n25 44 7 22 14 64\\n66 13 33 3 23 5\\n44 60 53 37 8 24\\n24 13 14 25 9 26\\n12 27 68 6 16 51\\n32 65 65 32 47 4\\n69 28 9 58 63 16\\n\",\n    \"3 4 7\\n45 65 18 5\\n54 54 9 7\\n47 6 56 4\\n\",\n    \"2 2 32\\n23 17\\n22 7\\n\",\n    \"3 2 6\\n1 1\\n9 6\\n4 7\\n\",\n    \"8 6 4\\n46 41 41 66 50 42\\n57 28 52 58 69 41\\n33 42 33 33 41 64\\n60 49 3 47 14 26\\n55 53 36 29 13 14\\n63 21 25 21 5 36\\n62 23 56 34 20 42\\n70 19 26 10 17 62\\n\",\n    \"8 2 67\\n50 9\\n21 34\\n62 66\\n54 24\\n31 62\\n47 17\\n56 61\\n21 44\\n\",\n    \"3 4 3\\n1 1 3 4\\n5 2 2 2\\n7 1 1 4\\n\",\n    \"2 2 5\\n5 5\\n7 7\\n\",\n    \"5 4 64\\n13 14 62 35\\n32 6 30 13\\n39 16 62 39\\n18 58 12 43\\n32 45 11 50\\n\",\n    \"2 2 7\\n65 58\\n4 3\\n\",\n    \"2 3 2\\n9 3 8\\n4 2 3\\n\",\n    \"15 2 53\\n57 55\\n3 69\\n22 31\\n57 7\\n12 39\\n47 21\\n64 10\\n65 24\\n3 68\\n8 14\\n58 49\\n59 30\\n9 43\\n62 43\\n2 32\\n\",\n    \"1 4 6\\n5 3 2 2\\n\",\n    \"1 8 20\\n15 59 35 23 21 33 30 5\\n\",\n    \"3 4 9\\n8 8 8 8\\n8 8 8 8\\n8 8 8 8\\n\",\n    \"2 2 3\\n5 20\\n3 5\\n\",\n    \"1 10 35\\n6 1 17 23 66 25 49 51 34 39\\n\",\n    \"14 7 19\\n7 2 57 50 36 70 11\\n34 33 25 27 16 28 46\\n48 15 67 9 18 35 4\\n58 34 31 43 66 9 16\\n38 56 36 3 17 10 7\\n61 38 47 11 28 26 41\\n38 5 9 6 51 64 57\\n40 39 41 20 56 60 68\\n49 30 8 69 35 12 17\\n41 37 17 46 55 55 53\\n18 15 50 14 9 40 20\\n9 1 21 64 44 33 43\\n62 30 43 14 13 22 58\\n39 46 65 52 36 41 68\\n\",\n    \"1 6 5\\n70 70 62 61 1 1\\n\",\n    \"3 3 5\\n2 2 2\\n2 2 2\\n2 2 2\\n\",\n    \"6 2 5\\n56 46\\n30 2\\n22 46\\n16 11\\n64 10\\n61 70\\n\",\n    \"3 3 11\\n4 4 4\\n4 4 4\\n4 4 4\\n\",\n    \"2 2 3\\n13 3\\n1 3\\n\",\n    \"3 3 7\\n1 5 5\\n7 5 5\\n6 5 5\\n\",\n    \"3 4 4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\",\n    \"7 3 70\\n21 51 35\\n38 68 26\\n48 61 10\\n2 60 24\\n34 10 8\\n16 26 1\\n7 68 59\\n\",\n    \"3 3 69\\n70 70 70\\n70 70 70\\n70 70 70\\n\",\n    \"2 2 2\\n4 2\\n3 15\\n\",\n    \"2 2 7\\n66 24\\n50 31\\n\",\n    \"8 2 3\\n51 22\\n4 9\\n25 36\\n14 62\\n58 9\\n61 1\\n35 18\\n2 43\\n\",\n    \"5 3 61\\n7 68 7\\n59 14 55\\n16 12 18\\n53 68 56\\n59 6 68\\n\",\n    \"2 2 8\\n6 16\\n14 49\\n\",\n    \"5 3 6\\n37 47 52\\n46 68 25\\n13 68 43\\n63 59 34\\n5 62 37\\n\",\n    \"7 5 4\\n69 60 32 53 64\\n17 66 70 63 27\\n18 67 48 62 2\\n49 35 43 45 62\\n43 23 64 31 16\\n18 39 27 69 65\\n20 55 42 46 35\\n\",\n    \"2 8 9\\n18 35 56 37 4 7 32 64\\n48 63 22 70 11 24 5 61\\n\",\n    \"6 2 33\\n55 58\\n27 22\\n3 54\\n6 53\\n50 50\\n31 21\\n\",\n    \"7 3 10\\n19 1 70\\n54 58 18\\n53 7 20\\n21 5 27\\n23 47 16\\n26 52 25\\n34 10 1\\n\",\n    \"5 2 43\\n33 61\\n39 3\\n10 61\\n10 66\\n50 66\\n\",\n    \"1 3 9\\n52 10 59\\n\",\n    \"2 5 10\\n21 2 34 64 60\\n28 19 16 5 69\\n\",\n    \"5 8 6\\n28 20 8 15 65 21 44 24\\n12 64 36 12 8 48 32 41\\n53 36 58 27 61 17 49 69\\n61 54 5 47 52 66 9 2\\n27 17 44 28 49 6 59 27\\n\",\n    \"3 2 50\\n30 30\\n30 30\\n30 30\\n\",\n    \"4 4 3\\n7 7 7 7\\n7 7 7 7\\n7 7 7 7\\n7 7 7 7\\n\",\n    \"6 2 5\\n36 13\\n46 26\\n31 14\\n60 66\\n15 27\\n56 44\\n\",\n    \"3 3 7\\n1 7 5\\n1 5 5\\n1 5 5\\n\",\n    \"5 7 7\\n7 9 50 67 24 45 13\\n40 47 33 12 58 14 8\\n19 62 63 44 40 3 14\\n24 57 20 7 44 27 26\\n65 13 27 62 15 48 35\\n\",\n    \"3 2 10\\n20 67\\n27 11\\n30 18\\n\",\n    \"3 4 19\\n1 8 1 1\\n1 2 1 1\\n1 1 1 1\\n\",\n    \"2 2 5\\n1 5\\n1 7\\n\",\n    \"8 7 4\\n26 60 44 6 15 23 65\\n38 68 60 40 18 28 63\\n52 69 30 31 43 44 30\\n34 49 49 49 18 6 63\\n64 47 1 37 42 17 38\\n9 59 9 57 64 69 28\\n50 28 7 23 62 6 63\\n51 62 24 51 62 53 21\\n\",\n    \"9 2 16\\n66 36\\n57 14\\n46 32\\n69 17\\n8 42\\n4 14\\n20 70\\n34 69\\n37 52\\n\",\n    \"3 7 8\\n7 67 56 16 53 13 42\\n8 57 16 6 23 62 66\\n20 41 17 46 63 41 24\\n\",\n    \"4 2 10\\n27 12\\n47 15\\n17 29\\n58 48\\n\",\n    \"4 2 23\\n23 5\\n5 5\\n5 5\\n5 5\\n\",\n    \"2 2 5\\n3 4\\n3 4\\n\",\n    \"3 2 7\\n33 47\\n49 22\\n32 20\\n\",\n    \"7 2 5\\n54 6\\n61 13\\n31 69\\n4 53\\n52 40\\n65 26\\n22 32\\n\",\n    \"8 2 21\\n16 50\\n2 65\\n20 9\\n59 5\\n68 23\\n28 20\\n8 57\\n56 62\\n\",\n    \"6 2 5\\n62 17\\n28 4\\n37 1\\n32 67\\n66 47\\n16 28\\n\",\n    \"3 3 8\\n2 5 1\\n1 7 1\\n2 2 3\\n\",\n    \"5 2 25\\n18 34\\n33 23\\n3 63\\n59 46\\n15 68\\n\",\n    \"3 4 10\\n3 3 3 3\\n3 6 8 5\\n3 8 8 5\\n\",\n    \"9 2 24\\n29 23\\n62 24\\n58 59\\n57 17\\n66 40\\n70 2\\n7 6\\n41 35\\n16 9\\n\",\n    \"3 2 10\\n29 16\\n65 23\\n11 28\\n\",\n    \"8 2 3\\n2 50\\n59 33\\n7 16\\n29 55\\n45 27\\n8 10\\n52 11\\n41 19\\n\",\n    \"3 3 26\\n6 58 63\\n37 41 14\\n33 37 65\\n\",\n    \"1 4 8\\n6 48 31 55\\n\",\n    \"10 20 69\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n\",\n    \"4 2 35\\n44 49\\n29 35\\n5 17\\n59 2\\n\",\n    \"4 3 6\\n27 35 30\\n9 11 55\\n39 65 57\\n22 64 41\\n\",\n    \"3 4 3\\n1 1 4 4\\n8 5 4 1\\n7 1 1 4\\n\",\n    \"38 2 53\\n66 44\\n25 14\\n54 48\\n22 54\\n50 36\\n23 49\\n13 26\\n48 26\\n13 57\\n54 29\\n26 32\\n47 36\\n31 29\\n63 66\\n53 19\\n32 3\\n33 53\\n16 30\\n66 52\\n25 11\\n1 45\\n38 15\\n59 7\\n31 37\\n37 46\\n23 1\\n10 8\\n49 69\\n32 26\\n21 26\\n11 61\\n65 5\\n42 24\\n53 53\\n28 48\\n1 50\\n4 54\\n70 25\\n\",\n    \"1 2 7\\n44 25\\n\",\n    \"3 5 3\\n63 37 25 28 56\\n58 40 25 56 64\\n15 34 60 28 55\\n\",\n    \"1 9 3\\n28 11 24 56 62 35 30 31 28\\n\",\n    \"5 5 3\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n\",\n    \"7 2 8\\n2 17\\n9 69\\n15 33\\n59 53\\n61 61\\n70 62\\n28 62\\n\",\n    \"3 2 9\\n12 49\\n61 61\\n19 33\\n\",\n    \"2 7 1\\n2 35 41 36 1 1 57\\n22 9 49 2 31 3 7\\n\",\n    \"1 2 5\\n1 2\\n\",\n    \"3 3 5\\n21 13 68\\n62 3 17\\n54 6 2\\n\",\n    \"3 3 10\\n3 6 9\\n8 20 20\\n13 13 13\\n\",\n    \"3 3 8\\n1 5 2\\n1 7 2\\n2 2 2\\n\",\n    \"3 2 8\\n12 43\\n51 23\\n5 47\\n\",\n    \"2 4 64\\n53 52 43 56\\n2 57 34 23\\n\",\n    \"2 2 5\\n11 5\\n11 5\\n\",\n    \"1 4 9\\n8 8 8 8\\n\",\n    \"1 23 56\\n10 57 50 46 56 4 64 35 47 43 33 51 18 45 55 4 5 61 59 57 21 53 44\\n\",\n    \"3 2 13\\n1 1\\n13 1\\n1 1\\n\",\n    \"6 2 7\\n9 17\\n4 64\\n6 59\\n10 14\\n33 64\\n50 30\\n\",\n    \"8 2 4\\n64 22\\n11 25\\n67 29\\n22 53\\n22 59\\n68 38\\n63 31\\n19 68\\n\",\n    \"3 4 3\\n6 5 6 8\\n1 4 1 9\\n3 3 7 4\\n\",\n    \"6 2 10\\n68 22\\n40 67\\n59 52\\n39 43\\n10 44\\n65 2\\n\",\n    \"3 4 3\\n7 7 7 7\\n7 7 7 7\\n3 3 3 3\\n\",\n    \"2 5 11\\n30 65 26 33 59\\n7 52 3 1 21\\n\",\n    \"3 8 7\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n\",\n    \"5 4 8\\n14 62 30 14\\n11 62 5 29\\n51 62 9 41\\n47 49 38 21\\n26 22 70 64\\n\",\n    \"3 7 29\\n14 1 55 65 57 19 53\\n41 20 10 5 39 37 49\\n62 70 48 3 22 27 38\\n\",\n    \"2 2 9\\n50 36\\n61 44\\n\",\n    \"2 2 8\\n35 69\\n49 54\\n\",\n    \"3 3 69\\n56 51 68\\n68 4 66\\n11 58 58\\n\",\n    \"1 4 4\\n49 44 14 18\\n\",\n    \"3 3 67\\n1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"3 2 5\\n2 2\\n2 2\\n2 2\\n\",\n    \"5 4 6\\n13 38 59 26\\n28 62 36 14\\n45 57 20 70\\n31 10 51 42\\n20 34 9 32\\n\",\n    \"7 2 8\\n8 20\\n55 10\\n50 38\\n28 10\\n47 61\\n16 49\\n12 4\\n\",\n    \"1 6 7\\n7 13 13 13 13 13\\n\",\n    \"5 3 9\\n39 7 12\\n3 35 13\\n64 22 34\\n7 29 23\\n21 61 28\\n\",\n    \"2 2 10\\n1 1\\n1 1\\n\",\n    \"3 3 7\\n5 5 5\\n5 5 5\\n5 5 5\\n\",\n    \"5 5 13\\n15 15 15 15 15\\n15 15 15 15 15\\n15 15 15 15 15\\n15 15 15 15 15\\n15 15 15 15 15\\n\",\n    \"2 7 31\\n23 26 57 15 39 9 48\\n48 48 15 70 59 62 63\\n\",\n    \"6 2 9\\n68 17\\n56 66\\n28 38\\n51 11\\n39 47\\n66 57\\n\",\n    \"6 2 28\\n16 3\\n18 43\\n55 45\\n1 61\\n53 9\\n46 26\\n\",\n    \"2 7 68\\n12 13 47 6 19 32 46\\n36 65 25 68 18 50 10\\n\",\n    \"2 2 6\\n64 22\\n31 42\\n\",\n    \"8 9 5\\n9 68 60 18 64 32 3 23 17\\n65 29 38 2 20 54 3 67 35\\n67 34 24 2 35 35 1 13 19\\n9 17 1 14 34 33 24 13 14\\n19 12 13 49 6 53 59 42 16\\n52 24 25 22 40 62 18 42 8\\n27 16 32 46 49 10 3 12 27\\n17 10 16 51 37 19 64 54 8\\n\",\n    \"2 2 8\\n39 59\\n24 35\\n\",\n    \"7 2 7\\n9 7\\n50 2\\n47 51\\n17 68\\n70 58\\n43 19\\n48 24\\n\",\n    \"4 6 51\\n3 8 6 2 1 3\\n7 6 6 1 6 7\\n3 1 4 1 4 1\\n10 7 6 8 3 1\\n\",\n    \"5 2 8\\n16 38\\n28 61\\n40 10\\n48 26\\n24 49\\n\",\n    \"2 3 10\\n62 32 25\\n31 39 70\\n\",\n    \"2 2 52\\n50 15\\n26 57\\n\",\n    \"2 2 8\\n18 39\\n59 60\\n\",\n    \"4 3 70\\n58 20 41\\n9 18 67\\n13 46 53\\n24 51 9\\n\",\n    \"6 2 10\\n65 64\\n70 2\\n60 43\\n58 27\\n29 46\\n60 17\\n\",\n    \"2 2 8\\n26 30\\n13 23\\n\",\n    \"2 3 7\\n62 14 10\\n38 24 19\\n\",\n    \"2 2 4\\n1 1\\n1 2\\n\",\n    \"2 2 10\\n2 2\\n2 2\\n\",\n    \"2 3 7\\n51 13 19\\n8 35 25\\n\",\n    \"5 2 3\\n39 2\\n29 25\\n64 21\\n40 61\\n67 43\\n\",\n    \"2 2 7\\n3 4\\n5 2\\n\",\n    \"2 3 6\\n1 68 22\\n19 33 12\\n\",\n    \"1 10 9\\n20 10 8 9 5 55 42 31 18 5\\n\",\n    \"2 3 10\\n64 56 64\\n69 32 17\\n\",\n    \"7 2 9\\n27 16\\n40 36\\n18 38\\n48 17\\n20 62\\n37 49\\n14 23\\n\",\n    \"2 2 3\\n1 1\\n1 5\\n\",\n    \"1 7 4\\n59 51 50 65 59 51 9\\n\",\n    \"2 2 4\\n2 3\\n3 3\\n\",\n    \"2 2 3\\n1 4\\n1 4\\n\",\n    \"2 2 3\\n1 1\\n1 1\\n\",\n    \"3 3 8\\n34 36 28\\n26 56 48\\n9 43 21\\n\",\n    \"7 2 8\\n10 18\\n30 59\\n68 15\\n55 2\\n4 3\\n45 18\\n70 36\\n\",\n    \"4 2 10\\n20 67\\n12 28\\n26 38\\n46 1\\n\",\n    \"2 2 9\\n15 15\\n10 69\\n\",\n    \"8 3 7\\n7 26 27\\n46 16 23\\n11 36 65\\n37 43 19\\n16 26 59\\n35 39 45\\n13 12 31\\n16 57 57\\n\",\n    \"4 10 2\\n38 37 6 28 18 34 46 20 40 44\\n43 59 49 11 59 19 70 64 18 25\\n45 4 24 46 49 21 7 15 56 28\\n22 56 37 40 37 13 32 25 57 31\\n\",\n    \"3 2 3\\n1 5\\n1 9\\n1 9\\n\",\n    \"4 2 18\\n17 52\\n51 52\\n57 14\\n60 58\\n\",\n    \"8 2 10\\n31 39\\n40 28\\n41 5\\n28 18\\n16 14\\n26 57\\n23 1\\n61 50\\n\",\n    \"7 2 18\\n42 70\\n22 6\\n41 59\\n20 20\\n41 56\\n1 60\\n29 30\\n\",\n    \"2 2 5\\n1 1\\n1 1\\n\",\n    \"7 2 6\\n40 6\\n8 25\\n13 54\\n55 67\\n33 41\\n3 33\\n67 33\\n\",\n    \"2 2 63\\n20 24\\n5 35\\n\",\n    \"1 4 15\\n14 15 17 17\\n\",\n    \"2 4 40\\n14 6 8 11\\n23 7 25 5\\n\",\n    \"9 5 35\\n3 6 7 8 6\\n8 1 6 6 3\\n6 8 6 3 7\\n2 8 10 7 2\\n5 5 7 6 6\\n2 5 4 9 7\\n8 4 1 2 3\\n1 3 7 7 7\\n8 4 1 2 9\\n\",\n    \"1 9 59\\n69 25 67 62 37 15 67 47 34\\n\",\n    \"2 2 9\\n1 5\\n1 7\\n\",\n    \"2 2 60\\n1 1\\n1 1\\n\",\n    \"6 3 11\\n9 64 44\\n46 44 66\\n10 14 68\\n13 52 19\\n40 21 21\\n6 33 39\\n\",\n    \"9 2 37\\n30 37\\n12 68\\n12 2\\n11 7\\n1 27\\n54 6\\n26 43\\n30 43\\n65 2\\n\",\n    \"4 2 68\\n44 34\\n47 65\\n20 57\\n57 26\\n\",\n    \"7 2 45\\n26 54\\n45 66\\n65 8\\n17 66\\n60 32\\n63 21\\n2 17\\n\",\n    \"3 3 19\\n11 18 1\\n13 8 8\\n3 9 3\\n\",\n    \"10 3 59\\n27 52 15\\n30 40 40\\n41 59 69\\n22 48 66\\n25 53 5\\n8 47 34\\n4 49 18\\n42 37 64\\n31 11 38\\n15 34 24\\n\",\n    \"4 2 35\\n17 59\\n29 47\\n64 30\\n33 25\\n\",\n    \"5 6 38\\n6 13 48 59 20 17\\n35 49 44 64 63 2\\n63 4 66 5 66 32\\n43 68 53 70 64 59\\n65 56 5 27 58 9\\n\",\n    \"9 2 65\\n34 30\\n3 45\\n13 54\\n22 53\\n12 23\\n40 47\\n9 22\\n23 41\\n58 26\\n\",\n    \"2 2 17\\n21 4\\n35 28\\n\",\n    \"5 2 52\\n15 18\\n17 23\\n29 46\\n58 58\\n48 25\\n\",\n    \"6 2 64\\n62 23\\n7 59\\n55 23\\n66 27\\n65 5\\n67 55\\n\",\n    \"2 2 11\\n6 7\\n1 2\\n\",\n    \"2 3 4\\n1 1 1\\n1 1 1\\n\",\n    \"2 2 5\\n4 3\\n9 8\\n\",\n    \"2 6 44\\n68 69 61 6 3 56\\n2 45 15 59 58 41\\n\",\n    \"2 6 23\\n57 6 52 22 10 5\\n56 67 53 20 47 5\\n\",\n    \"5 2 57\\n28 68\\n54 37\\n39 27\\n3 29\\n70 70\\n\",\n    \"3 3 61\\n42 25 5\\n12 68 10\\n19 2 50\\n\",\n    \"7 1 39\\n59\\n4\\n20\\n27\\n3\\n52\\n60\\n\",\n    \"6 2 56\\n32 32\\n63 50\\n24 49\\n53 37\\n15 51\\n40 9\\n\",\n    \"4 2 62\\n19 1\\n55 8\\n53 20\\n26 15\\n\",\n    \"3 2 33\\n8 7\\n50 13\\n26 30\\n\",\n    \"1 6 60\\n32 40 47 29 60 38\\n\",\n    \"3 2 11\\n13 62\\n9 53\\n19 47\\n\",\n    \"1 5 38\\n21 43 43 67 29\\n\",\n    \"3 3 49\\n9 8 64\\n36 5 29\\n11 23 63\\n\",\n    \"2 2 3\\n3 10\\n3 10\\n\",\n    \"5 1 34\\n24\\n6\\n36\\n55\\n42\\n\",\n    \"10 20 69\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\n\"\n  ],\n  \"outputs\": [\n    \"24\\n\",\n    \"56\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"98\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"308\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"1540\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"46\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"15\\n\",\n    \"30\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"385\\n\",\n    \"45\\n\",\n    \"105\\n\",\n    \"0\\n\",\n    \"58\\n\",\n    \"1300\\n\",\n    \"294\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"1228\\n\",\n    \"335\\n\",\n    \"21\\n\",\n    \"5\\n\",\n    \"384\\n\",\n    \"0\\n\",\n    \"12\\n\",\n    \"742\\n\",\n    \"0\\n\",\n    \"120\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"175\\n\",\n    \"2147\\n\",\n    \"140\\n\",\n    \"0\\n\",\n    \"245\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"14\\n\",\n    \"4\\n\",\n    \"280\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"339\\n\",\n    \"244\\n\",\n    \"16\\n\",\n    \"294\\n\",\n    \"848\\n\",\n    \"405\\n\",\n    \"165\\n\",\n    \"310\\n\",\n    \"172\\n\",\n    \"0\\n\",\n    \"170\\n\",\n    \"996\\n\",\n    \"0\\n\",\n    \"42\\n\",\n    \"250\\n\",\n    \"7\\n\",\n    \"763\\n\",\n    \"50\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"1380\\n\",\n    \"432\\n\",\n    \"480\\n\",\n    \"100\\n\",\n    \"23\\n\",\n    \"0\\n\",\n    \"49\\n\",\n    \"335\\n\",\n    \"336\\n\",\n    \"260\\n\",\n    \"8\\n\",\n    \"200\\n\",\n    \"30\\n\",\n    \"384\\n\",\n    \"80\\n\",\n    \"318\\n\",\n    \"104\\n\",\n    \"48\\n\",\n    \"483\\n\",\n    \"105\\n\",\n    \"180\\n\",\n    \"27\\n\",\n    \"1696\\n\",\n    \"0\\n\",\n    \"354\\n\",\n    \"183\\n\",\n    \"18\\n\",\n    \"336\\n\",\n    \"45\\n\",\n    \"236\\n\",\n    \"0\\n\",\n    \"130\\n\",\n    \"30\\n\",\n    \"8\\n\",\n    \"56\\n\",\n    \"128\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"560\\n\",\n    \"13\\n\",\n    \"231\\n\",\n    \"436\\n\",\n    \"36\\n\",\n    \"300\\n\",\n    \"27\\n\",\n    \"176\\n\",\n    \"7\\n\",\n    \"496\\n\",\n    \"464\\n\",\n    \"36\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"44\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"462\\n\",\n    \"224\\n\",\n    \"7\\n\",\n    \"198\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"310\\n\",\n    \"288\\n\",\n    \"196\\n\",\n    \"204\\n\",\n    \"42\\n\",\n    \"1480\\n\",\n    \"24\\n\",\n    \"315\\n\",\n    \"51\\n\",\n    \"192\\n\",\n    \"70\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"140\\n\",\n    \"310\\n\",\n    \"0\\n\",\n    \"14\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"35\\n\",\n    \"231\\n\",\n    \"0\\n\",\n    \"12\\n\",\n    \"153\\n\",\n    \"0\\n\",\n    \"252\\n\",\n    \"6\\n\",\n    \"168\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"56\\n\",\n    \"288\\n\",\n    \"120\\n\",\n    \"0\\n\",\n    \"357\\n\",\n    \"954\\n\",\n    \"18\\n\",\n    \"162\\n\",\n    \"280\\n\",\n    \"288\\n\",\n    \"0\\n\",\n    \"294\\n\",\n    \"0\\n\",\n    \"15\\n\",\n    \"40\\n\",\n    \"105\\n\",\n    \"118\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"275\\n\",\n    \"333\\n\",\n    \"0\\n\",\n    \"270\\n\",\n    \"19\\n\",\n    \"472\\n\",\n    \"0\\n\",\n    \"874\\n\",\n    \"325\\n\",\n    \"0\\n\",\n    \"104\\n\",\n    \"256\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"308\\n\",\n    \"276\\n\",\n    \"57\\n\",\n    \"61\\n\",\n    \"0\\n\",\n    \"224\\n\",\n    \"124\\n\",\n    \"33\\n\",\n    \"60\\n\",\n    \"66\\n\",\n    \"0\\n\",\n    \"49\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"552\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1433/F", "starter_code": ""}
{"id": 4003, "question": "The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\n\nYou are given a sequence $a$ consisting of $n$ integers.\n\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n\nFor example, for the sequence $[1, 2, 4, 3, 2]$ the answer is $4$ (you take $1$ and the sequence becomes $[2, 4, 3, 2]$, then you take the rightmost element $2$ and the sequence becomes $[2, 4, 3]$, then you take $3$ and the sequence becomes $[2, 4]$ and then you take $4$ and the sequence becomes $[2]$, the obtained increasing sequence is $[1, 2, 3, 4]$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nIn the first line of the output print $k$ \u2014 the maximum number of elements in a strictly increasing sequence you can obtain.\n\nIn the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n5\n1 2 4 3 2\n\nOutput\n4\nLRRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLRLRRR\n\nInput\n3\n2 2 2\n\nOutput\n1\nR\n\nInput\n4\n1 2 4 3\n\nOutput\n4\nLLRR\n\n\n\n-----Note-----\n\nThe first example is described in the problem statement.", "solutions": "[\"# AC\\nimport sys\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = sys.stdin.readline().split()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def solve(self):\\n        n = self.next_int()\\n        x = [self.next_int() for _ in range(0, n)]\\n        d = 0\\n        l = 0\\n        r = n - 1\\n        rs = []\\n        while l <= r:\\n            if x[l] <= d and x[r] <= d:\\n                break\\n            if x[l] <= d:\\n                rs.append('R')\\n                d = x[r]\\n                r -= 1\\n            elif x[r] <= d:\\n                rs.append('L')\\n                d = x[l]\\n                l += 1\\n            elif x[r] < x[l] or l == r:\\n                rs.append('R')\\n                d = x[r]\\n                r -= 1\\n            elif x[l] < x[r]:\\n                rs.append('L')\\n                d = x[l]\\n                l += 1\\n            else:\\n                ll = l + 1\\n                while x[ll] > x[ll - 1]:\\n                    ll += 1\\n                rr = r - 1\\n                while x[rr] > x[rr + 1]:\\n                    rr -= 1\\n                if ll - l > r - rr:\\n                    rs.append('L')\\n                    d = x[l]\\n                    l += 1\\n                else:\\n                    rs.append('R')\\n                    d = x[r]\\n                    r -= 1\\n        print(len(rs))\\n        print(''.join(rs))\\n\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\", \"from collections import deque\\nn = int(input())\\nA = list(map(int, input().split()))\\nA = deque(A)\\nans = ''\\nlast = 0\\nwhile len(A) and (A[0] > last or A[-1] > last):\\n    if len(A) == 1:\\n        ans += 'R'\\n        break\\n    if A[0] > last and A[-1] > last:\\n        if A[0] < A[-1]:\\n            last = A[0]\\n            A.popleft()\\n            ans += 'L'\\n        elif A[-1] < A[0]:\\n            last = A[-1]\\n            A.pop()\\n            ans += 'R'\\n        else:\\n            lal = last\\n            cnt1 = -1\\n            for i in A:\\n                cnt1 += 1\\n                if i > lal:\\n                    lal = i\\n                else:\\n                    break\\n            lol = last\\n            cnt2 = -1\\n            for i in range(len(A) - 1, -1, -1):\\n                cnt2 += 1\\n                if A[i] > lol:\\n                    lol = A[i]\\n                else:\\n                    break\\n            if cnt1 > cnt2:\\n                ans += 'L' * cnt1\\n            else:\\n                ans += 'R' * cnt2\\n            break\\n    else:\\n        if A[0] > last:\\n            last = A[0]\\n            A.popleft()\\n            ans += 'L'\\n        else:\\n            last = A[-1]\\n            A.pop()\\n            ans += 'R'\\nprint(len(ans))\\nprint(ans)\\n\", \"from collections import deque\\n\\ndef solve(A):\\n    res = []\\n    last = 0\\n    while A:\\n        if max(A[0],A[-1]) <= last:\\n            return res\\n\\n        if A[0] == A[-1]:\\n            v = A[0]-1\\n            for i,a in enumerate(A):\\n                if v < a:\\n                    v = a\\n                else:\\n                    break\\n            else:\\n                i += 1\\n            L = i\\n            v = A[-1]-1\\n            for i,a in enumerate(reversed(A)):\\n                if v < a:\\n                    v = a\\n                else:\\n                    break\\n            else:\\n                i += 1\\n            R = i\\n            _,op = max((L, ['L']*L), (R, ['R']*R))\\n            res.extend(op)\\n            return res\\n        \\n        v, op = min((v, op) for v,op in ((A[0], 'L'), (A[-1], 'R')) if v > last)\\n        last = v\\n        res.append(op)\\n        if op == 'L':\\n            A.popleft()\\n        else:\\n            A.pop()\\n\\n\\ndef main():\\n    input()\\n    A = deque(map(int,input().split()))\\n\\n    res = solve(A)\\n    print(len(res))\\n    print(*res, sep='')\\n\\n\\nmain()\", \"n = int(input())\\nl = [*map(int, input().split())]\\nprev = 0\\nres = []\\nwhile l:\\n    if l[0] == l[-1]:\\n        if prev >= l[0]: break\\n        if len(l) <= 2:\\n            res.append('L')\\n            break\\n        c0, c1 = [], []\\n        p = prev\\n        for e in l:\\n            if p < e:\\n                c0.append('L')\\n                p = e\\n            else: break\\n        p = prev\\n        for e in l[::-1]:\\n            if p < e:\\n                c1.append('R')\\n                p = e\\n            else:\\n                break\\n        if len(c0) <= len(c1):\\n            res += c1\\n        else:\\n            res += c0\\n        break\\n    elif prev < l[0] and (l[0] < l[-1] or prev >= l[-1]):\\n        i = 0\\n        res.append('L')\\n    elif prev < l[-1]: \\n        i = -1\\n        res.append('R')\\n    else: break\\n    prev = l[i]\\n    del l[i]\\nprint(len(res))\\nprint(''.join(res))\", \"3\\n\\ndef check_l(a, l, r):\\n    d = 0\\n    last = 0\\n    while l <= r and a[l] > last:\\n        last = a[l]\\n        l += 1\\n        d += 1\\n    return d\\n\\ndef check_r(a, l, r):\\n    d = 0\\n    last = 0\\n    while l <= r and a[r] > last:\\n        last = a[r]\\n        r -= 1\\n        d += 1\\n    return d\\n\\ndef main():\\n    # skip N\\n    input()\\n    a = [int(x) for x in input().split(' ')]\\n    n = len(a)\\n\\n    l, r = 0, n - 1\\n    res = []\\n    \\n    last = 0\\n    picked = True\\n\\n    while l <= r and picked:\\n        picked = False\\n        if last < a[l] and last < a[r]:\\n            if a[l] < a[r]:\\n                last = a[l]\\n                res.append('L')\\n                l += 1\\n            elif a[l] == a[r]:\\n                dl = check_l(a, l, r)\\n                dr = check_r(a, l, r)\\n                \\n                if dl > dr:\\n                    res.extend(['L'] * dl)\\n                    last = a[l + dl - 1]\\n                    l += dl\\n                else:\\n                    res.extend(['R'] * dr)\\n                    last = a[r - dr + 1]\\n                    r -= dr\\n            else:\\n                last = a[r]\\n                res.append('R')\\n                r -= 1\\n            picked = True\\n            continue\\n        \\n        if last < a[l]:\\n            last = a[l]\\n            res.append('L')\\n            l += 1\\n            picked = True\\n            continue\\n        \\n        if last < a[r]:\\n            last = a[r]\\n            res.append('R')\\n            r -= 1\\n            picked = True\\n            continue\\n    \\n    print(len(res))\\n    print(\\\"\\\".join(res))\\n        \\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"n = int(input())\\nai = list(map(int,input().split()))\\nans = 0\\nans2 = \\\"\\\"\\nnum = 0\\nleft = 0\\nright = n-1\\nflag = 0\\nfor i in range(n):\\n    if ai[left] <= num:\\n        if ai[right] <= num:\\n            break\\n        num = ai[right]\\n        ans += 1\\n        right -= 1\\n        ans2 += \\\"R\\\"\\n        continue\\n        \\n    if ai[right] <= num:\\n        if ai[left] <= num:\\n            break\\n        num = ai[left]\\n        ans += 1\\n        left += 1\\n        ans2 += \\\"L\\\"\\n        continue\\n    if ai[left] > ai[right]:\\n        num = ai[right]\\n        ans += 1\\n        right -= 1\\n        ans2 += \\\"R\\\"\\n    elif ai[left] == ai[right]:\\n        if left == right:\\n            ans += 1\\n            ans2 += \\\"L\\\"\\n            break\\n        flag = 1\\n        break\\n    else:\\n        num = ai[left]\\n        ans += 1\\n        left += 1\\n        ans2 += \\\"L\\\"\\nif flag == 1:\\n    left2 = left\\n    temp = 0\\n    num2 = num\\n    while left2 < right:\\n        if ai[left2] > num2:\\n            temp += 1\\n            num2 = ai[left2]\\n        else:\\n            break\\n        left2 += 1\\n    temp2 = 0\\n    right2 = right\\n    num2 = num\\n    while right2 > left:\\n        if ai[right2] > num2:\\n            temp2 += 1\\n            num2 = ai[right2]\\n        else:\\n            break\\n        right2 -= 1\\n    if temp >= temp2:\\n        ans += temp\\n        ans2 += \\\"L\\\" * temp\\n    else:\\n        ans += temp2\\n        ans2 += \\\"R\\\" * temp2\\nprint(ans)\\nprint(ans2)\\n\", \"n=int(input())\\narr=list(map(int,input().split()))\\ni=0\\nj=n-1\\nans=''\\nprev=0\\nwhile(i<j):\\n\\tif(arr[i]<arr[j]):\\n\\t\\tif(arr[i]>prev):\\n\\t\\t\\tans+='L'\\n\\t\\t\\tprev=arr[i]\\n\\t\\t\\ti+=1\\n\\t\\telif(arr[j]>prev):\\n\\t\\t\\tans+='R'\\n\\t\\t\\tprev=arr[j]\\n\\t\\t\\tj-=1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telif(arr[i]>arr[j]):\\n\\t\\tif(arr[j]>prev):\\n\\t\\t\\tans+='R'\\n\\t\\t\\tprev=arr[j]\\n\\t\\t\\tj-=1\\n\\t\\telif(arr[i]>prev):\\n\\t\\t\\tans+='L'\\n\\t\\t\\tprev=arr[i]\\n\\t\\t\\ti+=1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\t#print(prev)\\n\\t\\tif(arr[i]<prev):\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tcount1=0\\n\\t\\t\\tcount2=0\\n\\t\\t\\ttemp=i\\n\\t\\t\\ttemprev=prev\\n\\t\\t\\twhile(temp<j):\\n\\t\\t\\t\\tif(arr[temp]>temprev):\\n\\t\\t\\t\\t\\ttemprev=arr[temp]\\n\\t\\t\\t\\t\\tcount1+=1\\n\\t\\t\\t\\t\\ttemp+=1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\ttemp=j\\n\\t\\t\\ttemprev2=prev\\n\\t\\t\\t#print(count1)\\n\\t\\t\\twhile(temp>i):\\n\\t\\t\\t\\t#print(arr[temp],prev)\\n\\t\\t\\t\\tif(arr[temp]>temprev2):\\n\\t\\t\\t\\t\\ttemprev2=arr[temp]\\n\\t\\t\\t\\t\\tcount2+=1\\n\\t\\t\\t\\t\\ttemp-=1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t#print(count1,count2)\\n\\t\\t\\tif(count1>=count2):\\n\\t\\t\\t\\tans+='L'*count1\\n\\t\\t\\t\\ti+=count1\\n\\t\\t\\t\\tprev=temprev\\n\\t\\t\\telif(count2>count1):\\n\\t\\t\\t\\tans+='R'*count2\\n\\t\\t\\t\\tj-=count2\\n\\t\\t\\t\\tprev=temprev2\\n\\t\\t\\tbreak\\n\\n\\t#print(ans)\\n\\t#print(i,j)\\nif(i==j and arr[i]>prev):\\n\\tans+='R'\\n\\tprev=arr[i]\\nprint(len(ans))\\nprint(ans)\\n\\n\", \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\\\"\\\"\\\"Codeforces Round #555 (Div. 3)\\n\\nProblem C. Increasing Subsequence\\n\\n:author:         Kitchen Tong\\n:mail:    kctong529@gmail.com\\n\\nPlease feel free to contact me if you have any question\\nregarding the implementation below.\\n\\\"\\\"\\\"\\n\\n__version__ = '1.0'\\n__date__ = '2019-04-26'\\n\\nimport sys\\n\\n\\ndef rec_solve(a, l, r, last):\\n    choices = []\\n    while l <= r:\\n        if a[l] == a[r] and a[l] > last:\\n            sub_ans_1 = rec_solve(a, l+1, r, a[l])\\n            sub_ans_2 = rec_solve(a, l, r-1, a[l])\\n            if len(sub_ans_1) > len(sub_ans_2):\\n                choices.append('L')\\n                choices += sub_ans_1\\n                return choices\\n            else:\\n                choices.append('R')\\n                choices += sub_ans_2\\n                return choices\\n        elif a[l] < a[r] and a[l] > last:\\n            last = a[l]\\n            choices.append('L')\\n            l += 1\\n        elif a[r] > last:\\n            last = a[r]\\n            choices.append('R')\\n            r -= 1\\n        elif a[l] > last:\\n            last = a[l]\\n            choices.append('L')\\n            l += 1\\n        else:\\n            return choices\\n    return choices\\n\\ndef solve(n, a):\\n    return rec_solve(a, 0, n-1, 0)\\n\\ndef main(argv=None):\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    choice = solve(n, a)\\n    print(len(choice))\\n    print(''.join(choice))\\n    return 0\\n\\ndef __starting_point():\\n    STATUS = main()\\n    return(STATUS)\\n\\n\\n__starting_point()\", \"\\nn = int(input())\\n\\narr = list(map(int,input().strip().split()))\\n\\nfl = 1\\n\\nans = \\\"\\\"\\nc = 0\\n\\nst = 0\\nen = n-1\\n\\nla = 0\\nfloop = 0\\nwhile fl:\\n    if st>=n or en<=-1:\\n        \\n        break\\n\\n    if arr[st]==arr[en]:\\n        floop =1\\n        break;\\n\\n    \\n    if arr[st] > la:\\n        if arr[en]>la:\\n            if arr[en] > arr[st]:\\n                st+=1\\n                la = arr[st-1]\\n                ans+=\\\"L\\\"\\n                c+=1\\n            else:\\n                en-=1\\n                la  = arr[en+1]\\n                ans+=\\\"R\\\"\\n                c+=1\\n        else:\\n            st+=1\\n            la = arr[st-1]\\n            ans+=\\\"L\\\"\\n            c+=1\\n    else:\\n        if arr[en]>la:\\n            en-=1\\n            la =arr[en+1]\\n            ans+=\\\"R\\\"\\n            c+=1\\n        else:\\n            break;\\n#print(floop)\\nif floop == 1:\\n    orig = la\\n    cm = 0\\n    s1 = \\\"\\\"\\n    for i in range(st,en+1):\\n        if arr[i]>la:\\n            la = arr[i]\\n            cm+=1\\n            s1+=\\\"L\\\"\\n        else:\\n            break;\\n    cn = 0\\n    s2 = \\\"\\\"\\n    la = orig\\n    for i in range(en,st-1,-1):\\n        if la < arr[i]:\\n            cn+=1\\n            s2+=\\\"R\\\"\\n            la = arr[i]\\n        else:\\n            break;\\n    if cn>cm:\\n        ans+=s2\\n    else:\\n        \\n        ans+=s1\\n    c+=max(cn,cm)\\n    ##print(s1,s2)\\n\\n    \\n    \\nprint(c)\\nprint(ans)\\n                \\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nlast = -1\\ni = 0\\nj = n - 1\\nans = ''\\nwhile i <= j:\\n    if max(a[i], a[j]) <= last:\\n        break\\n    if a[i] == a[j]:\\n        start = i\\n        k = 0\\n        last = a[i]\\n        i += 1\\n        while i <= j:\\n            if a[i] <= last:\\n                break\\n            else:\\n                last = a[i]\\n                k += 1\\n                i += 1\\n        last = a[j]\\n        k2 = 0\\n        i = start\\n        j -= 1\\n        while i <= j:\\n            if a[j] <= last:\\n                break\\n            else:\\n                last = a[j]\\n                k2 += 1\\n                j -= 1\\n        if k > k2:\\n            ans += 'L' * (k + 1)\\n        else:\\n            ans += 'R' * (k2 + 1)\\n        break\\n    if a[i] < a[j]:\\n        if a[i] > last:\\n            ans += 'L'\\n            last = a[i]\\n            i += 1\\n        else:\\n            ans += 'R'\\n            last = a[j]\\n            j -= 1\\n    else:\\n        if a[j] > last:\\n            ans += 'R'\\n            last = a[j]\\n            j -= 1\\n        else:\\n            ans += 'L'\\n            last = a[i]\\n            i += 1\\nprint(len(ans))\\nprint(ans)\\n\", \"def search(l, r, pr):\\n\\tposl = \\\"\\\"\\n\\tfl = True\\n\\twhile l <= r:\\n\\t\\tif sp[l] < sp[r]:\\n\\t\\t\\tif sp[l] > pr:\\n\\t\\t\\t\\tpr = sp[l]\\n\\t\\t\\t\\tl += 1\\n\\t\\t\\t\\tposl += \\\"L\\\"\\n\\t\\t\\telif sp[r] > pr:\\n\\t\\t\\t\\tpr = sp[r]\\n\\t\\t\\t\\tr -= 1\\n\\t\\t\\t\\tposl += \\\"R\\\"\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfl = False\\n\\t\\telif sp[l] > sp[r]:\\n\\t\\t\\tif sp[r] > pr:\\n\\t\\t\\t\\tpr = sp[r]\\n\\t\\t\\t\\tr -= 1\\n\\t\\t\\t\\tposl += \\\"R\\\"\\n\\t\\t\\telif sp[l] > pr:\\n\\t\\t\\t\\tpr = sp[l]\\n\\t\\t\\t\\tl += 1\\n\\t\\t\\t\\tposl += \\\"L\\\"\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfl = False\\n\\t\\telse:\\n\\t\\t\\tif sp[l] > pr:\\n\\t\\t\\t\\tfst = search(l + 1, r, sp[l]) + \\\"L\\\"\\n\\t\\t\\t\\tsec = search(l, r - 1, sp[r]) + \\\"R\\\"\\n\\t\\t\\t\\tif len(sec) > len(fst):\\n\\t\\t\\t\\t\\tposl += sec\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tposl += fst\\n\\t\\t\\tfl = False\\n\\t\\tif not fl:\\n\\t\\t\\tbreak\\n\\treturn posl\\n\\n\\n\\nn = int(input())\\nsp = list(map(int, input().split()))\\npr = 0\\nposl = \\\"\\\"\\nl = 0\\nr = n - 1\\nnew = search(l, r, 0)\\nprint(len(new))\\nprint(new)\\n\\n\", \"import sys\\ninput = sys.stdin.readline\\n#from collections import deque\\n\\nn=int(input())\\nA=list(map(int,input().split()))\\n#B=deque(A)\\n\\n\\nLIST=[1]*n\\nLIST_INV=[1]*n\\n\\nfor i in range(n-2,-1,-1):\\n    if A[i]<A[i+1]:\\n        LIST[i]=LIST[i+1]+1\\n\\n\\nfor i in range(1,n):\\n    if A[i]<A[i-1]:\\n        LIST_INV[i]=LIST_INV[i-1]+1\\n\\nANS=[]\\nSCORE=0\\ni=0\\nj=n-1\\nwhile True:\\n    if i==j and A[i]>SCORE:\\n        ANS.append(\\\"R\\\")\\n        SCORE=A[i]\\n        break\\n    \\n    if A[i]>A[j] and A[j]>SCORE:\\n        ANS.append(\\\"R\\\")\\n        SCORE=A[j]\\n        j-=1\\n        \\n    elif A[i]<A[j] and A[i]>SCORE:\\n        ANS.append(\\\"L\\\")\\n        SCORE=A[i]\\n        i+=1\\n        \\n    elif A[i]>A[j] and A[j]<=SCORE and A[i]>SCORE:\\n        ANS.append(\\\"L\\\")\\n        SCORE=A[i]\\n        i+=1\\n        \\n    elif A[i]<A[j] and A[i]<=SCORE and A[j]>SCORE:\\n        ANS.append(\\\"R\\\")\\n        SCORE=A[j]\\n        j-=1\\n\\n    elif A[i]==A[j] and A[i]>SCORE:\\n        if LIST[i]>LIST_INV[j]:\\n            ANS.append(\\\"L\\\")\\n            SCORE=A[i]\\n            i+=1\\n        else:\\n            ANS.append(\\\"R\\\")\\n            SCORE=A[j]\\n            j-=1\\n\\n    else:\\n        break\\nprint(len(ANS))\\nprint(\\\"\\\".join(ANS))            \\n            \\n    \\n    \\n\", \"n = int(input())\\na = [int(item) for item in input().split()]\\n\\ns = []\\ni = 0\\nj = n - 1\\nans = []\\nwhile i <= j:\\n    if a[i] < a[j]:\\n        if not s or s[-1] < a[i]:\\n            s.append(a[i])\\n            ans.append('L')\\n            i += 1\\n        elif not s or s[-1] < a[j]:\\n            s.append(a[j])\\n            ans.append('R')\\n            j -= 1\\n        else:\\n            break\\n    elif a[i] > a[j]:\\n        if not s or s[-1] < a[j]:\\n            ans.append('R')\\n            s.append(a[j])\\n            j -= 1\\n        elif not s or s[-1] < a[i]:\\n            s.append(a[i])\\n            ans.append('L')\\n            i += 1\\n        else:\\n            break\\n    else:\\n        p1 = 0\\n        p2 = 0\\n        cur_last = s[-1] if s else None\\n        or_i = i\\n        while i <= j and (cur_last is None or a[i] > cur_last):\\n            cur_last = a[i]\\n            i += 1\\n            p1 += 1\\n\\n        cur_last = s[-1] if s else None\\n        while or_i <= j and (cur_last is None or a[j] > cur_last):\\n            cur_last = a[j]\\n            j -= 1\\n            p2 += 1\\n        if p1 > p2:\\n            ans += list(\\\"L\\\" * p1)\\n        else:\\n            ans += list(\\\"R\\\" * p2)\\n        break\\n\\nprint(len(ans))\\nprint(''.join(str(x) for x in ans))\\n\", \"\\nn = int(input())\\n\\nM = list(map(int, input().split()))\\nL = [1] * n\\nR = [1] * n\\n\\nfor i in range(1, len(M)):\\n    if M[i] < M[i-1]:\\n        R[i] = R[i-1] + 1\\n    if M[n - 1 - i] < M[n - i]:\\n        L[n-1-i] = L[n-i] + 1\\n\\n         \\n        \\n#print(L)\\n#print(R)        \\nans = []\\n\\nlast = -1\\nl, r = 0, n - 1\\n\\nwhile r >= l:\\n    #print(str(l) + ' ' + str(r), end=': ')\\n    #print(last)\\n    if M[r] <= last and M[l] <= last:\\n        break\\n    if M[r] == M[l]:\\n       \\n        if L[l] > R[r]:\\n            ans += [\\\"L\\\"]\\n            last = M[l]\\n            l += 1\\n        else:\\n            ans += [\\\"R\\\"]\\n            last = M[r]\\n            r -= 1\\n    elif M[r] <= last:\\n        last = M[l]\\n        ans += [\\\"L\\\"]\\n        l += 1\\n    elif M[l] <= last:\\n        last = M[r]\\n        ans += [\\\"R\\\"]\\n        r -= 1\\n    else:\\n        if M[l] < M[r]:\\n            last = M[l]\\n            ans += [\\\"L\\\"]\\n            l += 1\\n        else:\\n            last = M[r]\\n            ans += [\\\"R\\\"]\\n            r -= 1\\n\\nprint(len(ans))\\nprint(\\\"\\\".join(ans))\\n\", \"R = lambda: map(int, input().split())\\n\\n\\ndef isL():\\n    k1 = 1\\n    while i + k1 <= j and a[i+k1]>a[i+k1-1]:\\n        k1 += 1\\n    k2 = 1\\n    while j - k2 >= i and a[j-k2]>a[j-k2+1]:\\n        k2 += 1\\n    return k1 >= k2\\n\\n\\nn, a = int(input()), list(R())\\nres = []\\ni, j = 0, n-1\\nv = 0\\nwhile i <= j:\\n    if a[i] <= v and a[j] <= v:\\n        break\\n    elif a[i] > v >= a[j]:\\n        res.append('L')\\n        v = a[i]\\n        i += 1\\n    elif a[j] > v >= a[i]:\\n        res.append('R')\\n        v = a[j]\\n        j -= 1\\n    elif a[i] < a[j]:\\n        res.append('L')\\n        v = a[i]\\n        i += 1\\n    elif a[j] < a[i]:\\n        res.append('R')\\n        v = a[j]\\n        j -= 1\\n    elif i == j:\\n        res.append('L')\\n        v = a[i]\\n        i += 1\\n    elif isL():\\n        res.append('L')\\n        v = a[i]\\n        i += 1\\n    else:\\n        res.append('R')\\n        v = a[j]\\n        j -= 1\\n\\nres = ''.join(res)\\nprint(len(res))\\nprint(res)\", \"n = int(input())\\nsl = list(map(int, input().split()))\\nans = \\\"\\\"\\ncurrent = 0\\nfor i in range(n):\\n    if(current<sl[0] and current<sl[-1]):\\n        #print(sl)\\n        if(sl[0] == sl[-1] and i!=(n-1)):\\n            l, r = 1, 1\\n            for j in range(len(sl)):\\n                #print(sl[j], sl[j+1])\\n                if(sl[j]<sl[j+1]): l += 1\\n                else: break\\n            for j in range(len(sl)):\\n                #print(sl[-(j+1)], sl[-(j+2)], sl[-(j+1)]>sl[-(j+2)])\\n                if(sl[-(j+1)]<sl[-(j+2)]): r += 1\\n                else: break\\n            #print(l, r)\\n            if(l>r): ans += \\\"L\\\"*l\\n            else: ans += \\\"R\\\"*r\\n            break\\n        elif(current<sl[0] and sl[0] <= sl[-1]):\\n            ans += \\\"L\\\"\\n            current = sl.pop(0)\\n        elif(current<sl[-1] and sl[0]>sl[-1]):\\n            ans += \\\"R\\\"\\n            current = sl.pop()\\n    elif(current<sl[0] and current>=sl[-1]):\\n        ans += \\\"L\\\"\\n        current = sl.pop(0)\\n    elif(current>=sl[0] and current<sl[-1]):\\n        ans += \\\"R\\\"\\n        current = sl.pop()\\n    else: break\\nprint(len(ans))\\nprint(ans)\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\n@Project : CodeForces\\n@File    : 32.py \\n@Time    : 2019/4/26 23:43\\n@Author  : Koushiro \\n\\\"\\\"\\\"\\n\\ndef __starting_point():\\n    n = int(input())\\n    nums = list(map(int, input().split()))\\n    result = []\\n    last = -1\\n    left = 0\\n    right = len(nums) - 1\\n    while left <= right:\\n        if nums[left] < nums[right]:\\n            if nums[left] > last:\\n                last = nums[left]\\n                left += 1\\n                result.append('L')\\n            elif nums[right] > last:\\n                last = nums[right]\\n                right -= 1\\n                result.append('R')\\n            else:\\n                break\\n        elif nums[left] > nums[right]:\\n            if nums[right] > last:\\n                last = nums[right]\\n                right -= 1\\n                result.append('R')\\n            elif nums[left] > last:\\n                last = nums[left]\\n                left += 1\\n                result.append('L')\\n            else:\\n                break\\n        elif nums[left] == nums[right]:\\n            l_n = left\\n            r_n = right\\n            l_c = 0\\n            r_c = 0\\n            l_last = last\\n            r_last = last\\n            while l_n <= right:\\n                if nums[l_n] > l_last:\\n                    l_c += 1\\n                    l_last = nums[l_n]\\n                    l_n += 1\\n                else:\\n                    break\\n            while r_n >= left:\\n                if nums[r_n] > r_last:\\n                    r_c += 1\\n                    r_last = nums[r_n]\\n                    r_n -= 1\\n                else:\\n                    break\\n            if l_c > r_c:\\n                for i in range(l_c):\\n                    result.append(\\\"L\\\")\\n            else:\\n                for i in range(r_c):\\n                    result.append(\\\"R\\\")\\n            break\\n\\n    print(len(result))\\n    print(\\\"\\\".join(result))\\n\\n__starting_point()\", \"n = int(input())\\nnums = list(map(int, input().split()))\\n\\n\\ndef foo(l, r, prev=0):\\n    ans = \\\"\\\"\\n    while l <= r:\\n        if nums[l] <= prev and nums[r] <= prev:\\n            break\\n        if prev < nums[l] < nums[r]:\\n            ans += \\\"L\\\"\\n            prev = nums[l]\\n            l += 1\\n        elif prev < nums[r] < nums[l]:\\n            ans += \\\"R\\\"\\n            prev = nums[r]\\n            r -= 1\\n        elif nums[r] > nums[l]:\\n            ans += \\\"R\\\"\\n            prev = nums[r]\\n            r -= 1\\n        elif nums[r] < nums[l]:\\n            ans += \\\"L\\\"\\n            prev = nums[l]\\n            l += 1\\n        elif l == r:\\n            ans += 'R'\\n            break\\n        else:\\n            a1 = 'L' + foo(l + 1, r, nums[l])\\n            a2 = 'R' + foo(l, r - 1, nums[l])\\n            ans += a1 if len(a1) > len(a2) else a2\\n            break\\n    return ans\\n\\n\\nans = foo(0, n - 1)\\nprint(len(ans))\\nprint(ans)\\n\", \"from collections import deque\\nn=int(input())\\na=deque([int(x) for x in input().split()])\\ncur=-1\\nans=''\\nwhile (cur<a[0] or cur<a[-1]):\\n    if a[0]<a[-1]:\\n        if cur<a[0]:\\n            ans+='L'\\n            cur=a[0]\\n            a.popleft()\\n        else:\\n            ans+='R'\\n            cur=a[-1]\\n            a.pop()\\n        \\n    elif a[0]>a[-1]:\\n        if cur<a[-1]:\\n            ans+='R'\\n            cur=a[-1]\\n            a.pop()\\n        else:\\n            ans+='L'\\n            cur=a[0]\\n            a.popleft()\\n    elif len(a)==1:\\n        ans+='R'\\n        cur=a[-1]\\n        a.pop()\\n    elif a[0]==a[-1]:\\n        cur1=cur\\n        cur2=cur\\n        b=a.copy()\\n        c=a.copy()\\n        count1=0\\n        count2=0\\n        while cur1<b[0]:\\n            count1+=1\\n            cur1=b[0]\\n            b.popleft()\\n        while cur2<c[-1]:\\n            count2+=1\\n            cur2=c[-1]\\n            c.pop()\\n        if count1>count2:\\n            for i in range(count1):\\n                ans+='L'\\n            break\\n        else:\\n            for i in range(count2):\\n                ans+='R'\\n            break\\n            \\n    if len(a)==0:\\n        break\\n\\nprint(len(ans))\\nprint(ans)\", \"''' CODED WITH LOVE BY SATYAM KUMAR '''\\n\\nfrom sys import stdin, stdout\\nimport cProfile, math\\nfrom collections import Counter,defaultdict,deque\\nfrom bisect import bisect_left,bisect,bisect_right\\nimport itertools\\nfrom copy import deepcopy\\nfrom fractions import Fraction\\nimport sys, threading\\nimport operator as op\\nfrom functools import reduce\\nsys.setrecursionlimit(10**6) # max depth of recursion\\nthreading.stack_size(2**27)  # new thread will get stack of such size\\nfac_warmup = False\\nprintHeap = str()\\nmemory_constrained = False\\nP = 10**9+7\\nimport sys\\n\\nclass merge_find:\\n    def __init__(self,n):\\n        self.parent = list(range(n))\\n        self.size = [1]*n\\n        self.num_sets = n\\n        self.lista = [[_] for _ in range(n)]\\n    def find(self,a):\\n        to_update = []\\n        while a != self.parent[a]:\\n            to_update.append(a)\\n            a = self.parent[a]\\n        for b in to_update:\\n            self.parent[b] = a\\n        return self.parent[a]\\n    def merge(self,a,b):\\n        a = self.find(a)\\n        b = self.find(b)\\n        if a==b:\\n            return\\n        if self.size[a]<self.size[b]:\\n            a,b = b,a\\n        self.num_sets -= 1\\n        self.parent[b] = a\\n        self.size[a] += self.size[b]\\n        self.lista[a] += self.lista[b]\\n    def set_size(self, a):\\n        return self.size[self.find(a)]\\n    def __len__(self):\\n        return self.num_sets\\n\\ndef display(string_to_print):\\n    stdout.write(str(string_to_print) + \\\"\\\\n\\\")\\n\\ndef primeFactors(n): #n**0.5 complex \\n    factors = dict()\\n    for i in range(2,math.ceil(math.sqrt(n))+1):  \\n        while n % i== 0: \\n            if i in factors:\\n                factors[i]+=1\\n            else: factors[i]=1\\n            n = n // i \\n    if n>2:\\n        factors[n]=1\\n    return (factors)\\n\\ndef all_factors(n):    \\n    return set(reduce(list.__add__, \\n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\\n\\ndef fibonacci_modP(n,MOD):\\n    if n<2: return 1\\n    #print (n,MOD)\\n    return (cached_fn(fibonacci_modP, (n+1)//2, MOD)*cached_fn(fibonacci_modP, n//2, MOD) + cached_fn(fibonacci_modP, (n-1) // 2, MOD)*cached_fn(fibonacci_modP, (n-2) // 2, MOD)) % MOD\\n\\ndef factorial_modP_Wilson(n , p): \\n    if (p <= n): \\n        return 0\\n    res = (p - 1) \\n    for i in range (n + 1, p): \\n        res = (res * cached_fn(InverseEuler,i, p)) % p \\n    return res \\n\\ndef binary(n,digits = 20):\\n    b = bin(n)[2:]\\n    b = '0'*(20-len(b))+b\\n    return b\\n\\ndef isprime(n):\\n    \\\"\\\"\\\"Returns True if n is prime.\\\"\\\"\\\"\\n    if n < 4:\\n        return True\\n    if n % 2 == 0:\\n        return False\\n    if n % 3 == 0:\\n        return False\\n    i = 5\\n    w = 2\\n    while i * i <= n:\\n        if n % i == 0:\\n            return False\\n        i += w\\n        w = 6 - w\\n    return True\\nfactorial_modP = []\\ndef warm_up_fac(MOD):\\n    nonlocal factorial_modP,fac_warmup\\n    if fac_warmup: return\\n    factorial_modP= [1 for _ in range(fac_warmup_size+1)]\\n    for i in range(2,fac_warmup_size):\\n        factorial_modP[i]= (factorial_modP[i-1]*i) % MOD\\n    fac_warmup = True\\n\\ndef InverseEuler(n,MOD):\\n    return pow(n,MOD-2,MOD)\\n\\ndef nCr(n, r, MOD):\\n    nonlocal fac_warmup,factorial_modP\\n    if not fac_warmup:\\n        warm_up_fac(MOD)\\n        fac_warmup = True\\n    return (factorial_modP[n]*((pow(factorial_modP[r], MOD-2, MOD) * pow(factorial_modP[n-r], MOD-2, MOD)) % MOD)) % MOD\\n\\ndef test_print(*args):\\n    if testingMode:\\n        print(args)\\n\\ndef display_list(list1, sep=\\\" \\\"):\\n    stdout.write(sep.join(map(str, list1)) + \\\"\\\\n\\\")\\n\\ndef display_2D_list(li):\\n    for i in li:\\n        print(i)\\ndef prefix_sum(li):\\n    sm = 0\\n    res = []\\n    for i in li:\\n        sm+=i\\n        res.append(sm)\\n    return res\\n\\ndef get_int():\\n    return int(stdin.readline().strip())\\n\\ndef get_tuple():\\n    return map(int, stdin.readline().split())\\n\\ndef get_list():\\n    return list(map(int, stdin.readline().split()))\\nimport heapq,itertools\\npq = []                         # list of entries arranged in a heap\\nentry_finder = {}               # mapping of tasks to entries\\nREMOVED = '<removed-task>' \\ndef add_task(task, priority=0):\\n    'Add a new task or update the priority of an existing task'\\n    if task in entry_finder:\\n        remove_task(task)\\n    count = next(counter)\\n    entry = [priority, count, task]\\n    entry_finder[task] = entry\\n    heapq.heappush(pq, entry)\\n\\ndef remove_task(task):\\n    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\\n    entry = entry_finder.pop(task)\\n    entry[-1] = REMOVED\\n\\ndef pop_task():\\n    'Remove and return the lowest priority task. Raise KeyError if empty.'\\n    while pq:\\n        priority, count, task = heapq.heappop(pq)\\n        if task is not REMOVED:\\n            del entry_finder[task]\\n            return task\\n    raise KeyError('pop from an empty priority queue')\\nmemory = dict()\\ndef clear_cache():\\n    nonlocal memory\\n    memory = dict()\\ndef cached_fn(fn, *args):\\n    nonlocal memory\\n    if args in memory:\\n        return memory[args]\\n    else:\\n        result = fn(*args)\\n        memory[args] = result\\n        return result\\n\\ndef ncr (n,r):\\n    return math.factorial(n)/(math.factorial(n-r)*math.factorial(r))\\ndef binary_serach(i,li):\\n    #print(\\\"Search for \\\",i)\\n    fn = lambda x: li[x]-x//i\\n    x = -1\\n    b = len(li)\\n    while b>=1:\\n        #print(b,x)\\n        while b+x<len(li) and fn(b+x)>0: #Change this condition 2 to whatever you like\\n            x+=b\\n        b=b//2\\n    return x\\n\\n# -------------------------------------------------------------- MAIN PROGRAM\\nTestCases = False\\ntestingMode = False\\nfac_warmup_size = 10**5+100\\noptimiseForReccursion = True #Can not be used clubbed with TestCases # WHen using recursive functions, use Python 3\\nfrom math import factorial\\n\\ndef main():\\n    get_int()\\n    li = deque(get_list())\\n    prev = 0\\n    res = []\\n    while len(li)>0:\\n        if li[0]==li[-1] and li[0]>prev and len(li)>1:\\n            guess1 = 0\\n            guess2 = 0\\n            prev = li[0]\\n            p = prev\\n            dq = list(li)\\n            n = len(dq)\\n            for i in range(1,n):\\n                if dq[i]>prev: prev=dq[i]\\n                else: break\\n                if i==n-1: i=n\\n            guess1 = i\\n            dq.reverse()\\n            prev = p\\n            for i in range(1,n):\\n                if dq[i]>prev: prev=dq[i]\\n                else: break\\n                if i==n-1: i=n\\n            guess2 = i\\n            if guess1>guess2:\\n                res += [\\\"L\\\"]*guess1\\n            else:\\n                res += [\\\"R\\\"]*guess2\\n            break\\n\\n        elif li[0]<li[-1] and li[0]>prev:\\n            prev = li.popleft()\\n            res.append(\\\"L\\\")     \\n        elif li[-1]>prev:\\n            prev = li.pop()\\n            res.append(\\\"R\\\")\\n        elif li[0]>prev:\\n            prev = li.popleft()\\n            res.append(\\\"L\\\") \\n        else: break\\n    print(len(res))\\n    display_list(res,\\\"\\\")\\n\\n# --------------------------------------------------------------------- END=\\n\\n\\nif TestCases: \\n    for i in range(get_int()): \\n        cProfile.run('main()') if testingMode else main(i) \\nelse: (cProfile.run('main()') if testingMode else main()) if not optimiseForReccursion else threading.Thread(target=main).start()\", \"N = int(input())\\na_list = list(map(int, input().split()))\\nfrom collections import deque\\nimport bisect\\n\\ndeq = deque(a_list)\\nans = \\\"\\\"\\nleft = 0\\nright = 0\\nmin_num = -1\\ncnt = 0\\nf = False\\nlr = False\\nwhile len(deq) >= 2:\\n    left = deq.popleft()\\n    right = deq.pop()\\n    # print(left, right)\\n    max_num = max(left, right)\\n    if max_num > min_num:\\n\\n        if left == right:\\n            deq.appendleft(left)\\n            deq.append(right)\\n            lr = True\\n            break\\n        cnt += 1\\n        if right > left > min_num:\\n            ans += \\\"L\\\"\\n            deq.append(right)\\n            min_num = left\\n        elif left > right > min_num:\\n            ans += \\\"R\\\"\\n            deq.appendleft(left)\\n            min_num = right\\n        elif left > min_num:\\n            ans += \\\"L\\\"\\n            deq.append(right)\\n            min_num = left\\n        else:\\n            ans += \\\"R\\\"\\n            deq.appendleft(left)\\n            min_num = right\\n    else:\\n        f = True\\n        break\\nif lr:\\n    l = 0\\n    r = 0\\n    tmp = deq.copy()\\n    prv = -1\\n    for t in tmp:\\n        if t > prv:\\n            l += 1\\n        else:\\n            break\\n        prv = t\\n    tmp = list(reversed(tmp))\\n    prv = -1\\n    for t in tmp:\\n        if t > prv:\\n            r += 1\\n        else:\\n            break\\n        prv = t\\n    if l > r:\\n        print(cnt + l)\\n        print(ans + \\\"L\\\" * l)\\n    else:\\n        print(cnt + r)\\n        print(ans + \\\"R\\\" * r)\\n    return\\n\\n\\nif f:\\n    print(cnt)\\n    print(ans)\\nelse:\\n    tmp = deq.pop()\\n    if tmp > min_num:\\n        cnt += 1\\n        print(cnt)\\n        print(ans + \\\"R\\\")\\n    else:\\n        print(cnt)\\n        print(ans)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nnew = [0]\\ns = ''\\ni = 0\\nj = -1\\n\\ndef rec(a, i, j):\\n    c = func(a, i + 1, j, new + [a[i]], s)\\n    d = func(a, i, j - 1, new + [a[j]], s)\\n    if c[0] < d[0]:\\n        return True\\n    else:\\n        return False\\n\\ndef func(a, i, j, new, s):\\n    while True:\\n        if n - i < -j:\\n            return len(new) - 1, s\\n            break\\n        if a[i] > new[-1] and a[j] > new[-1]:\\n            if a[i] == a[j]:\\n                if rec(a, i, j):\\n                    new.append(a[j])\\n                    j -= 1\\n                    s += 'R'\\n                else:\\n                    s += 'L'\\n                    new.append(a[i])\\n                    i += 1\\n            elif a[i] < a[j]:\\n                new.append(a[i])\\n                s += 'L'\\n                i += 1\\n            else:\\n                new.append(a[j])\\n                s += 'R'\\n                j -= 1\\n        elif a[i] > new[-1] or a[j] > new[-1]:\\n            if a[i] > new[-1]:\\n                new.append(a[i])\\n                s += 'L'\\n                i += 1\\n            else:\\n                new.append(a[j])\\n                s += 'R'\\n                j -= 1\\n        else:\\n            return len(new) - 1, s\\n            break\\n\\nfor j in func(a, i, j, new, s):\\n    print(j)\\n\", \"def solve(p, q, r):\\n    ans = \\\"\\\"\\n    current = r\\n    i = p\\n    j = q\\n    while True:\\n        if j < i:\\n            break\\n        if current < num[i] < num[j] or num[j] <= current < num[i]:\\n            ans += \\\"L\\\"\\n            current = num[i]\\n            i += 1\\n            continue\\n        if current < num[j] < num[i] or num[i] <= current < num[j]:\\n            ans += \\\"R\\\"\\n            current = num[j]\\n            j -= 1\\n            continue\\n        if current < num[i] == num[j]:\\n            ans1 = solve(i, j - 1, num[i])\\n            ans2 = solve(i + 1, j, num[i])\\n            if len(ans1) > len(ans2):\\n                ans += \\\"R\\\" + ans1\\n            else:\\n                ans += \\\"L\\\" + ans2\\n        break\\n    return ans\\n\\nn = int(input())\\nnum = [*list(map(int, input().split()))]\\nans = solve(0, n - 1, -1)\\nprint(len(ans))\\nprint(ans)\\n\", \"def main():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    i = 0\\n    j = n - 1\\n    last = -1\\n    anz = []\\n    stop = False\\n    while i != j:\\n        if a[i] == a[j]:\\n            stop = True\\n            break\\n        if a[i] < a[j]:\\n            if a[i] > last:\\n                last = a[i]\\n                i += 1\\n                anz.append(\\\"L\\\") \\n            elif a[j] > last:\\n                last = a[j]\\n                j -= 1\\n                anz.append(\\\"R\\\")\\n            else:\\n                break\\n        else:\\n            if a[j] > last:\\n                last = a[j]\\n                j -= 1\\n                anz.append(\\\"R\\\") \\n            elif a[i] > last:\\n                last = a[i]\\n                i += 1\\n                anz.append(\\\"L\\\")\\n            else:\\n                break\\n    if i == j and a[i] > last:\\n        anz.append(\\\"R\\\")\\n    if stop:\\n        l = []\\n        r = []\\n        i1 = i\\n        last1 = last\\n        while last1 < a[i] and i != j:\\n            last1 = a[i]\\n            i += 1\\n            l.append(\\\"L\\\")\\n        while last < a[j] and i1 != j:\\n            last = a[j]\\n            j -= 1\\n            r.append(\\\"R\\\")\\n        if len(l) > len(r):\\n            print(len(anz) + len(l))\\n            for elem in anz:\\n                print(elem, end=\\\"\\\")\\n            for elem in l:\\n                print(elem, end=\\\"\\\")\\n        else:\\n            print(len(r) + len(anz))\\n            for elem in anz:\\n                print(elem, end=\\\"\\\")\\n            for elem in r:\\n                print(elem, end=\\\"\\\")            \\n    else:\\n        print(len(anz))\\n        for elem in anz:\\n            print(elem, end=\\\"\\\")\\nmain()\"]", "input_output": "{\n  \"inputs\": [\n    \"5\\n1 2 4 3 2\\n\",\n    \"7\\n1 3 5 6 5 4 2\\n\",\n    \"3\\n2 2 2\\n\",\n    \"4\\n1 2 4 3\\n\",\n    \"15\\n37504 79054 80071 95721 135743 164345 189260 190810 191657 196168 200000 200000 190810 190018 185437\\n\",\n    \"4\\n1 2 3 4\\n\",\n    \"6\\n1 2 3 4 2 3\\n\",\n    \"4\\n2 2 2 3\\n\",\n    \"4\\n1 3 2 2\\n\",\n    \"12\\n2 3 5 2 5 8 9 4 6 5 2 2\\n\",\n    \"10\\n1 2 1 5 6 1 1 2 7 1\\n\",\n    \"5\\n1 2 1 3 1\\n\",\n    \"4\\n4 2 2 2\\n\",\n    \"17\\n1 1 3 1 2 3 1 1 1 2 2 2 3 2 1 3 3\\n\",\n    \"5\\n5 4 4 2 1\\n\",\n    \"10\\n5 10 2 1 4 9 9 5 5 5\\n\",\n    \"2\\n1 1\\n\",\n    \"4\\n3 3 3 4\\n\",\n    \"17\\n1 2 2 1 1 1 2 1 2 2 3 1 3 2 3 1 1\\n\",\n    \"45\\n1 3 4 6 8 5 1 5 10 10 8 3 2 7 4 1 9 8 9 1 9 10 10 4 7 8 7 7 7 10 8 8 3 8 1 9 8 5 9 3 6 10 3 1 3\\n\",\n    \"5\\n5 1 4 4 4\\n\",\n    \"7\\n1 2 3 1 3 3 1\\n\",\n    \"5\\n4 5 3 1 4\\n\",\n    \"5\\n1 1 4 4 3\\n\",\n    \"1\\n1\\n\",\n    \"17\\n1 3 3 1 1 1 1 2 1 1 3 3 2 3 3 2 1\\n\",\n    \"11\\n3 2 1 3 2 2 2 3 2 2 1\\n\",\n    \"12\\n1 1 3 2 1 1 2 2 3 1 2 2\\n\",\n    \"5\\n1 3 3 2 5\\n\",\n    \"15\\n1 3 3 3 3 2 2 3 2 3 3 3 3 1 1\\n\",\n    \"6\\n2 3 5 6 3 2\\n\",\n    \"15\\n1 2 1 1 3 2 2 2 3 3 3 1 1 2 2\\n\",\n    \"16\\n2 1 3 1 1 2 3 3 1 1 2 1 1 3 1 2\\n\",\n    \"4\\n1 4 3 3\\n\",\n    \"5\\n2 2 4 5 2\\n\",\n    \"3\\n2 2 3\\n\",\n    \"3\\n1 1 2\\n\",\n    \"3\\n2 2 1\\n\",\n    \"4\\n3 3 2 2\\n\",\n    \"4\\n1 1 2 4\\n\",\n    \"18\\n3 3 1 1 2 3 2 1 1 1 1 2 2 2 2 3 2 2\\n\",\n    \"3\\n3 1 1\\n\",\n    \"2\\n2 1\\n\",\n    \"5\\n1 4 1 3 3\\n\",\n    \"20\\n1 1 2 3 1 1 3 1 2 3 2 1 2 2 1 1 2 2 3 1\\n\",\n    \"3\\n3 2 2\\n\",\n    \"5\\n4 5 5 2 1\\n\",\n    \"5\\n5 1 7 8 5\\n\",\n    \"5\\n2 1 3 4 2\\n\",\n    \"4\\n1 1 1 3\\n\",\n    \"4\\n3 1 1 1\\n\",\n    \"10\\n2 2 3 3 2 1 1 1 3 3\\n\",\n    \"2\\n1 2\\n\",\n    \"12\\n2 3 1 3 1 1 2 3 3 2 2 2\\n\",\n    \"4\\n3 2 3 1\\n\",\n    \"3\\n3 2 3\\n\",\n    \"3\\n2 1 1\\n\",\n    \"15\\n2 2 1 3 1 3 1 3 2 2 3 3 2 3 3\\n\",\n    \"93\\n6 6 10 10 8 4 7 10 2 3 4 10 7 2 8 8 4 2 4 4 7 7 3 2 3 1 5 3 7 2 4 9 10 8 10 5 1 6 2 1 10 3 5 6 6 9 3 10 1 10 1 6 2 3 8 7 1 5 4 10 4 3 5 8 8 1 3 8 2 3 10 7 2 4 5 2 6 4 10 4 4 8 5 1 6 3 1 9 5 4 9 4 3\\n\",\n    \"6\\n4 4 4 4 1 3\\n\",\n    \"14\\n1 1 3 3 2 3 1 3 1 3 3 3 2 2\\n\",\n    \"5\\n4 2 1 1 1\\n\",\n    \"10\\n3 3 2 3 2 1 2 2 2 2\\n\",\n    \"5\\n1 2 1 2 1\\n\",\n    \"14\\n2 1 1 1 2 2 2 1 1 2 1 2 3 3\\n\",\n    \"6\\n2 2 3 4 2 2\\n\",\n    \"5\\n5 4 4 2 2\\n\",\n    \"17\\n2 1 1 2 1 2 3 1 3 1 3 2 1 2 1 1 3\\n\",\n    \"5\\n4 1 2 1 5\\n\",\n    \"14\\n1 2 2 3 1 3 3 2 3 1 3 2 1 1\\n\",\n    \"6\\n3 3 1 2 1 2\\n\",\n    \"9\\n6 6 7 9 6 1 4 4 4\\n\",\n    \"16\\n2 1 1 3 2 2 2 2 3 2 2 3 1 3 2 2\\n\",\n    \"5\\n3 4 5 2 2\\n\",\n    \"4\\n4 3 1 1\\n\",\n    \"20\\n1 3 3 1 2 1 1 2 3 1 3 2 3 1 3 3 1 2 1 2\\n\",\n    \"7\\n1 1 1 2 7 2 1\\n\",\n    \"15\\n3 2 2 2 1 2 2 1 3 3 2 1 2 2 1\\n\",\n    \"11\\n1 1 3 1 1 2 3 1 2 2 1\\n\",\n    \"4\\n3 3 4 2\\n\",\n    \"20\\n2 2 2 3 3 3 2 1 1 1 2 3 3 3 3 2 1 2 2 3\\n\",\n    \"11\\n3 2 1 2 3 1 3 2 2 2 1\\n\",\n    \"89\\n4 5 4 8 3 3 6 3 3 2 10 10 1 2 7 6 8 4 4 1 5 4 10 3 4 2 2 4 8 2 9 8 5 4 2 4 3 3 6 4 10 2 9 4 9 10 1 1 4 4 2 8 10 3 7 5 1 4 8 8 10 6 1 4 9 4 7 6 3 9 6 8 1 6 7 3 10 10 9 7 10 10 9 9 5 4 9 9 7\\n\",\n    \"5\\n2 5 1 3 2\\n\",\n    \"5\\n4 4 2 5 1\\n\",\n    \"18\\n3 3 3 2 1 3 1 1 3 3 3 2 3 1 2 3 1 1\\n\",\n    \"5\\n1 3 3 2 1\\n\",\n    \"5\\n5 5 2 4 4\\n\",\n    \"5\\n4 3 4 4 2\\n\",\n    \"14\\n1 1 3 1 1 2 3 1 3 1 2 3 1 3\\n\",\n    \"19\\n1 1 1 2 1 3 2 3 2 3 3 3 1 3 2 3 1 3 3\\n\",\n    \"8\\n2 3 1 3 2 2 1 2\\n\",\n    \"6\\n1 1 2 1 2 1\\n\",\n    \"16\\n1 3 2 3 2 1 1 3 1 1 2 3 2 1 2 2\\n\",\n    \"7\\n2 2 3 2 1 1 1\\n\",\n    \"18\\n1 2 1 3 3 1 2 1 1 1 2 2 1 1 2 3 1 1\\n\",\n    \"5\\n1 2 2 2 3\\n\",\n    \"4\\n4 3 4 1\\n\",\n    \"4\\n2 3 2 2\\n\",\n    \"19\\n1 1 3 1 1 1 2 1 1 1 2 1 1 3 1 1 2 2 1\\n\",\n    \"4\\n1 1 3 3\\n\",\n    \"4\\n4 3 3 1\\n\",\n    \"19\\n2 2 2 1 2 1 1 3 2 3 1 2 1 1 2 3 1 2 2\\n\",\n    \"4\\n4 1 1 2\\n\",\n    \"5\\n3 1 2 3 1\\n\",\n    \"20\\n3 3 3 1 3 2 3 1 2 1 1 3 2 3 2 1 1 3 2 2\\n\",\n    \"3\\n2 1 2\\n\",\n    \"17\\n2 3 1 3 2 3 2 3 3 3 1 3 2 3 2 1 2\\n\",\n    \"4\\n3 4 2 3\\n\",\n    \"5\\n4 3 3 2 1\\n\",\n    \"8\\n2 3 3 1 1 1 2 2\\n\",\n    \"11\\n2 3 2 1 2 3 1 3 1 1 2\\n\",\n    \"16\\n2 1 1 1 2 3 1 1 3 2 3 1 3 3 2 2\\n\",\n    \"14\\n2 1 3 1 3 3 1 2 2 3 3 2 1 3\\n\",\n    \"4\\n1 4 1 1\\n\",\n    \"12\\n1 3 2 2 3 1 1 2 3 1 1 1\\n\",\n    \"4\\n3 4 4 4\\n\",\n    \"13\\n1 1 1 1 2 3 2 3 1 3 2 3 1\\n\",\n    \"13\\n1 1 2 1 2 3 1 1 3 1 3 1 2\\n\",\n    \"9\\n2 2 3 1 2 1 2 2 1\\n\",\n    \"9\\n6 8 5 5 7 8 5 6 5\\n\",\n    \"11\\n1 1 3 1 3 1 2 3 3 1 1\\n\",\n    \"6\\n5 8 7 5 6 5\\n\",\n    \"10\\n3 2 2 1 2 3 1 2 2 2\\n\",\n    \"14\\n1 2 3 2 3 2 2 3 3 3 2 3 1 1\\n\",\n    \"18\\n2 3 3 3 1 2 2 1 3 3 2 3 1 3 1 2 2 2\\n\",\n    \"18\\n2 2 3 2 2 2 1 2 3 2 2 2 1 3 1 2 1 1\\n\",\n    \"17\\n3 5 2 11 10 9 10 15 2 10 11 13 1 1 16 1 3\\n\",\n    \"7\\n3 1 3 1 3 1 1\\n\",\n    \"5\\n1 1 1 5 4\\n\",\n    \"13\\n2 1 3 1 2 3 2 1 1 3 3 1 3\\n\",\n    \"12\\n3 3 2 3 2 3 1 2 1 2 2 1\\n\",\n    \"12\\n1 1 2 1 2 2 3 3 3 1 3 3\\n\",\n    \"18\\n1 3 2 2 2 3 2 3 3 1 1 3 1 2 1 2 2 2\\n\",\n    \"3\\n1 2 2\\n\",\n    \"6\\n2 3 3 3 1 1\\n\",\n    \"5\\n1 4 4 1 3\\n\",\n    \"15\\n3 2 2 2 2 2 2 2 2 1 1 2 3 2 2\\n\",\n    \"4\\n4 1 2 2\\n\",\n    \"9\\n3 4 9 3 5 1 4 2 3\\n\",\n    \"5\\n1 3 2 2 3\\n\",\n    \"12\\n2 1 3 2 3 3 3 1 3 2 1 1\\n\",\n    \"5\\n3 4 5 1 4\\n\",\n    \"5\\n4 3 1 1 1\\n\",\n    \"6\\n2 2 2 2 3 2\\n\",\n    \"12\\n1 2 2 1 3 2 3 2 2 3 3 1\\n\",\n    \"13\\n1 1 3 2 2 1 1 3 3 1 2 1 2\\n\",\n    \"10\\n1 3 1 2 2 2 2 3 2 3\\n\",\n    \"15\\n1 2 2 3 1 1 2 2 1 2 1 3 2 2 2\\n\",\n    \"4\\n3 1 4 3\\n\",\n    \"4\\n2 4 1 2\\n\",\n    \"17\\n1 3 2 3 3 2 1 3 1 3 3 2 2 2 3 2 1\\n\",\n    \"5\\n2 2 6 4 2\\n\",\n    \"18\\n1 2 3 1 1 3 1 1 2 2 3 2 1 3 3 2 3 1\\n\",\n    \"12\\n2 1 3 1 2 2 2 1 2 2 1 2\\n\",\n    \"5\\n5 5 3 3 1\\n\",\n    \"4\\n2 2 4 3\\n\",\n    \"4\\n2 1 1 1\\n\",\n    \"20\\n2 2 2 1 1 3 1 3 3 1 2 3 3 3 2 2 2 3 1 3\\n\",\n    \"5\\n3 4 5 1 1\\n\",\n    \"17\\n3 3 2 3 2 3 1 2 3 2 2 3 1 3 1 2 1\\n\",\n    \"20\\n2 1 2 2 2 1 3 2 1 2 1 1 2 1 3 2 1 3 3 2\\n\",\n    \"4\\n4 4 2 3\\n\",\n    \"20\\n2 2 2 3 2 3 3 1 3 2 2 1 3 1 3 2 3 1 3 3\\n\",\n    \"15\\n3 1 1 1 1 1 1 1 2 1 1 1 1 2 1\\n\",\n    \"4\\n3 4 1 1\\n\",\n    \"19\\n1 1 3 3 3 1 3 1 2 2 3 1 3 2 1 3 2 3 3\\n\",\n    \"4\\n4 2 2 1\\n\",\n    \"18\\n3 1 2 1 3 1 3 2 2 2 2 1 3 3 3 3 1 2\\n\",\n    \"4\\n3 2 3 3\\n\",\n    \"15\\n2 3 1 3 2 3 2 3 1 1 2 3 3 1 1\\n\",\n    \"17\\n2 2 2 2 3 2 1 1 1 3 3 2 3 1 1 1 2\\n\",\n    \"5\\n4 5 2 3 4\\n\",\n    \"18\\n2 3 2 3 1 3 2 1 1 2 1 2 2 1 1 2 1 1\\n\",\n    \"20\\n3 3 2 2 3 3 3 2 1 1 2 2 3 3 3 3 3 1 1 1\\n\",\n    \"9\\n1 2 1 2 3 1 1 2 1\\n\",\n    \"5\\n2 4 3 4 4\\n\",\n    \"8\\n3 2 3 1 1 2 2 1\\n\",\n    \"10\\n1 1 1 3 2 2 3 1 3 3\\n\",\n    \"5\\n3 3 1 1 2\\n\",\n    \"5\\n3 1 1 1 4\\n\",\n    \"4\\n2 1 2 2\\n\",\n    \"4\\n4 2 1 1\\n\",\n    \"5\\n5 1 4 4 2\\n\",\n    \"5\\n2 5 1 1 1\\n\",\n    \"17\\n1 1 1 2 2 1 2 3 3 1 3 2 3 1 1 1 1\\n\",\n    \"5\\n4 2 3 2 2\\n\",\n    \"7\\n1 1 3 3 3 2 2\\n\",\n    \"15\\n2 1 3 1 2 1 2 1 3 3 3 2 3 3 3\\n\",\n    \"5\\n2 5 2 1 2\\n\",\n    \"9\\n1 2 1 3 2 3 1 1 2\\n\",\n    \"5\\n2 4 3 5 5\\n\",\n    \"4\\n4 4 3 3\\n\",\n    \"15\\n1 1 1 2 2 3 2 2 3 3 2 2 3 2 2\\n\",\n    \"5\\n4 4 2 2 2\\n\",\n    \"5\\n4 5 2 1 4\\n\",\n    \"14\\n2 1 1 2 1 2 3 1 2 1 2 1 3 3\\n\",\n    \"8\\n2 2 3 1 2 2 1 1\\n\",\n    \"5\\n5 1 5 1 4\\n\",\n    \"6\\n1 2 2 1 2 3\\n\",\n    \"9\\n2 2 1 1 2 1 1 3 2\\n\",\n    \"8\\n2 2 1 1 1 1 3 3\\n\",\n    \"5\\n3 5 4 5 3\\n\",\n    \"5\\n4 4 5 3 3\\n\",\n    \"9\\n3 1 1 2 2 2 2 1 2\\n\",\n    \"5\\n5 5 5 1 3\\n\",\n    \"8\\n1 3 3 2 1 1 1 1\\n\",\n    \"12\\n7 3 5 8 10 4 10 5 4 12 7 2\\n\",\n    \"5\\n5 2 3 2 2\\n\",\n    \"18\\n2 2 1 2 1 3 3 1 3 2 1 1 3 2 1 1 2 2\\n\",\n    \"13\\n3 3 2 2 1 3 2 1 3 3 1 1 2\\n\",\n    \"7\\n2 1 2 1 1 1 1\\n\",\n    \"16\\n2 2 3 1 2 1 1 3 2 1 1 1 2 3 1 2\\n\",\n    \"5\\n1 1 2 1 1\\n\",\n    \"14\\n11 3 2 5 7 13 1 13 5 8 4 6 13 11\\n\",\n    \"5\\n5 5 3 1 2\\n\",\n    \"11\\n2 3 3 1 1 1 2 2 3 2 3\\n\",\n    \"18\\n1 2 3 2 1 1 2 1 2 3 2 3 2 2 3 2 1 2\\n\",\n    \"9\\n2 2 2 3 2 1 1 3 3\\n\",\n    \"4\\n2 2 1 3\\n\",\n    \"6\\n2 3 3 1 1 1\\n\",\n    \"18\\n1 3 3 1 1 2 1 2 3 2 2 3 3 3 3 1 1 1\\n\",\n    \"19\\n2 2 3 2 3 3 2 3 3 2 3 3 3 2 1 2 1 2 3\\n\",\n    \"17\\n2 2 3 3 2 2 1 3 1 3 1 2 1 2 2 2 1\\n\",\n    \"5\\n5 2 4 4 3\\n\",\n    \"4\\n4 4 2 2\\n\",\n    \"11\\n2 2 1 3 2 3 3 3 2 1 1\\n\",\n    \"13\\n2 2 1 1 1 2 3 2 2 1 3 3 1\\n\",\n    \"15\\n2 2 2 3 2 2 2 1 1 2 2 1 2 3 3\\n\",\n    \"17\\n1 2 3 1 2 2 1 2 2 1 1 1 1 3 2 2 1\\n\",\n    \"3\\n1 1 3\\n\",\n    \"4\\n4 1 1 1\\n\",\n    \"7\\n1 5 5 6 4 5 2\\n\",\n    \"9\\n2 5 6 5 6 9 7 5 2\\n\",\n    \"7\\n1 4 4 2 2 2 3\\n\"\n  ],\n  \"outputs\": [\n    \"4\\nLRRR\\n\",\n    \"6\\nLRLRRR\\n\",\n    \"1\\nR\\n\",\n    \"4\\nLLRR\\n\",\n    \"13\\nLLLLLLRLRLLLL\\n\",\n    \"4\\nLLLR\\n\",\n    \"4\\nLLLL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nLRL\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"4\\nRRRL\\n\",\n    \"2\\nLL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLL\\n\",\n    \"5\\nLLLLL\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nLL\\n\",\n    \"3\\nLRR\\n\",\n    \"1\\nR\\n\",\n    \"3\\nRRR\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nLLR\\n\",\n    \"2\\nLL\\n\",\n    \"4\\nLLLL\\n\",\n    \"2\\nLR\\n\",\n    \"1\\nR\\n\",\n    \"3\\nLRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRR\\n\",\n    \"3\\nLRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"4\\nRRLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nRR\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"4\\nRRLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"1\\nR\\n\",\n    \"4\\nRLLL\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLRL\\n\",\n    \"3\\nRRR\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nRR\\n\",\n    \"3\\nRLR\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRRL\\n\",\n    \"4\\nLLRR\\n\",\n    \"2\\nRR\\n\",\n    \"3\\nRLR\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nRRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nRR\\n\",\n    \"3\\nLRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLL\\n\",\n    \"3\\nLLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRRL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLL\\n\",\n    \"4\\nRRRL\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRR\\n\",\n    \"3\\nRLL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLRR\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nLRL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRLL\\n\",\n    \"3\\nLRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLL\\n\",\n    \"3\\nRRR\\n\",\n    \"3\\nRRR\\n\",\n    \"3\\nLLL\\n\",\n    \"1\\nR\\n\",\n    \"3\\nRRL\\n\",\n    \"3\\nLRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"4\\nRLLL\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRRL\\n\",\n    \"3\\nRLL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nRL\\n\",\n    \"1\\nR\\n\",\n    \"3\\nRLL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nLL\\n\",\n    \"3\\nRLL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nRRL\\n\",\n    \"3\\nRLL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nLLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLL\\n\",\n    \"3\\nRRR\\n\",\n    \"2\\nRL\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"1\\nR\\n\",\n    \"1\\nR\\n\",\n    \"2\\nRR\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nRLL\\n\",\n    \"2\\nLL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRR\\n\",\n    \"3\\nRRL\\n\",\n    \"2\\nRL\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nRLR\\n\",\n    \"2\\nLR\\n\",\n    \"3\\nLLL\\n\",\n    \"2\\nLR\\n\",\n    \"2\\nRL\\n\",\n    \"3\\nLRR\\n\",\n    \"4\\nRRRR\\n\",\n    \"3\\nLRL\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1157/C2", "starter_code": ""}
{"id": 4004, "question": "You are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\n\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \n\nIt is possible that after an operation the value $a_i$ becomes negative.\n\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\n\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\n\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\n\nIf it is impossible to choose such value $D$, print -1.\n\n\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\n\nOutput\n3\n\nInput\n5\n2 2 5 2 5\n\nOutput\n3\n\nInput\n4\n1 3 3 7\n\nOutput\n-1\n\nInput\n2\n2 8\n\nOutput\n3", "solutions": "[\"def main():\\n    n = int(input())\\n    a = list(sorted(set(map(int, input().split()))))\\n    if len(a) > 3:\\n        print(-1)\\n    elif len(a) == 1:\\n        print(0)\\n    elif len(a) == 2:\\n        d = a[1] - a[0]\\n        if d & 1:\\n            print(d)\\n        else:\\n            print(d >> 1)\\n    else:\\n        d = a[1] - a[0]\\n        D = a[2] - a[1]\\n        if d == D:\\n            print(d)\\n        else:\\n            print(-1)\\n    return 0\\n\\nmain()\", \"n = int(input())\\nA = list(map(int, input().split()))\\nB = list(set(A))\\nif len(B) > 3:\\n\\tprint(-1)\\nelse:\\n\\tif len(B) == 3:\\n\\t\\tB.sort()\\n\\t\\tif B[1] - B[0] == B[2] - B[1]:\\n\\t\\t\\tprint(B[1] - B[0])\\n\\t\\telse:\\n\\t\\t\\tprint(-1)\\n\\telif len(B) == 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tB.sort()\\n\\t\\tif ((B[1] - B[0]) % 2 == 0):\\n\\t\\t\\tprint((B[1] - B[0]) // 2)\\n\\t\\telse:\\n\\t\\t\\tprint(B[1] - B[0])\", \"n = int(input())\\na = list(map(int, input().split()))\\ns = set(a)\\nif len(s) > 3:\\n    print(-1)\\nelif len(s) == 1:\\n    print(0)\\nelif len(s) == 2:\\n    a = list(s)\\n    d = abs(a[0] - a[1])\\n    if d % 2 == 0:\\n        d //= 2\\n    print(d)\\nelse:\\n    a = sorted(list(s))\\n    if a[1] - a[0] == a[2] - a[1]:\\n        print(a[1] - a[0])\\n    else:\\n        print(-1)\\n\", \"N = int(input())\\nA = sorted(list(set([int(a) for a in input().split()])))\\nif len(A) == 1:\\n    print(0)\\nelif len(A) == 2:\\n    if (A[1]-A[0]) % 2 == 0:\\n        print((A[1]-A[0])//2)\\n    else:\\n        print(A[1]-A[0])\\nelif len(A) == 3:\\n    if A[2]+A[0] == A[1] * 2:\\n        print(A[2]-A[1])\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\\n\", \"n = int(input())\\narr = list(sorted(set(map(int, input().split()))))\\n\\nif len(arr) == 1:\\n    print(0)\\nelif len(arr) == 2:\\n    if arr[1] % 2 == arr[0] % 2:\\n        print((arr[1] - arr[0]) // 2)\\n    else:\\n        print(arr[1] - arr[0])\\nelif len(arr) == 3:\\n    if arr[2] - arr[1] == arr[1] - arr[0]:\\n        print(arr[2] - arr[1])\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\\n\", \"input()\\nn = list({int(x) for x in input().split()})\\nif len(n) == 1:\\n    print('0')\\nelif len(n) > 3:\\n    print('-1')\\nelif len(n) == 2:\\n    if abs(n[0] - n[1]) % 2 == 0:\\n        print(abs(n[0] - n[1]) // 2)\\n    else:\\n        print(abs(n[0] - n[1]))\\nelse:\\n    n = sorted(n)\\n    if n[2] - n[1] == n[1] - n[0]:\\n        print(n[2] - n[1])\\n    else:\\n        print('-1')\\n\", \"n=int(input())\\nA=list(map(int,input().split()))\\nA=sorted(set(A))\\n\\nif len(A)>3:\\n    print(-1)\\n\\nelif len(A)==3:\\n    if A[1]-A[0]==A[2]-A[1]:\\n        print(A[1]-A[0])\\n    else:\\n        print(-1)\\n\\nelif len(A)==2:\\n    if (A[1]-A[0])%2==1:\\n        print(A[1]-A[0])\\n    else:\\n        print((A[1]-A[0])//2)\\n\\nelif len(A)==1:\\n    print(0)\\n    \\n\\n\", \"n=int(input())\\nit=list(map(int,input().split()))\\nkk=set(it)\\nif len(kk)>3:\\n    print(-1)\\nif len(kk)==1:\\n    print(0)\\nif len(kk)==2:\\n    kk=list(kk)\\n    kk.sort()\\n    if (kk[0]-kk[1])%2==0:\\n        print((kk[1]-kk[0])//2)\\n    else:\\n        print(kk[1]-kk[0])\\nif len(kk)==3:\\n    kk=list(kk)\\n    kk.sort()\\n    if kk[0]-kk[1]==kk[1]-kk[2]:\\n        print(kk[1]-kk[0])\\n    else:\\n        print(-1)\\n\", \"input()\\n\\ns = set(map(int, input().split()))\\n\\nif len(s) == 1:\\n\\tD = 0\\n\\nelif len(s) == 2:\\n\\tD = max(s) - min(s)\\n\\n\\tif D % 2 == 0:\\n\\t\\tD = D // 2\\n\\nelif len(s) == 3:\\n\\tlst = list(s)\\n\\tlst.sort()\\n\\n\\tif lst[2] - lst[1] == lst[1] - lst[0]:\\n\\t\\tD = lst[2] - lst[1]\\n\\n\\telse:\\n\\t\\tD = -1\\n\\nelse:\\n\\tD = -1\\n\\nprint(D)\", \"n=int(input())\\na=[int(x) for x in input().split()]\\nb=set(a)\\nc=sorted(list(b))\\nif len(b)==3:    \\n    if c[1]-c[0]==c[2]-c[1]:\\n        print(c[1]-c[0])\\n    else:\\n        print(-1)\\nelif len(b)==2:\\n    if (c[1]-c[0])%2==0:\\n              print((c[1]-c[0])//2)\\n    else:\\n              print(c[1]-c[0])\\nelif len(b)==1:\\n              print(0)\\nelse:\\n              print(-1)\\n        \\n\", \"IN = input\\nrint = lambda: int(IN())\\nrmint = lambda: list(map(int, IN().split()))\\nrlist = lambda: list(rmint())\\n\\nn = rint()\\na = rlist()\\nb = list(set(a))\\nb.sort()\\nif len(b) > 3:\\n    print(-1)\\nelif len(b) == 1:\\n    print(0)\\nelif len(b) == 2:\\n    p = b[1] - b[0]\\n    if p&1:\\n        print(p)\\n    else:\\n        print(p//2)\\nelse:\\n    if b[1]-b[0] == b[-1]-b[1]:\\n        print(b[1]-b[0])\\n    else:\\n        print(-1)\\n\", \"n = int(input())\\na = [int(e) for e in input().split()]\\nst = set()\\nfor i in a:\\n    st.add(i)\\nb = sorted(list(st))\\nif len(st) > 3:\\n    print(-1)\\nelif len(st) == 3:\\n    if b[0] + b[2] == b[1] * 2:\\n        print(b[1] - b[0])\\n    else:\\n        print(-1)\\nelif len(st) == 2:\\n    if (b[1] - b[0]) % 2 == 0:\\n        print((b[1] - b[0]) // 2)\\n    else:\\n        print(b[1] - b[0])\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nl = [*map(int, input().split())]\\ndef check(x):\\n    return [abs(e - x) for e in l if e != x]\\nres = float('inf')\\nfor x in range(1, 101):\\n    c = check(x)\\n    if len(set(c)) == 1:\\n        res = min(res, c[0])\\n    elif not c:\\n        res = 0\\n        break\\nif res > 100:\\n    print(-1)\\nelse:\\n    print(res)\", \"n = int(input())\\na = [int(t) for t in input().split()]\\n\\nif len(set(a)) > 3:\\n    print(-1)\\n    return\\n    \\nif len(set(a)) == 1:\\n    print(0)\\n    return\\n    \\nif len(set(a)) == 2:\\n    c = abs(list(set(a))[0] - list(set(a))[1])\\n    if c % 2 == 0:\\n        print(c // 2)\\n    else:\\n        print(c)\\n    return\\n    \\na, b, c = sorted(list(set(a)))\\n\\nif c - b != b - a:\\n    print(-1)\\nelse:\\n    print(c - b)\\n\\n\", \"n=int(input())\\nl=list(map(int, input().split()))\\nl.sort()\\nfinal=[]\\nfor i in l:\\n\\tif i not in final:\\n\\t\\tfinal+=[i]\\nif(len(final)==1):\\n\\tprint(0)\\nelif(len(final)==2):\\n\\tif((final[1]-final[0])%2==0):\\n\\t\\tprint((final[1]-final[0])//2)\\n\\telse:\\n\\t\\tprint(final[1]-final[0])\\nelif(len(final)==3):\\n\\tif((final[1]-final[0])==(final[2]-final[1])):\\n\\t\\tprint(final[2]-final[1])\\n\\telse:\\n\\t\\tprint(-1)\\nelse:\\n\\tprint(-1)\", \"from collections import Counter\\nn = int(input())\\na = list(map(int,input().split()))\\na.sort()\\nmn = a[0]\\nmx = a[-1]\\nc = Counter(a)\\nmed = -1\\nfor i in c:\\n    if mn < i < mx:\\n        med = i\\nif len(c) > 3:\\n    print(-1)\\nelif len(c) == 3:\\n    if med-mn == mx-med:\\n        print(med-mn)\\n    else:\\n        print(-1)\\nelif len(c) == 2:\\n    print((mx-mn)//2 if (mx-mn)%2 == 0 else mx-mn)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\na = sorted(set(map(int, input().split())))\\nif len(a) > 3:\\n  print(-1)\\nelif len(a) == 3:\\n  print(-1 if 3 * a[1] != sum(a) else a[2] - a[1])\\nelif len(a) == 2:\\n  print(a[1] - a[0] if (a[1] - a[0]) % 2 else (a[1] - a[0]) // 2)\\nelse:\\n  print(0)\\n\", \"n = int(input())\\na = [int(item) for item in input().split()]\\n\\ns = set(a)\\nl = list(s)\\nif len(s) > 3:\\n    print(-1)\\nelif len(s) == 3:\\n    l.sort()\\n    if l[1] - l[0] != l[2] - l[1]:\\n        print(-1)\\n    else:\\n        print(l[1] - l[0])\\nelif len(s) == 2:\\n    if abs(l[0] - l[1]) % 2:\\n        print(abs(l[0] - l[1]))\\n    else:\\n        print(abs(l[0] - l[1]) // 2)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nu = list(map(int, input().split()))\\nu.sort()\\np = [u[0]]\\nfor i in range(1, n):\\n    if u[i] != u[i - 1]:\\n        p.append(u[i])\\n        if len(p) == 4:\\n            print(-1)\\n            return\\nif len(p) == 1:\\n    print(0)\\nelif len(p) == 2:\\n    if abs(p[1] - p[0]) % 2 == 0:\\n        print(abs(p[1] - p[0]) // 2)\\n    else:\\n        print(abs(p[1] - p[0]))\\nelse:\\n    if p[1] - p[0] == p[2] - p[1]:\\n        print(p[2] - p[1])\\n    else:\\n        print(-1)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nb = sorted(set(a))\\n\\nif len(b) == 1:\\n    print(0)\\nelif len(b) == 2:\\n    b.sort()\\n    if sum(b) % 2 == 0:\\n        print((b[1] - b[0])//2)\\n    else:\\n        print(b[1] - b[0])\\nelif len(b) == 3:\\n    b.sort()\\n    if b[0] + b[2] == 2*b[1]:\\n        print(b[1] - b[0])\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\", \"import collections\\n\\ndef solve():\\n    n=int(input())\\n    A=list(map(int,input().split()))\\n    c=collections.Counter(A)\\n    ck=list(c.keys())\\n    ck.sort()\\n    ck_len=len(ck)\\n    if ck_len>=4:\\n        return -1\\n    elif ck_len==3:\\n        if ck[2]-ck[1]==ck[1]-ck[0]:\\n            return ck[2]-ck[1]\\n        else:\\n            return -1\\n    elif ck_len==2:\\n        if (ck[1]-ck[0])%2==0:\\n            return (ck[1]-ck[0])//2\\n        else:\\n            return ck[1]-ck[0]\\n    else:\\n        return 0\\n\\nprint(solve())\\n\", \"\\nn = int(input())\\n\\narr = list(map(int,input().strip().split()))\\n\\narr = sorted(arr)\\n\\nans = 10000000000\\n\\nfor k in range(200):\\n    d = -1\\n    fl = 0\\n    #print(\\\"->\\\",k)\\n    for i in range(n):\\n        c = abs(arr[i]-k)\\n        #print(c)\\n        if d==-1:\\n            d = c\\n        else:\\n            if d!=c and c>0:\\n                fl= 1\\n    if fl==0:\\n        ans = min(ans,d)\\nif ans==10000000000:\\n    print(-1)\\nelse:\\n    print(ans)\\n\", \"def main():\\n\\n    n = int(input())\\n    ints = list(map(int, input().split()))\\n\\n    ints = sorted(list(set(ints)))\\n\\n    if len(ints) > 3:\\n        print(-1)\\n        return\\n    if len(ints) == 3:\\n        if (ints[1] - ints[0]) == (ints[2] - ints[1]):\\n            print(ints[1] - ints[0])\\n        else:\\n            print(-1)\\n        return\\n    if len(ints) == 2:\\n        if (ints[0] + ints[1]) % 2 == 0:\\n            print((ints[0] + ints[1]) // 2 - ints[0])\\n        else:\\n            print(ints[1] - ints[0])\\n        return\\n    print(0)\\n    return\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\"]", "input_output": "{\n  \"inputs\": [\n    \"6\\n1 4 4 7 4 1\\n\",\n    \"5\\n2 2 5 2 5\\n\",\n    \"4\\n1 3 3 7\\n\",\n    \"2\\n2 8\\n\",\n    \"1\\n100\\n\",\n    \"2\\n1 1\\n\",\n    \"100\\n49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100\\n\",\n    \"5\\n1 2 2 1 1\\n\",\n    \"3\\n1 2 4\\n\",\n    \"3\\n1 3 4\\n\",\n    \"100\\n1 1 1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"3\\n2 6 6\\n\",\n    \"5\\n2 4 6 8 10\\n\",\n    \"5\\n1 1 1 1 1\\n\",\n    \"3\\n2 3 4\\n\",\n    \"4\\n2 3 6 9\\n\",\n    \"4\\n4 2 6 6\\n\",\n    \"5\\n1 2 3 4 5\\n\",\n    \"4\\n1 4 7 10\\n\",\n    \"4\\n2 2 10 10\\n\",\n    \"3\\n7 5 3\\n\",\n    \"2\\n2 7\\n\",\n    \"4\\n2 2 12 12\\n\",\n    \"2\\n5 8\\n\",\n    \"3\\n52 52 54\\n\",\n    \"4\\n1 2 3 4\\n\",\n    \"2\\n3 1\\n\",\n    \"2\\n2 5\\n\",\n    \"5\\n1 5 1 5 1\\n\",\n    \"4\\n4 4 4 4\\n\",\n    \"4\\n4 2 2 4\\n\",\n    \"5\\n1 4 7 10 13\\n\",\n    \"4\\n2 2 4 4\\n\",\n    \"4\\n1 2 3 6\\n\",\n    \"3\\n1 5 3\\n\",\n    \"2\\n3 8\\n\",\n    \"2\\n2 9\\n\",\n    \"6\\n1 3 5 1 5 5\\n\",\n    \"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n\",\n    \"3\\n5 5 3\\n\",\n    \"2\\n1 100\\n\",\n    \"3\\n1 5 9\\n\",\n    \"2\\n3 6\\n\",\n    \"4\\n1 3 5 7\\n\",\n    \"2\\n1 8\\n\",\n    \"4\\n1 1 1 1\\n\",\n    \"3\\n2 4 6\\n\",\n    \"3\\n3 7 2\\n\",\n    \"2\\n5 4\\n\",\n    \"3\\n4 6 8\\n\",\n    \"2\\n20 11\\n\",\n    \"5\\n1 1 2 3 4\\n\",\n    \"3\\n1 3 1\\n\",\n    \"2\\n100 1\\n\",\n    \"4\\n4 6 8 2\\n\",\n    \"2\\n4 3\\n\",\n    \"2\\n9 1\\n\",\n    \"2\\n6 5\\n\",\n    \"4\\n2 2 2 1\\n\",\n    \"2\\n1 4\\n\",\n    \"4\\n2 4 6 8\\n\",\n    \"3\\n1 7 4\\n\",\n    \"3\\n1 5 1\\n\",\n    \"3\\n1 3 3\\n\",\n    \"2\\n5 10\\n\",\n    \"3\\n6 8 4\\n\",\n    \"3\\n3 3 9\\n\",\n    \"3\\n100 100 4\\n\",\n    \"2\\n11 10\\n\",\n    \"3\\n2 2 8\\n\",\n    \"2\\n12 11\\n\",\n    \"3\\n1 3 5\\n\",\n    \"7\\n2 2 5 8 8 8 8\\n\",\n    \"3\\n6 1 11\\n\",\n    \"2\\n4 5\\n\",\n    \"2\\n13 12\\n\",\n    \"2\\n93 7\\n\",\n    \"2\\n1 7\\n\",\n    \"9\\n54 16 67 14 49 84 30 44 59\\n\",\n    \"2\\n4 7\\n\",\n    \"4\\n1 2 3 3\\n\",\n    \"2\\n8 7\\n\",\n    \"5\\n1 3 1 3 3\\n\",\n    \"3\\n1 9 5\\n\",\n    \"2\\n9 8\\n\",\n    \"3\\n10 16 22\\n\",\n    \"6\\n4 2 2 4 4 4\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9 10\\n\",\n    \"2\\n1 10\\n\",\n    \"4\\n10 16 22 28\\n\",\n    \"4\\n1 7 4 10\\n\",\n    \"4\\n2 5 8 11\\n\",\n    \"4\\n100 100 100 4\\n\",\n    \"4\\n2 2 1 3\\n\",\n    \"5\\n5 5 5 5 11\\n\",\n    \"3\\n1 50 99\\n\",\n    \"2\\n1 5\\n\",\n    \"2\\n1 2\\n\",\n    \"3\\n3 3 1\\n\",\n    \"5\\n6 4 2 1 1\\n\",\n    \"4\\n4 7 4 10\\n\",\n    \"4\\n7 8 8 6\\n\",\n    \"5\\n7 6 5 4 6\\n\",\n    \"2\\n5 3\\n\",\n    \"3\\n1 1 1\\n\",\n    \"3\\n5 2 8\\n\",\n    \"3\\n2 10 6\\n\",\n    \"4\\n2 6 10 14\\n\",\n    \"4\\n2 4 4 6\\n\",\n    \"4\\n2 4 4 4\\n\",\n    \"3\\n1 7 19\\n\",\n    \"2\\n1 11\\n\",\n    \"11\\n69 8 70 23 47 72 48 41 63 86 20\\n\",\n    \"9\\n1 4 7 7 4 1 4 7 1\\n\",\n    \"3\\n4 3 5\\n\",\n    \"5\\n4 2 6 6 6\\n\",\n    \"2\\n72 32\\n\",\n    \"5\\n7 9 5 7 7\\n\",\n    \"4\\n1 1 5 1\\n\",\n    \"4\\n2 4 6 10\\n\",\n    \"5\\n10 8 6 4 2\\n\",\n    \"4\\n4 4 12 12\\n\",\n    \"8\\n2 2 2 6 6 6 4 4\\n\",\n    \"4\\n1 3 4 5\\n\",\n    \"2\\n4 18\\n\",\n    \"5\\n1 3 5 1 5\\n\",\n    \"3\\n1 100 99\\n\",\n    \"4\\n4 3 2 1\\n\",\n    \"8\\n1 11 1 11 1 11 1 21\\n\",\n    \"5\\n1 3 2 1 4\\n\",\n    \"8\\n1 1 1 1 4 7 7 1\\n\",\n    \"2\\n4 19\\n\",\n    \"3\\n5 3 1\\n\",\n    \"6\\n1 3 5 5 3 1\\n\",\n    \"10\\n10 20 30 10 20 30 10 20 30 31\\n\",\n    \"4\\n1 4 3 5\\n\",\n    \"3\\n1 2 6\\n\",\n    \"10\\n20 20 20 20 20 20 20 21 19 18\\n\",\n    \"5\\n1 2 3 4 4\\n\",\n    \"5\\n1 5 9 1 5\\n\",\n    \"6\\n1 3 5 3 5 1\\n\",\n    \"2\\n52 50\\n\",\n    \"4\\n3 3 9 9\\n\",\n    \"9\\n4 6 6 4 6 7 8 6 4\\n\",\n    \"9\\n2 4 6 4 6 2 5 6 2\\n\",\n    \"100\\n72 72 89 89 89 89 55 72 55 72 89 55 55 89 55 72 72 55 55 89 89 89 55 89 89 55 55 89 72 72 89 89 55 55 89 89 55 55 89 72 55 55 72 72 72 72 72 89 72 55 72 72 55 55 89 72 72 89 89 55 89 72 72 89 55 55 55 72 55 55 89 89 89 89 72 55 72 72 55 55 55 55 72 55 72 72 55 72 55 72 55 55 72 72 55 89 89 72 72 89\\n\",\n    \"2\\n1 6\\n\",\n    \"4\\n2 6 4 4\\n\",\n    \"10\\n3 5 5 7 7 5 5 1 1 1\\n\",\n    \"6\\n4 4 2 2 6 6\\n\",\n    \"7\\n7 7 5 7 8 5 8\\n\",\n    \"6\\n4 4 4 2 6 8\\n\",\n    \"2\\n2 1\\n\",\n    \"4\\n1 5 3 3\\n\",\n    \"4\\n1 3 4 7\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"99\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"99\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"7\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"9\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"99\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"48\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"43\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"9\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"48\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"49\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"5\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"20\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"10\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"15\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"17\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"-1\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1154/B", "starter_code": ""}
{"id": 4005, "question": "There is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates $(0, 0)$, and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates $(x_1, y_1)$, and the top right \u2014 $(x_2, y_2)$.\n\nAfter that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are $(x_3, y_3)$, and the top right \u2014 $(x_4, y_4)$. Coordinates of the bottom left corner of the second black sheet are $(x_5, y_5)$, and the top right \u2014 $(x_6, y_6)$.  [Image] Example of three rectangles. \n\nDetermine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.\n\n\n-----Input-----\n\nThe first line of the input contains four integers $x_1, y_1, x_2, y_2$ $(0 \\le x_1 < x_2 \\le 10^{6}, 0 \\le y_1 < y_2 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the white sheet.\n\nThe second line of the input contains four integers $x_3, y_3, x_4, y_4$ $(0 \\le x_3 < x_4 \\le 10^{6}, 0 \\le y_3 < y_4 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the first black sheet.\n\nThe third line of the input contains four integers $x_5, y_5, x_6, y_6$ $(0 \\le x_5 < x_6 \\le 10^{6}, 0 \\le y_5 < y_6 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the second black sheet.\n\nThe sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.\n\n\n-----Output-----\n\nIf some part of the white sheet can be seen from the above after the two black sheets are placed, print \"YES\" (without quotes). Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\nOutput\nNO\n\nInput\n3 3 7 5\n0 0 4 6\n0 0 7 4\n\nOutput\nYES\n\nInput\n5 2 10 5\n3 1 7 6\n8 1 11 7\n\nOutput\nYES\n\nInput\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example the white sheet is fully covered by black sheets.\n\nIn the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point $(6.5, 4.5)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.", "solutions": "[\"x1, y1, x2, y2 = list(map( int, input().split() ))\\nx3, y3, x4, y4 = list(map( int, input().split() ))\\nx5, y5, x6, y6 = list(map( int, input().split() ))\\n\\ncovered = False\\nif x3 <= x1 and y3 <= y1 and x4 >= x2 and y4 >= y2:\\n    covered = True\\nelif x5 <= x1 and y5 <= y1 and x6 >= x2 and y6 >= y2:\\n    covered = True\\nelif x1 >= x3 and x1 >= x5 and x2 <= x4 and x2 <= x6:\\n    if min( y4, y6 ) >= max( y3, y5 ) and min( y3, y5 ) <= y1 and max( y4, y6 ) >= y2:\\n        covered = True\\nelif y1 >= y3 and y1 >= y5 and y2 <= y4 and y2 <= y6:\\n    if min( x4, x6 ) >= max( x3, x5 ) and min( x3, x5 ) <= x1 and max( x4, x6 ) >= x2:\\n        covered = True\\n\\nprint( \\\"NO\\\" if covered else \\\"YES\\\" )\\n\", \"w_x1, w_y1, w_x2, w_y2 = list(map(int, input().split()))\\n\\nx1, y1, x2, y2 = list(map(int, input().split()))\\nif x1 <= w_x1 and w_x2 <= x2:\\n    if y1 <= w_y1: \\n        w_y1 = max(y2, w_y1)\\n    if y2 >= w_y2: \\n        w_y2 = min(y1, w_y2)  \\n\\nif y1 <= w_y1 and w_y2 <= y2:\\n    if x1 <= w_x1: \\n        w_x1 = max(x2, w_x1)\\n    if x2 >= w_x2: \\n        w_x2 = min(x1, w_x2) \\n        \\nx1, y1, x2, y2 = list(map(int, input().split()))\\nif x1 <= w_x1 and w_x2 <= x2:\\n    if y1 <= w_y1: \\n        w_y1 = max(y2, w_y1)\\n    if y2 >= w_y2: \\n        w_y2 = min(y1, w_y2)  \\n\\nif y1 <= w_y1 and w_y2 <= y2:\\n    if x1 <= w_x1: \\n        w_x1 = max(x2, w_x1)\\n    if x2 >= w_x2: \\n        w_x2 = min(x1, w_x2) \\n        \\n\\nif w_x1 >= w_x2 and w_y1 >= w_y2:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n\\n\", \"\\n\\ndef main():\\n    x1, y1, x2, y2 = map(int, input().split())\\n    x3, y3, x4, y4 = map(int, input().split())\\n    x5, y5, x6, y6 = map(int, input().split())\\n\\n    ans = \\\"NO\\\"\\n    for x in range(x1, x2+1):\\n        if not (x3 <= x <= x4 and y3 <= y1 <= y4) and not (x5 <= x <= x6 and y5 <= y1 <= y6):\\n            ans = \\\"YES\\\"\\n        if not (x3 <= x <= x4 and y3 <= y2 <= y4) and not (x5 <= x <= x6 and y5 <= y2 <= y6):\\n            ans = \\\"YES\\\"\\n        if x == x2:\\n            continue\\n        x += 0.5\\n        if not (x3 <= x <= x4 and y3 <= y1 <= y4) and not (x5 <= x <= x6 and y5 <= y1 <= y6):\\n            ans = \\\"YES\\\"\\n        if not (x3 <= x <= x4 and y3 <= y2 <= y4) and not (x5 <= x <= x6 and y5 <= y2 <= y6):\\n            ans = \\\"YES\\\"\\n        \\n\\n    for y in range(y1, y2+1):\\n        if not (x3 <= x1 <= x4 and y3 <= y <= y4) and not (x5 <= x1 <= x6 and y5 <= y <= y6):\\n            ans = \\\"YES\\\"\\n        if not (x3 <= x2 <= x4 and y3 <= y <= y4) and not (x5 <= x2 <= x6 and y5 <= y <= y6):\\n            ans = \\\"YES\\\"\\n        if y == y2:\\n            continue\\n        y += 0.5\\n        if not (x3 <= x1 <= x4 and y3 <= y <= y4) and not (x5 <= x1 <= x6 and y5 <= y <= y6):\\n            ans = \\\"YES\\\"\\n        if not (x3 <= x2 <= x4 and y3 <= y <= y4) and not (x5 <= x2 <= x6 and y5 <= y <= y6):\\n            ans = \\\"YES\\\"\\n\\n    print(ans)\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"w = list(map(int,input().split()))\\ng = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\n\\ndef cover(w,b):\\n    return b[0] <= w[0] and w[2] <= b[2] and b[1] <= w[1] and w[3] <= b[3]\\n\\ndef hcover(w,b1,b2):\\n    h = b1[0] <= w[0] and w[2] <= b1[2] and b2[0] <= w[0] and w[2] <= b2[2]\\n    v1 = b1[1] <= w[1] and b2[1] <= b1[3] and  w[3] <= b2[3]\\n    v2 = b2[1] <= w[1] and b1[1] <= b2[3] and  w[3] <= b1[3]\\n\\n    return h and (v1 or v2)\\n\\ndef vcover(w,b1,b2):\\n    h = b1[1] <= w[1] and w[3] <= b1[3] and b2[1] <= w[1] and w[3] <= b2[3]\\n    v1 = b1[0] <= w[0] and b2[0] <= b1[2] and  w[2] <= b2[2]\\n    v2 = b2[0] <= w[0] and b1[0] <= b2[2] and  w[2] <= b1[2]\\n    \\n    return h and (v1 or v2)\\n\\nif cover(w,b) or cover(w,g) or hcover(w,b,g) or vcover(w,b,g):\\n    print('NO')\\nelse:\\n    print('YES')\\n\", \"#!python3\\n\\nfrom collections import deque, Counter\\nimport array\\nfrom itertools import combinations, permutations\\nfrom math import sqrt\\nimport unittest\\n\\n\\ndef read_int():\\n    return int(input().strip())\\n\\n\\ndef read_int_array():\\n    return [int(i) for i in input().strip().split(' ')]\\n\\n######################################################\\n\\nW = read_int_array()\\nB1 = read_int_array()\\nB2 = read_int_array()\\n\\nby_x = [W[0], W[2], B1[0], B1[2], B2[0], B2[2]]\\nby_x.sort()\\n\\nfound = False\\nfor x in by_x:\\n    if not (W[0] <= x <= W[2]):\\n        continue\\n    interval = W[3] - W[1]\\n    for b in [B1, B2]:\\n        if b[0] <= x <= b[2]:\\n            interval -= max(0, min(b[3], W[3]) - max(b[1], W[1]))\\n    if interval > 0:\\n        found = True\\n        break\\n\\nif not found:\\n    by_y = [W[1], W[3], B1[1], B1[3], B2[1], B2[3]]\\n    by_y.sort()\\n    for y in by_y:\\n        if not (W[1] <= y <= W[3]):\\n            continue\\n        interval = W[2] - W[0]\\n        for b in [B1, B2]:\\n            if b[1] <= y <= b[3]:\\n                interval -= max(0, min(b[2], W[2]) - max(b[0], W[0]))\\n        if interval > 0:\\n            found = True\\n            break\\nprint(\\\"YES\\\" if found else \\\"NO\\\")\\n\\n\\n\\n\\n\\n\\n\", \"x1, y1, x2, y2 = map(int, input().split())\\nx3, y3, x4, y4 = map(int, input().split())\\nx5, y5, x6, y6 = map(int, input().split())\\npl = (x2 - x1) * (y2 - y1)\\n\\n\\ndef peresech(a, b, c, d, a2, b2, c2, d2):\\n    l1 = [a, c, a2, c2]\\n    l2 = [b, d, b2, d2]\\n    l1.sort()\\n    l2.sort()\\n    if a == a2 and b == b2 and c == c2 and d == d2:\\n        return [a, b, c, d]\\n    if b > d2 or c < a2 or d < b2 or a > c2:\\n        return 0\\n    return [l1[1], l2[1], l1[2], l2[2]]\\n\\n\\nl = peresech(x1, y1, x2, y2, x3, y3, x4, y4)\\nl2 = peresech(x1, y1, x2, y2, x5, y5, x6, y6)\\nif l == 0:\\n    if l2 != 0:\\n        if (l2[2] - l2[0]) * (l2[3] - l2[1]) != pl:\\n            print(\\\"YES\\\")\\n        else:\\n            print(\\\"NO\\\")\\n    else:\\n        print(\\\"YES\\\")\\n    return\\nif l2 == 0 and l != 0:\\n    if (l[2] - l[0]) * (l[3] - l[1]) != pl:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n    return\\nl3 = peresech(l[0], l[1], l[2], l[3], l2[0], l2[1], l2[2], l2[3])\\nif l3 == 0:\\n    if (l[2] - l[0]) * (l[3] - l[1]) + (l2[2] - l2[0]) * (l2[3] - l2[1]) == pl:\\n        print(\\\"NO\\\")\\n    else:\\n        print(\\\"YES\\\")\\n    return\\nif (l[2] - l[0]) * (l[3] - l[1]) + (l2[2] - l2[0]) * (l2[3] - l2[1]) - (l3[2] - l3[0]) * (l3[3] - l3[1]) == pl:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\", \"from sys import stdin, stdout  \\n\\n\\n\\nx1, y1, x2, y2 = list(map(int, input().split()))\\nx3, y3, x4, y4 = list(map(int, input().split()))\\nx5, y5, x6, y6 = list(map(int, input().split()))\\n\\n\\nS1 = 0\\nS2 = 0\\nS = 0\\n\\nl1 = min(x2, x4) - max(x1, x3)\\nh1 = min(y2, y4) - max(y1, y3)\\n\\nif l1 >= 0 and h1 >= 0:\\n    S1 = l1 * h1\\n    \\nl2 = min(x2, x6) - max(x1, x5)\\nh2 = min(y2, y6) - max(y1, y5)\\n\\nif l2 >= 0 and h2 >= 0:\\n    S2 = l2 * h2\\n    \\nl3 = min(x2, x6, x4) - max(x1, x5, x3)\\nh3 = min(y2, y6, y4) - max(y1, y5, y3)\\n\\nif l3 >= 0 and h3 >= 0:\\n    S = l3 * h3\\n\\nif S1 + S2 - S == (x2 - x1) * (y2 - y1):\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n      \\n\", \"#!/usr/bin/env python3\\n\\nimport sys\\n\\nw = [int(i) for i in input().split()]\\nb1 = [int(i) for i in input().split()]\\nb2 = [int(i) for i in input().split()]\\n\\n\\ndef is_inside(r_in, r_out):\\n    return (r_out[0] <= r_in[0] <= r_out[2]) and (\\n        r_out[1] <= r_in[1] <= r_out[3]) and (\\n            r_out[0] <= r_in[2] <= r_out[2]) and (\\n                r_out[1] <= r_in[3] <= r_out[3])\\n\\n\\ndef bisects(r_in, r_out):\\n    return ((r_out[0] <= r_in[0] <= r_out[2]) and\\n            (r_out[0] <= r_in[2] <= r_out[2])) or (\\n                (r_out[1] <= r_in[1] <= r_out[3]) and (\\n                    r_out[1] <= r_in[3] <= r_out[3]))\\n\\n\\n\\nif is_inside(w, b1) or is_inside(w, b2):\\n    print('NO')\\n    return\\n\\n\\nif b1[0] <= w[0] <= b1[2] and b1[0] <= w[2] <= b1[2]:\\n    if b1[1] <= w[1] <= b1[3]:\\n        w[1] = b1[3]\\n    elif b1[1] <= w[3] <= b1[3]:\\n        w[3] = b1[1]\\nelif b1[1] <= w[1] <= b1[3] and b1[1] <= w[3] <= b1[3]:\\n    if b1[0] <= w[0] <= b1[2]:\\n        w[0] = b1[2]\\n    elif b1[0] <= w[2] <= b1[2]:\\n        w[2] = b1[0]\\nelif b2[0] <= w[0] <= b2[2] and b2[0] <= w[2] <= b2[2]:\\n    if b2[1] <= w[1] <= b2[3]:\\n        w[1] = b2[3]\\n    elif b2[1] <= w[3] <= b2[3]:\\n        w[3] = b2[1]\\nelif b2[1] <= w[1] <= b2[3] and b2[1] <= w[3] <= b2[3]:\\n    if b2[0] <= w[0] <= b2[2]:\\n        w[0] = b2[2]\\n    elif b2[0] <= w[2] <= b2[2]:\\n        w[2] = b2[0]\\n\\nif is_inside(w, b1) or is_inside(w, b2):\\n    print('NO')\\n    return\\n\\nprint('YES')\\n\", \"x1,y1,x2,y2 = map(int, input().split())\\nx3,y3,x4,y4 = map(int, input().split())\\nx5,y5,x6,y6 = map(int, input().split())\\n\\nif y1 >= y3 and y2 <= y4 and x1 >= x3 and x2 <= x4:\\n    print(\\\"NO\\\")\\nelif y1 >= y5 and y2 <= y6 and x1 >= x5 and x2 <= x6:\\n    print(\\\"NO\\\")\\nelif x3 <= x1 and x4 >= x2 and x5 <= x1 and x6 >= x2 and y3 <= y1 <= y5 <=y4 <= y2 <= y6:\\n    print(\\\"NO\\\")\\nelif x3 <= x1 and x4 >= x2 and x5 <= x1 and x6 >= x2 and y5 <= y1 <= y3 <=y6 <= y2 <= y4:\\n    print(\\\"NO\\\")\\n\\nelif y3 <= y1 and y4 >= y2 and y5 <= y1 and y6 >= y2 and x3 <= x1 <= x5 <=x4 <= x2 <= x6:\\n    print(\\\"NO\\\")\\nelif y3 <= y1 and y4 >= y2 and y5 <= y1 and y6 >= y2 and x5 <= x1 <= x3 <=x6 <= x2 <= x4:\\n    print(\\\"NO\\\")\\n\\n\\n\\nelse:\\n    print(\\\"YES\\\")\", \"x1, y1, x2, y2 = map(int, input().split(' '))\\nx3, y3, x4, y4 = map(int, input().split(' '))\\nx5, y5, x6, y6 = map(int, input().split(' '))\\n\\nb = True\\nif x3 <= x1 and x2 <= x4 and x5 <= x1 and x2 <= x6:\\n    if y3 <= y1 and y2 <= y6 and y4 >= y5 or y5 <= y1 and y2 <= y4 and y6 >= y3:\\n        b = False\\nif y3 <= y1 and y2 <= y4 and y5 <= y1 and y2 <= y6:\\n    if x3 <= x1 and x2 <= x6 and x4 >= x5 or x5 <= x1 and x2 <= x4 and x6 >= x3:\\n        b = False\\nif x3 <= x1 and y3 <= y1 and x4 >= x2 and y4 >= y2:\\n    b = False\\nif x5 <= x1 and y5 <= y1 and x6 >= x2 and y6 >= y2:\\n    b = False\\n\\nprint(\\\"YES\\\") if b == True else print(\\\"NO\\\")\", \"x1, y1, x2, y2 = map(int, input().split())\\nx3, y3, x4, y4 = map(int, input().split())\\nx5, y5, x6, y6 = map(int, input().split())\\n\\ndef do_mask(x1, y1, x2, y2, x3, y3, x4, y4):\\n    # print(x1, y1, x2, y2, x3, y3, x4, y4)\\n    if x1 == -1:\\n        return -1, -1, -1, -1\\n    # zenbu-kakusu\\n    if x3 <= x1 and x2 <= x4 and y3 <= y1 and y2 <= y4:\\n        return -1, -1, -1, -1\\n\\n    # haba-kakusu\\n    if x3 <= x1 and x2 <= x4:\\n        if y3 <= y1 and y1 <= y4:\\n            y1 = y4\\n        if y3 <= y2 and y2 <= y4:\\n            y2 = y3\\n\\n    # yoko-kakusu\\n    if y3 <= y1 and y2 <= y4:\\n        if x3 <= x1 and x1 <= x4:\\n            x1 = x4\\n        if x3 <= x2 and x2 <= x4:\\n            x2 = x3\\n\\n    return x1, y1, x2, y2\\n\\nx1, y1, x2, y2 = do_mask(x1, y1, x2, y2, x3, y3, x4, y4)\\nx1, y1, x2, y2 = do_mask(x1, y1, x2, y2, x5, y5, x6, y6)\\nprint(\\\"NO\\\" if x1 == -1 else \\\"YES\\\")\", \"import sys\\n\\nsin = sys.stdin\\n\\nw = sin.readline().split()\\nw = [int(x) for x in w]\\nb1 = sin.readline().split()\\nb1 = [int(x) for x in b1]\\nb2 = sin.readline().split()\\nb2 = [int(x) for x in b2]\\n\\ndef reduce(w, b):\\n    #Fully covered:\\n    if b[0] <= w[0] and b[1] <= w[1] and b[2] >= w[2] and b[3] >= w[3]:\\n        return True\\n    if b[0] <= w[0] and b[1] <= w[1]:\\n        if b[2] >= w[2] and b[3] >= w[1]:\\n            w[1] = b[3]\\n        if b[3] >= w[3] and b[2] >= w[0]:\\n            w[0] = b[2]\\n    elif b[2] >= w[2] and b[3] >= w[3]:\\n        if b[1] <= w[1] and b[0] <= w[2]:\\n            w[2] = b[0]\\n        if b[0] <= w[0] and b[1] <= w[3]:\\n            w[3] = b[1]\\n\\nflag = False\\nif reduce(w, b1):\\n    print(\\\"NO\\\")\\n    flag = True\\nelif not flag and reduce(w, b2):\\n    print(\\\"NO\\\")\\n    flag = True\\nif not flag:\\n    print(\\\"YES\\\")\", \"x1, y1, x2, y2 = map(int, input().split())\\nx3, y3, x4, y4 = map(int, input().split())\\nx5, y5, x6, y6 = map(int, input().split())\\nif (y1 > y4 or y1 < y3 or x1 > x4 or x1 < x3) and (y1 < y5 or y1 > y6 or x1 < x5 or x1 > x6):\\n    print('YES')\\nelif (y2 > y4 or y2 < y3 or x4 < x2 or x2 < x3) and (y2 < y5 or y2 > y6 or x2 < x5 or x2 > x6):\\n    print('YES')\\nelif (y2 > y4 or y2 < y3 or x4 < x1 or x1 < x3) and (y2 < y5 or y2 > y6 or x1 < x5 or x1 > x6):\\n    print(\\\"YES\\\")\\nelif (y1 > y4 or y1 < y3 or x4 < x2 or x2 < x3) and (y1 < y5 or y1 > y6 or x2 < x5 or x2 > x6):\\n    print(\\\"YES\\\")\\nelif x5 > x4 and x1 < x5 < x2:\\n    print(\\\"YES\\\")\\nelif x6 < x3 and x1 < x6 < x2:\\n    print(\\\"YES\\\")\\nelif y6 < y3 and y1 < y6 < y2:\\n    print('YES')\\nelif y5 > y4 and y1 < y5 < y2:\\n    print('YES')\\nelse:\\n    print('NO')\", \"ll = lambda:list(map(int, input().split()))\\ntestcases = 1\\n# testcases = ll()\\nfor _ in range(testcases):\\n\\t[x1,y1,x2,y2] = ll()\\n\\t[x3,y3,x4,y4] = ll()\\n\\t[x5,y5,x6,y6] = ll()\\n\\tdef lies1(x0,y0):\\n\\t\\treturn x0>=x3 and x0<=x4 and y0>=y3 and y0<=y4\\n\\tdef lies2(x0,y0):\\n\\t\\t\\n\\t\\treturn x0>=x5 and x0<=x6 and y0>=y5 and y0<=y6\\n\\tdef lies(x0,y0):\\n\\t\\treturn lies1(x0,y0) or lies2(x0,y0)\\n\\n\\tap = [[x1,y1],[x2,y2],[x1,y2],[x2,y1]]\\n\\tok = 1\\n\\tfor x in ap:\\n\\t\\tif not (lies(x[0],x[1])):\\n\\t\\t\\tok = 0\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tif x1 >=max(x3,x5) and x2 <=min(x4,x6):\\n\\t\\t\\tif (y1<=y6 and y6<y3 and y3<=y2) or ((y1<=y4 and y4<y5 and y5<=y2)):\\n\\t\\t\\t\\tok = 0\\n\\t\\telse:\\n\\t\\t\\tif (x1<=x6 and x6<x3 and x3<=x2) or ((x1<=x4 and x4<x5 and x5<=x2)):\\n\\t\\t\\t\\tok = 0\\n\\n\\tif(ok):\\n\\t\\tprint(\\\"NO\\\")\\n\\telse:\\n\\t\\tprint(\\\"YES\\\")\\n\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nx1,y1,x2,y2=list(map(int,input().split()))\\nx3,y3,x4,y4=list(map(int,input().split()))\\nx5,y5,x6,y6=list(map(int,input().split()))\\n\\ndef cut(x1,y1,x2,y2,x3,y3,x4,y4):\\n    if x3<=x1 and x2<=x4:\\n        if y3<=y1<=y4:\\n            y1=min(y2,y4)\\n\\n        if y3<=y2<=y4:\\n            y2=max(y1,y3)\\n\\n    if y3<=y1 and y2<=y4:\\n        if x3<=x1<=x4:\\n            x1=min(x2,x4)\\n\\n        if x3<=x2<=x4:\\n            x2=max(x1,x3)\\n\\n    return x1,y1,x2,y2\\n\\nx1,y1,x2,y2=cut(x1,y1,x2,y2,x3,y3,x4,y4)\\n\\n#print(x1,y1,x2,y2)\\n\\nx1,y1,x2,y2=cut(x1,y1,x2,y2,x5,y5,x6,y6)\\n\\n#print(x1,y1,x2,y2)\\n\\nif x1==x2 or y1==y2:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n\\n    \\n\", \"x1,y1,x2,y2 = list(map(int, input().split()))\\nx3,y3,x4,y4 = list(map(int, input().split()))\\nx5,y5,x6,y6 = list(map(int, input().split()))\\nf = False\\n\\nif x3 <= x1 <= x4 and x3 <= x2 <= x4:\\n    if y3 <= y1 <= y4 and y3 <= y2 <= y4:\\n        f = True\\n    elif y1 < y3 <= y2 <= y4:\\n        y2 = y3\\n    elif y3 <= y1 <= y4 < y2:\\n        y1 = y4\\n\\nif y3 <= y1 <= y4 and y3 <= y2 <= y4:\\n    if x3 <= x1 <= x4 and x3 <= x2 <= x4:\\n        f = True\\n    elif x1 < x3 <= x2 <= x4:\\n        x2 = x3\\n    elif x3 <= x1 <= x4 < x2:\\n        x1 = x4    \\n        \\nif x5 <= x1 <= x6 and x5 <= x2 <= x6:\\n    if y5 <= y1 <= y6 and y5 <= y2 <= y6:\\n        f = True    \\n    \\nprint('NO' if f else 'YES')\\n\", \"a=[*map(int,input().split())]\\nb=[*map(int,input().split())]\\nc=[*map(int,input().split())]\\n\\nab=[0]*4\\nab[0] = max(a[0],b[0])\\nab[2] = min(a[2],b[2])\\nab[1] = max(a[1],b[1])\\nab[3] = min(a[3],b[3])\\n\\n# print(ab)\\nif ab==a:\\n    print(\\\"NO\\\")\\n    return\\n\\nac=[0]*4\\nac[0] = max(a[0],c[0])\\nac[2] = min(a[2],c[2])\\nac[1] = max(a[1],c[1])\\nac[3] = min(a[3],c[3])\\n\\n# print(ac)\\nif ac==a:\\n    print(\\\"NO\\\")\\n    return\\n\\nif ab[0]>=ab[2] or ab[1]>=ab[3] or ac[0]>=ac[2] or ac[1]>=ac[3]:\\n    print(\\\"YES\\\")\\n    return\\n\\nabac=[0]*4\\nabac[0] = max(ab[0],ac[0])\\nabac[2] = min(ab[2],ac[2])\\nabac[1] = max(ab[1],ac[1])\\nabac[3] = min(ab[3],ac[3])\\n\\noo=(ab[2]-ab[0])*(ab[3]-ab[1])+(ac[2]-ac[0])*(ac[3]-ac[1])\\nif abac[0]>=abac[2] or abac[1]>=abac[3]:\\n    oo-=0\\nelse:\\n    oo-=(abac[2]-abac[0])*(abac[3]-abac[1])\\n\\nif oo>=(a[2]-a[0])*(a[3]-a[1]):\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\", \"import itertools\\n\\nclass Rectangle:\\n    def intersection(self, other):\\n        a, b = self, other\\n        x1 = max(min(a.x1, a.x2), min(b.x1, b.x2))\\n        y1 = max(min(a.y1, a.y2), min(b.y1, b.y2))\\n        x2 = min(max(a.x1, a.x2), max(b.x1, b.x2))\\n        y2 = min(max(a.y1, a.y2), max(b.y1, b.y2))\\n        if x1 < x2 and y1 < y2:\\n            return type(self)(x1, y1, x2, y2)\\n    __and__ = intersection\\n\\n    def difference(self, other):\\n        inter = self & other\\n        if not inter:\\n            yield self\\n            return\\n        xs = {self.x1, self.x2}\\n        ys = {self.y1, self.y2}\\n        if self.x1 < other.x1 < self.x2: xs.add(other.x1)\\n        if self.x1 < other.x2 < self.x2: xs.add(other.x2)\\n        if self.y1 < other.y1 < self.y2: ys.add(other.y1)\\n        if self.y1 < other.y2 < self.y2: ys.add(other.y2)\\n        for (x1, x2), (y1, y2) in itertools.product(\\n            pairwise(sorted(xs)), pairwise(sorted(ys))\\n        ):\\n            rect = type(self)(x1, y1, x2, y2)\\n            if rect != inter:\\n                yield rect\\n    __sub__ = difference\\n\\n    def __init__(self, x1, y1, x2, y2):\\n        self.x1, self.y1, self.x2, self.y2 = x1, y1, x2, y2\\n\\n    def __iter__(self):\\n        yield self.x1\\n        yield self.y1\\n        yield self.x2\\n        yield self.y2\\n\\n    def __eq__(self, other):\\n        return isinstance(other, Rectangle) and tuple(self) == tuple(other)\\n    def __ne__(self, other):\\n        return not (self == other)\\n\\n\\n\\ndef pairwise(iterable):\\n    a, b = itertools.tee(iterable)\\n    next(b, None)\\n    return list(zip(a, b))\\n\\n\\nfirst_rect = Rectangle(*list([int(x) for x in input().split(' ')]))\\nsecond_rect = Rectangle(*list([int(x) for x in input().split(' ')]))\\nthird_rect = Rectangle(*list([int(x) for x in input().split(' ')]))\\n\\nfound = False\\ndiff1 = first_rect - second_rect\\nfor elem in diff1:\\n    diff2 = elem - third_rect\\n    for elem2 in diff2:\\n        if elem2:\\n            found = True\\n\\nprint('NO' if not found else 'YES')\\n\", \"[x1, y1, x2, y2] = [int(x) for x in input().split()]\\n[x3, y3, x4, y4] = [int(x) for x in input().split()]\\n[x5, y5, x6, y6] = [int(x) for x in input().split()]\\n\\nno = 'NO'\\nyes = 'YES'\\n\\ndef ries(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6):\\n    if x3<=x1 and y3<=y1 and x4>=x2 and y4>=y2:\\n        return(no)\\n    if x5<=x1 and y5<=y1 and x6>=x2 and y6>=y2:\\n        return(no)\\n    if x3<=x1 and y3<=y1 and x4>=x5 and y4>=y2 and y5<=y1 and x6>=x2 and y6>=y2:\\n        return(no)\\n    if x5<=x1 and y5<=y1 and x6>=x3 and y6>=y2 and y3<=y1 and x4>=x2 and y4>=y2:\\n        return(no)\\n    if x3<=x1 and y3<=y1 and x4>=x2 and y4>=y5 and x5<=x1 and x6>=x2 and y6>=y2:\\n        return(no)\\n    if x5<=x1 and y5<=y1 and x6>=x2 and y6>=y3 and x3<=x1 and x4>=x2 and y4>=y2:\\n        return(no)\\n    return(yes)\\n\\nprint(ries(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6))\\n\\n\", \"a = [int(x) for x in input().split()]\\nb = [int(x) for x in input().split()]\\nc = [int(x) for x in input().split()]\\nflag = 0\\n\\nif b[0] <= a[0] and b[1] <= a[1] and a[2] <= b[2] and a[3] <= b[3]:\\n    flag = 1\\nelif c[0] <= a[0] and c[1] <= a[1] and a[2] <= c[2] and a[3] <= c[3]:\\n    flag = 1\\nelse:\\n    if b[0] <= a[0] and b[1] <= a[1]:\\n        if a[2] <= c[2] and a[3] <= c[3]:\\n            if a[3] <= b[3] and c[1] <= a[1] and c[0] <= b[2]:\\n                flag = 1\\n            elif a[2] <= b[2] and c[0] <= a[0] and c[1] <= b[3]:\\n                flag = 1\\n    elif c[0] <= a[0] and c[1] <= a[1]:\\n        if a[2] <= b[2] and a[3] <= b[3]:\\n            if a[3] <= c[3] and b[1] <= a[1] and b[0] <= c[2]:\\n                flag = 1\\n            elif a[2] <= c[2] and b[0] <= a[0] and b[1] <= c[3]:\\n                flag = 1\\n\\nprint(\\\"YES\\\" if (flag == 0) else \\\"NO\\\")\", \"def intersect_area(x1, y1, x2, y2, x3, y3, x4, y4):\\n    x_overlap1 = min(x2, x4) - max(x1, x3)\\n    y_overlap1 = min(y2, y4) - max(y1, y3)\\n    if x_overlap1 > 0 and y_overlap1 > 0:\\n        return x_overlap1 * y_overlap1\\n    return 0\\n\\n\\nx1, y1, x2, y2 = map(int, input().split())\\nx3, y3, x4, y4 = map(int, input().split())\\nx5, y5, x6, y6 = map(int, input().split())\\na = intersect_area(x1, y1, x2, y2, x3, y3, x4, y4)\\nb = intersect_area(x1, y1, x2, y2, x5, y5, x6, y6)\\nc = intersect_area(x1, y1, x2, y2, max(x3, x5), max(y3, y5), min(x4, x6), min(y4, y6))\\narea = (x2 - x1) * (y2 - y1)\\nif area - (a + b - c) > 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"i1 = input('').split(' ')\\nx1 = int(i1[0])\\ny1 = int(i1[1])\\nx2 = int(i1[2])\\ny2 = int(i1[3])\\ni1 = input('').split(' ')\\nx3 = int(i1[0])\\ny3 = int(i1[1])\\nx4 = int(i1[2])\\ny4 = int(i1[3])\\ni1 = input('').split(' ')\\nx5 = int(i1[0])\\ny5 = int(i1[1])\\nx6 = int(i1[2])\\ny6 = int(i1[3])\\n\\ndef chk(x1,y1,x2,y2,x3,y3):\\n    if(x3 <= x2 and x3 >= x1 and y3 >= y1 and y3 <= y2):\\n        return True\\n    else:\\n        return False\\n\\nr11 = chk(x3,y3,x4,y4,x1,y1)\\nr12 = chk(x5,y5,x6,y6,x1,y1)\\nr21 = chk(x3,y3,x4,y4,x2,y1)\\nr22 = chk(x5,y5,x6,y6,x2,y1)\\nr31 = chk(x3,y3,x4,y4,x1,y2)\\nr32 = chk(x5,y5,x6,y6,x1,y2)\\nr41 = chk(x3,y3,x4,y4,x2,y2)\\nr42 = chk(x5,y5,x6,y6,x2,y2)\\n\\ndef car(x1,y1,x2,y2,x3,y3,x4,y4):\\n    yy1 = max(y1,y3)\\n    yy2 = min(y2,y4)\\n    xx1 = max(x1,x3)\\n    xx2 = min(x2,x4)\\n    area = (abs(yy1 - yy2))*(abs(xx1 - xx2))\\n    return area\\n    \\nif((r11 or r12) and (r21 or r22) and (r31 or r32) and (r41 or r42)):\\n    a1 = car(x1,y1,x2,y2,x3,y3,x4,y4)\\n    a2 = car(x1,y1,x2,y2,x5,y5,x6,y6)\\n    ta = a1 + a2\\n    if(ta >= (x2-x1)*(y2-y1)):\\n        print('NO')\\n    else:\\n        print('YES')\\nelse:\\n    print('YES')\\n\", \"def area(xmin, ymin, xmax, ymax):\\n    dx = xmax - xmin\\n    dy = ymax - ymin\\n    if (dx >= 0) and (dy >= 0):\\n        return dx * dy\\n    else:\\n        return 0\\n\\ndef intersect(a_xmin, a_ymin, a_xmax, a_ymax,\\n            b_xmin, b_ymin, b_xmax, b_ymax):\\n    xmax, xmin = min(a_xmax, b_xmax), max(a_xmin, b_xmin)\\n    ymax, ymin = min(a_ymax, b_ymax), max(a_ymin, b_ymin)\\n    return xmin, ymin, xmax, ymax    \\n\\na_xmin, a_ymin, a_xmax, a_ymax = list(map(int, input().split()))\\nb_xmin, b_ymin, b_xmax, b_ymax = list(map(int, input().split()))\\nc_xmin, c_ymin, c_xmax, c_ymax = list(map(int, input().split()))\\n\\ns1 = (a_xmax - a_xmin) * (a_ymax - a_ymin)\\ns12_xmin, s12_ymin, s12_xmax, s12_ymax = intersect(\\n    a_xmin, a_ymin, a_xmax, a_ymax,\\n    b_xmin, b_ymin, b_xmax, b_ymax\\n)\\ns12 = area(s12_xmin, s12_ymin, s12_xmax, s12_ymax)\\n\\ns13_xmin, s13_ymin, s13_xmax, s13_ymax = intersect(\\n    a_xmin, a_ymin, a_xmax, a_ymax,\\n    c_xmin, c_ymin, c_xmax, c_ymax\\n)\\ns13 = area(s13_xmin, s13_ymin, s13_xmax, s13_ymax)\\n\\n\\ns23_xmin, s23_ymin, s23_xmax, s23_ymax = intersect(\\n    b_xmin, b_ymin, b_xmax, b_ymax,\\n    c_xmin, c_ymin, c_xmax, c_ymax\\n)\\ns23 = area(s23_xmin, s23_ymin, s23_xmax, s23_ymax)\\n\\ns123_xmin, s123_ymin, s123_xmax, s123_ymax = intersect(\\n    s13_xmin, s13_ymin, s13_xmax, s13_ymax,\\n    s23_xmin, s23_ymin, s23_xmax, s23_ymax\\n)\\ns123 = area(s123_xmin, s123_ymin, s123_xmax, s123_ymax)\\n\\nprint(\\\"YES\\\" if s1 > s12 + s13 - s123 else \\\"NO\\\")\", \"x1,y1,x2,y2=list(map(int,input().split()))\\nx3,y3,x4,y4=list(map(int,input().split()))\\nx5,y5,x6,y6=list(map(int,input().split()))\\nz=0\\nif x3<=x1 and x4>=x2 and y3<=y1 and y4>=y2:\\n    z=1\\nif x5<=x1 and x6>=x2 and y5<=y1 and y6>=y2:\\n    z=1\\nif y3>y5:\\n    if y3<=y6 and y4>=y2 and y5<=y1:\\n        if x3<=x1 and x4>=x2 and x5<=x1 and x6>=x2:\\n            z=1\\nelse:\\n    y3,y5=y5,y3\\n    y6,y4=y4,y6\\n    if y3<=y6 and y4>=y2 and y5<=y1:\\n        if x3<=x1 and x4>=x2 and x5<=x1 and x6>=x2:\\n            z=1\\ny3,y5=y5,y3\\ny6,y4=y4,y6\\nif x3<x5:\\n    if x3<=x1 and x4>=x5 and x6>=x2:\\n        if y3<=y1 and y4>=y2 and y5<=y1 and y6>=y2:\\n            z=1\\nelse:\\n    x3,x5=x5,x3\\n    x6,x4=x4,x6\\n    if x3<=x1 and x4>=x5 and x6>=x2:\\n        if y3<=y1 and y4>=y2 and y5<=y1 and y6>=y2:\\n            z=1\\nif z==1:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n    \\n\", \"x=[]\\n\\nfor i in range(3):\\n    a=list(map(int,input().split()))\\n    x.append(a)\\n\\ndef ok(a,b,n):\\n    nonlocal x\\n    return x[n][0]<=a<=x[n][2] and x[n][1]<=b<=x[n][3]\\n\\n#a[0][0] a[0][1] : a[0][0] a[0][3] : a\\n\\ndef kol(n):\\n    nonlocal x\\n    t=0\\n    x1=x[0][0]\\n    y1=x[0][1]\\n    x2=x[0][2]\\n    y2=x[0][3]\\n    if ok(x1,y1,n): t+=1\\n    if ok(x1,y2,n): t+=1\\n    if ok(x2,y1,n): t+=1\\n    if ok(x2,y2,n): t+=1\\n    return t\\nk1=kol(1)\\nk2=kol(2)\\n\\ndef ooo():\\n    x1=x[0][0]\\n    y1=x[0][1]\\n    x2=x[0][2]\\n    y2=x[0][3]\\n    t=True\\n    t=t and (ok(x1,y1,1) or ok(x1,y1,2))\\n    t=t and (ok(x1,y2,1) or ok(x1,y2,2))\\n    t=t and (ok(x2,y1,1) or ok(x2,y1,2))\\n    t=t and (ok(x2,y2,1) or ok(x2,y2,2))\\n    return t\\n\\n    \\nif k1==4 or k2==4:\\n    print('NO')\\nelif k1+k2<4:\\n    print('YES')\\nelif not ooo():\\n    print('YES')\\nelse:\\n    x1=x[0][0]\\n    y1=x[0][1]\\n    x2=x[0][2]\\n    y2=x[0][3]\\n    if ok(x1,y1,2):\\n        x[1],x[2]=x[2],x[1]\\n    if ok(x2,y1,1):\\n        if x[1][3]>=x[2][1]:\\n            print('NO')\\n        else: print('YES')\\n    else:\\n        if x[1][2]>=x[2][0]:\\n            print('NO')\\n        else: print('YES')\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n\",\n    \"3 3 7 5\\n0 0 4 6\\n0 0 7 4\\n\",\n    \"5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n\",\n    \"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n\",\n    \"50 100 100000 99000\\n13 4654 99999 1000000\\n0 0 1000000 45653\\n\",\n    \"0 0 1000000 1000000\\n0 0 1000000 999999\\n0 0 999999 1000000\\n\",\n    \"0 0 1000000 1000000\\n1 0 1000000 1000000\\n0 0 1000000 999999\\n\",\n    \"128715 414887 594910 716176\\n443190 112845 919607 589041\\n76564 385268 123669 951664\\n\",\n    \"347722 718484 584813 736820\\n280059 317406 997137 588815\\n388486 281361 399827 854715\\n\",\n    \"0 0 1000000 1000000\\n0 0 999999 1000000\\n0 1 1000000 1000000\\n\",\n    \"50 100 100000 99000\\n13 4654 999999 1000000\\n0 0 1000000 45654\\n\",\n    \"50 100 100000 99000\\n0 0 1 1\\n999999 999999 1000000 1000000\\n\",\n    \"50 100 100000 99000\\n0 0 100111 98999\\n49 65999 100000 99431\\n\",\n    \"50 100 100000 99000\\n0 0 99999 1000000\\n51 0 100123 99321\\n\",\n    \"10 10 11 11\\n10 10 11 11\\n10 10 11 11\\n\",\n    \"50 100 100000 99000\\n49 99 1000000 99000\\n100 100 200 200\\n\",\n    \"50 100 100000 99000\\n0 0 54443 1000000\\n54443 3 1000000 99001\\n\",\n    \"50 100 100000 99000\\n0 0 54443 1000000\\n54444 3 1000000 99001\\n\",\n    \"0 0 1000000 1000000\\n1 0 1000000 1000000\\n0 1 1000000 1000000\\n\",\n    \"5 2 10 5\\n8 1 11 7\\n3 1 7 6\\n\",\n    \"0 0 3 3\\n5 5 6 6\\n0 0 4 4\\n\",\n    \"0 0 4 4\\n0 0 4 2\\n0 3 4 4\\n\",\n    \"72 55 101 102\\n62 86 138 120\\n69 42 114 59\\n\",\n    \"20928 630 21684 2628\\n5490 5362 23490 19143\\n17369 1636 25838 2841\\n\",\n    \"2 6 8 8\\n1 2 3 3\\n1 3 10 10\\n\",\n    \"0 2 4 3\\n1 1 4 5\\n0 2 3 3\\n\",\n    \"5 1 9 3\\n0 2 1 9\\n4 1 10 3\\n\",\n    \"62 28 73 92\\n106 65 119 152\\n77 52 128 99\\n\",\n    \"1 7 2 8\\n0 0 1 1\\n1 4 2 9\\n\",\n    \"44 17 46 92\\n43 14 58 101\\n65 36 110 124\\n\",\n    \"0 4 2 7\\n4 3 7 8\\n6 0 8 1\\n\",\n    \"6 6 7 9\\n0 1 3 7\\n5 6 7 9\\n\",\n    \"44 63 82 114\\n76 46 95 147\\n41 63 138 146\\n\",\n    \"1 1 3 3\\n1 1 3 2\\n1 2 3 3\\n\",\n    \"100 0 110 10\\n99 5 111 11\\n99 1 111 6\\n\",\n    \"5 5 9 9\\n0 0 4 4\\n5 5 9 9\\n\",\n    \"33 47 44 78\\n76 71 162 159\\n3 28 81 101\\n\",\n    \"6 6 10 8\\n10 3 16 9\\n2 3 7 11\\n\",\n    \"96 64 120 82\\n102 1 135 107\\n99 67 111 93\\n\",\n    \"1 2 3 4\\n1 1 4 4\\n5 5 9 9\\n\",\n    \"386262 760032 542069 772227\\n911675 754955 999646 829927\\n378348 689243 743180 973455\\n\",\n    \"63 8 84 16\\n13 30 15 52\\n25 7 84 19\\n\",\n    \"623181 608349 717362 757936\\n654173 174442 707580 812338\\n649542 255816 917899 810891\\n\",\n    \"10 62 11 94\\n8 57 29 86\\n9 66 45 89\\n\",\n    \"1 3 6 7\\n2 2 4 8\\n3 1 5 9\\n\",\n    \"40 40 61 55\\n18 33 83 96\\n52 20 53 40\\n\",\n    \"2 34 5 38\\n64 51 79 65\\n51 52 79 84\\n\",\n    \"1 4 9 9\\n1 1 10 2\\n1 3 9 9\\n\",\n    \"6 33 79 56\\n18 18 93 78\\n39 10 58 84\\n\",\n    \"28775 15542 38394 20166\\n26125 12713 57946 30999\\n2705 8834 5217 12154\\n\",\n    \"25313 25296 30476 31203\\n2593 15252 22456 19837\\n19859 22944 31515 50105\\n\",\n    \"1 4 3 8\\n5 2 7 6\\n1 4 3 9\\n\",\n    \"10 10 20 20\\n9 9 21 11\\n9 19 21 21\\n\",\n    \"3 0 6 7\\n3 0 8 4\\n3 1 10 5\\n\",\n    \"12076 20776 30893 22819\\n20138 19000 30107 29254\\n3726 20088 28731 46619\\n\",\n    \"3 0 4 1\\n6 6 10 9\\n3 0 4 8\\n\",\n    \"30228 19166 31396 28305\\n17488 91 44825 10139\\n14405 17644 40771 38925\\n\",\n    \"0 1 1 7\\n6 1 10 5\\n0 1 1 8\\n\",\n    \"11360 21479 13661 21563\\n8924 9481 21073 27713\\n16778 27004 23110 32529\\n\",\n    \"2 2 6 3\\n1 0 3 2\\n2 2 6 4\\n\",\n    \"2 7 3 9\\n0 2 1 6\\n1 3 3 9\\n\",\n    \"25739 32688 44216 35348\\n29800 22866 55114 54031\\n17721 29321 32956 40913\\n\",\n    \"0 0 5 1\\n0 0 7 1\\n7 5 9 6\\n\",\n    \"2 4 3 10\\n2 0 5 1\\n0 7 3 10\\n\",\n    \"3 3 4 4\\n0 0 1 1\\n3 3 4 4\\n\",\n    \"1 2 2 8\\n5 0 8 1\\n0 1 4 9\\n\",\n    \"2 4 7 5\\n1 4 7 10\\n0 2 1 3\\n\",\n    \"9 9 10 16\\n9 5 15 8\\n9 10 19 16\\n\",\n    \"4 8 13 9\\n8 8 14 16\\n2 2 8 11\\n\",\n    \"2 0 6 8\\n2 3 7 5\\n2 0 8 6\\n\",\n    \"9 5 13 7\\n8 5 16 7\\n4 2 5 12\\n\",\n    \"1 0 2 7\\n1 0 2 3\\n4 4 10 7\\n\",\n    \"0 0 3 3\\n0 0 3 1\\n0 2 3 3\\n\",\n    \"8 8 10 10\\n10 4 14 11\\n2 4 5 13\\n\",\n    \"4 7 8 8\\n8 6 15 11\\n4 1 7 10\\n\",\n    \"5 8 8 10\\n1 8 9 18\\n6 2 15 4\\n\",\n    \"676584 172869 696986 939949\\n217531 247380 771662 973703\\n630670 592931 929942 967883\\n\",\n    \"5 4 9 12\\n2 9 11 17\\n3 3 9 7\\n\",\n    \"0 1 1 2\\n3 3 4 4\\n3 4 4 5\\n\",\n    \"7 5 8 10\\n5 3 8 12\\n6 2 9 9\\n\",\n    \"1 4 3 6\\n3 0 6 2\\n3 6 6 10\\n\",\n    \"0 5 1 7\\n5 0 7 9\\n0 1 1 7\\n\",\n    \"4 4 5 6\\n2 1 10 11\\n1 7 9 15\\n\",\n    \"384066 916918 765119 935891\\n222262 945490 915577 995511\\n310286 10123 921636 688959\\n\",\n    \"10 9 15 11\\n10 7 18 13\\n5 9 8 17\\n\",\n    \"0 0 64000 67200\\n0 0 11392 512\\n200000 200000 200001 200001\\n\",\n    \"2 2 3 10\\n8 1 18 10\\n5 2 9 7\\n\",\n    \"41 37 49 42\\n22 27 27 53\\n40 27 73 61\\n\",\n    \"17 12 20 15\\n8 7 19 29\\n0 11 12 15\\n\",\n    \"15 14 17 15\\n0 0 8 1\\n9 7 18 19\\n\",\n    \"2 3 4 4\\n26 3 31 39\\n29 2 30 21\\n\",\n    \"6 6 7 15\\n14 10 19 35\\n3 2 15 11\\n\",\n    \"3 2 5 10\\n2 1 10 4\\n3 8 9 12\\n\",\n    \"2459 6365 5308 15923\\n1847 22052 15585 27089\\n336 308 27773 18664\\n\",\n    \"5 5 7 7\\n0 0 2 9\\n3 3 9 9\\n\",\n    \"4 12 20 15\\n5 11 26 21\\n14 8 18 18\\n\",\n    \"11488 12686 14861 25322\\n263 9355 23103 24765\\n3524 20940 17452 29689\\n\",\n    \"1 2 2 3\\n1 0 2 1\\n1 2 2 5\\n\",\n    \"2 0 3 2\\n9 19 13 23\\n1 0 4 2\\n\",\n    \"488689 537034 554397 658289\\n966606 109329 985284 598401\\n342151 126230 893625 984316\\n\",\n    \"10 22 17 30\\n0 6 10 14\\n7 6 22 37\\n\",\n    \"0 0 1 1\\n12 15 19 18\\n10 9 18 14\\n\",\n    \"26 19 31 21\\n0 5 1 6\\n3 0 4 3\\n\",\n    \"7 1 8 3\\n0 0 4 2\\n2 1 18 21\\n\",\n    \"20 10 21 35\\n13 11 23 15\\n4 8 14 35\\n\",\n    \"1 6 8 7\\n2 4 19 36\\n1 2 3 8\\n\",\n    \"1 1 3 3\\n1 2 3 4\\n1 5 3 6\\n\",\n    \"0 0 3 4\\n0 3 3 4\\n0 0 3 2\\n\",\n    \"67 37 107 67\\n3 11 140 72\\n77 82 192 108\\n\",\n    \"18819 25865 29363 26625\\n18424 24009 23338 30333\\n14928 4422 23749 31969\\n\",\n    \"11326 10029 21783 23590\\n3523 10197 31181 30973\\n25733 4494 31445 24783\\n\",\n    \"2975 7327 23972 7416\\n9620 220 31879 22310\\n2975 3099 14074 10669\\n\",\n    \"2 2 3 3\\n3 3 4 4\\n2 2 3 3\\n\",\n    \"14 5 18 17\\n9 8 22 25\\n12 16 27 35\\n\",\n    \"305226 115092 351397 858801\\n179907 128966 724370 944812\\n78823 602023 461809 960582\\n\",\n    \"9924 9975 22878 16516\\n12808 6652 28411 23264\\n8204 388 14798 5070\\n\",\n    \"8 14 11 37\\n8 18 21 26\\n6 11 18 34\\n\",\n    \"4 4 5 5\\n0 0 2 6\\n3 3 6 6\\n\",\n    \"5 0 7 2\\n1 0 3 2\\n0 7 10 10\\n\",\n    \"489631 107603 533004 219679\\n180507 27927 660647 671315\\n66302 622560 250301 900772\\n\",\n    \"1 1 5 5\\n1 1 5 3\\n1 4 5 5\\n\",\n    \"21221 4966 23465 12117\\n10451 1226 31617 12028\\n3206 8163 28643 29817\\n\",\n    \"457749 221391 481637 901029\\n427621 205962 972764 927169\\n11595 580533 366640 796529\\n\",\n    \"565785 704313 907569 768345\\n732991 292147 948744 894422\\n249829 311996 592862 996946\\n\",\n    \"4 3 6 7\\n0 5 2 8\\n3 2 8 8\\n\",\n    \"3 1 4 7\\n3 1 7 2\\n0 4 10 9\\n\",\n    \"1 8 5 9\\n1 1 2 3\\n2 0 4 1\\n\",\n    \"6 4 8 5\\n1 0 2 1\\n1 0 4 2\\n\",\n    \"4 6 6 7\\n1 4 9 5\\n4 5 6 10\\n\",\n    \"17091 4911 18849 17274\\n13934 15726 22311 21493\\n2884 3776 29047 15726\\n\",\n    \"8 8 9 9\\n7 0 8 9\\n1 6 8 9\\n\",\n    \"0 7 1 8\\n0 6 3 8\\n6 6 8 8\\n\",\n    \"3 8 10 10\\n2 0 10 1\\n4 8 10 10\\n\",\n    \"8656 18613 22899 20400\\n4553 218 16704 19833\\n11001 13673 30179 21141\\n\"\n  ],\n  \"outputs\": [\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1216/C", "starter_code": ""}
{"id": 4006, "question": "Let's denote a function $f(x)$ in such a way: we add $1$ to $x$, then, while there is at least one trailing zero in the resulting number, we remove that zero. For example,   $f(599) = 6$: $599 + 1 = 600 \\rightarrow 60 \\rightarrow 6$;  $f(7) = 8$: $7 + 1 = 8$;  $f(9) = 1$: $9 + 1 = 10 \\rightarrow 1$;  $f(10099) = 101$: $10099 + 1 = 10100 \\rightarrow 1010 \\rightarrow 101$. \n\nWe say that some number $y$ is reachable from $x$ if we can apply function $f$ to $x$ some (possibly zero) times so that we get $y$ as a result. For example, $102$ is reachable from $10098$ because $f(f(f(10098))) = f(f(10099)) = f(101) = 102$; and any number is reachable from itself.\n\nYou are given a number $n$; your task is to count how many different numbers are reachable from $n$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: the number of different numbers that are reachable from $n$.\n\n\n-----Examples-----\nInput\n1098\n\nOutput\n20\n\nInput\n10\n\nOutput\n19\n\n\n\n-----Note-----\n\nThe numbers that are reachable from $1098$ are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.", "solutions": "[\"darling = {}\\nx = int(input())\\nans = 0\\nwhile (x not in darling):\\n\\tdarling[x] = 1\\n\\tans += 1\\n\\tx += 1\\n\\twhile (x % 10 == 0):\\n\\t\\tx /= 10\\n\\nprint(ans)\", \"x = int(input())\\ndef f(x):\\n    x += 1\\n    while x % 10 == 0:\\n        x //= 10\\n    return x\\nd = set()\\nwhile not x in d:\\n    d.add(x)\\n    x = f(x)\\nprint(len(d))\", \"def main():\\n    s = set()\\n    n = int(input())\\n    def f(x):\\n        x += 1\\n        while not x % 10:\\n            x //= 10\\n        return x\\n    while n not in s:\\n        s.add(n)\\n        n = f(n)\\n    print(len(s))\\n    return 0\\n\\nmain()\", \"# AC\\nimport sys\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = self.next_line()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_line(self, _map=str):\\n        return list(map(_map, sys.stdin.readline().split()))\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def solve(self):\\n        n = self.next_int()\\n        rs = {}\\n        while n not in rs:\\n            rs[n] = n\\n            n += 1\\n            while n % 10 == 0:\\n                n /= 10\\n        print(len(rs))\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\", \"x = int(input())\\n\\nseen = set()\\n\\ndef f(x):\\n\\tx += 1\\n\\twhile x % 10 == 0:\\n\\t\\tx  = x // 10\\n\\treturn x\\n\\n\\nwhile x not in seen:\\n\\tseen.add(x)\\n\\tx = f(x)\\n\\nprint(len(seen))\", \"from collections import defaultdict\\nn = int(input())\\nd = defaultdict(int)\\nc = 1\\nd[n] = 1\\nwhile True:\\n    n = n+1\\n    while n%10==0:\\n        n= n/10\\n    \\n    if d[n]==1:\\n        break\\n    else:\\n        d[n]=1\\n        c+=1\\n\\nprint(c)\", \"n = int(input())\\ns = set()\\nx = n\\ns.add(x)\\nans = 0\\nwhile 1:\\n    x = x + 1\\n    while x % 10 == 0:\\n        x //= 10\\n\\n    if x in s:\\n        break\\n    else:\\n        s.add(x)\\n        ans += 1\\nprint(len(s))\\n\", \"n = int(input())\\nnum = 9\\nwhile len(str(n)) != 1:\\n    num += 1\\n    n += 1\\n    while n % 10 == 0:\\n        n //= 10\\n    \\nprint(num)\\n\", \"n = int(input())\\ndoneNums = []\\nwhile n not in doneNums:\\n    doneNums.append(n)\\n    n += 1\\n    while n % 10 == 0:\\n        n/=10\\nprint(len(doneNums))\", \"import sys\\n\\ninput = sys.stdin.readline\\n\\nn = int(input())\\n\\nvisited = set()\\n\\ndef f(n):\\n  n = n+1\\n  while (n % 10 == 0):\\n    n /= 10\\n  return n\\n\\nans = 0\\n\\nwhile f(n) not in visited:\\n  visited.add(n)\\n  n = f(n)\\n  ans += 1\\n\\nprint(ans+1)\\n\", \"def f(x):\\n    x+=1\\n    while(x%10==0 and x>0):\\n        x//=10\\n    return x\\nvals=set()\\nn=int(input())\\nvals.add(n)\\nwhile f(n) not in vals:\\n    vals.add(f(n))\\n    n=f(n)\\nprint(len(vals))\", \"a=input()\\nalle = set()\\nalle.add(int(a))\\n\\nwhile True:\\n\\tx = int(a)\\n\\tx += 1\\n\\ty = str(x)\\n\\twhile y[-1] == \\\"0\\\":\\n\\t\\ty = y[:-1]\\n\\tif int(y) in alle:\\n\\t\\tbreak\\n\\talle.add(int(y))\\n\\ta = y\\nprint(len(alle))\\n\", \"n=int(input())\\ndict1={}\\nflag=0\\ndict1[n]=1\\nwhile(flag==0):\\n\\tn+=1\\n\\twhile(n%10==0):\\n\\t\\tn=n//10\\n\\ttry:\\n\\t\\tdict1[n]+=1\\n\\t\\tflag=1\\n\\texcept:\\n\\t\\tKeyError\\n\\t\\tdict1[n]=1\\nprint(len(dict1))\", \"n = int(input())\\nt = 0\\nwhile n > 9:\\n    n += 1\\n    while n % 10 == 0:\\n        n //= 10\\n    t += 1\\nprint(t + 9)\\n\", \"def f(n):\\n    n+=1\\n    while n%10==0:\\n        n/=10\\n    return n\\n\\nx = int(input())\\nl = [x]\\nwhile 1:\\n    x = f(x)\\n    if x in l:\\n        break\\n    l.append(x)\\nprint(len(l))\", \"n = int(input())\\n\\nseen = set()\\n\\nwhile n not in seen:\\n\\tseen.add(n)\\n\\tn += 1\\n\\twhile n%10 == 0:\\n\\t\\tn //= 10\\n\\nprint(len(seen))\", \"import sys\\nsys.setrecursionlimit(2000)\\nfrom collections import Counter\\nfrom functools import reduce\\n# sys.stdin.readline()\\n\\ndef __starting_point():\\n\\n    # single variables\\n    n = [int(val) for val in sys.stdin.readline().split()][0]\\n\\n    count = 0\\n    s = set([])\\n    while(not n in s):\\n        s.add(n)\\n        n += 1\\n        n = str(n)\\n        while(n[-1] == '0'):\\n            n = n[:-1]\\n        n = int(n)\\n        count += 1\\n    print(count)\\n\\n\\n\\n__starting_point()\", \"n = int(input())\\na = 0\\nwhile n >= 10:\\n   n += 1\\n   a += 1\\n   while n % 10 == 0:\\n      n = n // 10\\n\\nprint(a + 9)\\n   \\n\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\n@Project : CodeForces\\n@File    : 1.py \\n@Time    : 2019/4/26 22:31\\n@Author  : Koushiro \\n\\\"\\\"\\\"\\ndef find(num):\\n    num+=1\\n    while num%10==0:\\n        num=num//10\\n    return num\\n\\ndef __starting_point():\\n    n= int(input())\\n    dic={n:1}\\n    n=find(n)\\n    while n not in dic:\\n        dic[n]=1\\n        n=find(n)\\n    print(len(dic))\\n__starting_point()\", \"n=int(input())\\ns=set()\\ns.add(n)\\nwhile(n!=1):\\n\\tn=n+1\\n\\twhile((n%10)==0):\\n\\t\\tn=n//10\\n\\ts.add(n)\\nfor i in range(2,10):\\n\\ts.add(i)\\nprint(len(s))\\n\", \"def f(x):\\n    return int(str(x + 1).rstrip('0'))\\n\\ndef main():\\n    x = int(input())\\n\\n    l = set()\\n\\n    while x not in l:\\n        l.add(x)\\n        x = f(x)\\n    \\n    print(len(l))\\n        \\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"f = lambda x: str(n + 1).rstrip('0')\\nn = int(input())\\ns = set()\\nwhile n not in s:\\n    s.add(n)\\n    n = int(f(n))\\nprint(len(s))\", \"n = int(input())\\n\\nst = {}\\n\\nwhile not n in st:\\n\\tst[n] = True\\n\\tn += 1\\n\\twhile n%10 == 0:\\n\\t\\tn /= 10\\n\\nprint(len(st))\\n\", \"def f(x):\\n    x += 1\\n    while not x % 10:\\n        x //= 10\\n    return x\\n\\n\\nprevious = set()\\n\\nn = int(input())\\nwhile n not in previous:\\n    previous.add(n)\\n    n = f(n)\\n\\nprint(len(previous))\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n##################################\\n# University of Wisconsin-Madison\\n# Author: Yaqi Zhang\\n##################################\\n# This module contains\\n##################################\\n\\n# standard library\\nimport sys\\n\\ndef main():\\n    # nums = list(map(int, input().split()))\\n    num = int(input())\\n    seen = set()\\n    while num:\\n        if num in seen:\\n            break\\n        seen.add(num)\\n        num += 1\\n        while num % 10 == 0:\\n            num //= 10\\n    print(len(seen))\\n\\ndef __starting_point():\\n    main()\\n\\n\\n__starting_point()\"]", "input_output": "{\n  \"inputs\": [\n    \"1098\\n\",\n    \"10\\n\",\n    \"1000000000\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"10119\\n\",\n    \"1337\\n\",\n    \"51\\n\",\n    \"99\\n\",\n    \"79\\n\",\n    \"29\\n\",\n    \"633\\n\",\n    \"9000\\n\",\n    \"99999999\\n\",\n    \"932415950\\n\",\n    \"90\\n\",\n    \"45\\n\",\n    \"22\\n\",\n    \"987654321\\n\",\n    \"599\\n\",\n    \"54\\n\",\n    \"73180\\n\",\n    \"9392\\n\",\n    \"25659427\\n\",\n    \"1999\\n\",\n    \"712\\n\",\n    \"21\\n\",\n    \"916073472\\n\",\n    \"920\\n\",\n    \"61261142\\n\",\n    \"999999999\\n\",\n    \"30\\n\",\n    \"299\\n\",\n    \"20\\n\",\n    \"960879599\\n\",\n    \"41\\n\",\n    \"9590\\n\",\n    \"9169813\\n\",\n    \"2001\\n\",\n    \"6171\\n\",\n    \"23\\n\",\n    \"99932791\\n\",\n    \"959590\\n\",\n    \"90000001\\n\",\n    \"98\\n\",\n    \"442188277\\n\",\n    \"751780\\n\",\n    \"909590\\n\",\n    \"91\\n\",\n    \"89\\n\",\n    \"76\\n\",\n    \"34\\n\",\n    \"70\\n\",\n    \"38\\n\",\n    \"58\\n\",\n    \"852240\\n\",\n    \"94\\n\",\n    \"44\\n\",\n    \"83\\n\",\n    \"81\\n\",\n    \"49\\n\",\n    \"71\\n\",\n    \"204907\\n\",\n    \"3\\n\",\n    \"40\\n\",\n    \"123123124\\n\",\n    \"88\\n\",\n    \"97\\n\",\n    \"642853\\n\",\n    \"986792\\n\",\n    \"5\\n\",\n    \"73\\n\",\n    \"50\\n\",\n    \"556740\\n\",\n    \"259835150\\n\",\n    \"5932\\n\",\n    \"36\\n\",\n    \"96\\n\",\n    \"999999\\n\",\n    \"921280\\n\",\n    \"84\\n\",\n    \"19909590\\n\",\n    \"599785072\\n\",\n    \"303719549\\n\",\n    \"90909590\\n\",\n    \"940160238\\n\",\n    \"255\\n\",\n    \"439674440\\n\",\n    \"870826420\\n\",\n    \"93\\n\",\n    \"55\\n\",\n    \"631\\n\",\n    \"24\\n\",\n    \"59\\n\",\n    \"78\\n\",\n    \"997184\\n\",\n    \"189070\\n\",\n    \"46\\n\",\n    \"63\\n\",\n    \"869667992\\n\",\n    \"963\\n\",\n    \"86\\n\",\n    \"880708\\n\",\n    \"80\\n\",\n    \"902826\\n\",\n    \"57\\n\",\n    \"956126\\n\",\n    \"790643\\n\",\n    \"68\\n\",\n    \"990\\n\",\n    \"860082635\\n\",\n    \"940740\\n\",\n    \"87\\n\",\n    \"799170\\n\",\n    \"75\\n\",\n    \"19\\n\",\n    \"312770\\n\",\n    \"69\\n\",\n    \"855520\\n\",\n    \"53\\n\",\n    \"841480\\n\",\n    \"60\\n\",\n    \"196530\\n\",\n    \"883260\\n\",\n    \"962131\\n\",\n    \"77\\n\",\n    \"47\\n\",\n    \"62\\n\",\n    \"2333\\n\",\n    \"999999970\\n\"\n  ],\n  \"outputs\": [\n    \"20\\n\",\n    \"19\\n\",\n    \"91\\n\",\n    \"9\\n\",\n    \"9\\n\",\n    \"35\\n\",\n    \"24\\n\",\n    \"18\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"22\\n\",\n    \"37\\n\",\n    \"10\\n\",\n    \"53\\n\",\n    \"19\\n\",\n    \"14\\n\",\n    \"17\\n\",\n    \"46\\n\",\n    \"10\\n\",\n    \"15\\n\",\n    \"34\\n\",\n    \"23\\n\",\n    \"35\\n\",\n    \"10\\n\",\n    \"25\\n\",\n    \"18\\n\",\n    \"52\\n\",\n    \"26\\n\",\n    \"56\\n\",\n    \"10\\n\",\n    \"19\\n\",\n    \"10\\n\",\n    \"19\\n\",\n    \"29\\n\",\n    \"18\\n\",\n    \"23\\n\",\n    \"36\\n\",\n    \"36\\n\",\n    \"28\\n\",\n    \"16\\n\",\n    \"33\\n\",\n    \"27\\n\",\n    \"72\\n\",\n    \"11\\n\",\n    \"43\\n\",\n    \"34\\n\",\n    \"32\\n\",\n    \"18\\n\",\n    \"10\\n\",\n    \"13\\n\",\n    \"15\\n\",\n    \"19\\n\",\n    \"11\\n\",\n    \"11\\n\",\n    \"42\\n\",\n    \"15\\n\",\n    \"15\\n\",\n    \"16\\n\",\n    \"18\\n\",\n    \"10\\n\",\n    \"18\\n\",\n    \"35\\n\",\n    \"9\\n\",\n    \"19\\n\",\n    \"64\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"33\\n\",\n    \"23\\n\",\n    \"9\\n\",\n    \"16\\n\",\n    \"19\\n\",\n    \"33\\n\",\n    \"46\\n\",\n    \"23\\n\",\n    \"13\\n\",\n    \"13\\n\",\n    \"10\\n\",\n    \"42\\n\",\n    \"15\\n\",\n    \"32\\n\",\n    \"35\\n\",\n    \"44\\n\",\n    \"41\\n\",\n    \"58\\n\",\n    \"18\\n\",\n    \"45\\n\",\n    \"53\\n\",\n    \"16\\n\",\n    \"14\\n\",\n    \"24\\n\",\n    \"15\\n\",\n    \"10\\n\",\n    \"11\\n\",\n    \"26\\n\",\n    \"31\\n\",\n    \"13\\n\",\n    \"16\\n\",\n    \"28\\n\",\n    \"19\\n\",\n    \"13\\n\",\n    \"32\\n\",\n    \"19\\n\",\n    \"37\\n\",\n    \"12\\n\",\n    \"35\\n\",\n    \"33\\n\",\n    \"11\\n\",\n    \"19\\n\",\n    \"52\\n\",\n    \"40\\n\",\n    \"12\\n\",\n    \"29\\n\",\n    \"14\\n\",\n    \"10\\n\",\n    \"38\\n\",\n    \"10\\n\",\n    \"38\\n\",\n    \"16\\n\",\n    \"38\\n\",\n    \"19\\n\",\n    \"32\\n\",\n    \"36\\n\",\n    \"42\\n\",\n    \"12\\n\",\n    \"12\\n\",\n    \"17\\n\",\n    \"28\\n\",\n    \"21\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1157/A", "starter_code": ""}
{"id": 4007, "question": "There are $n$ friends who want to give gifts for the New Year to each other. Each friend should give exactly one gift and receive exactly one gift. The friend cannot give the gift to himself.\n\nFor each friend the value $f_i$ is known: it is either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$.\n\nYou want to fill in the unknown values ($f_i = 0$) in such a way that each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. It is guaranteed that the initial information isn't contradictory.\n\nIf there are several answers, you can print any.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of friends.\n\nThe second line of the input contains $n$ integers $f_1, f_2, \\dots, f_n$ ($0 \\le f_i \\le n$, $f_i \\ne i$, all $f_i \\ne 0$ are distinct), where $f_i$ is the either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$. It is also guaranteed that there is at least two values $f_i = 0$.\n\n\n-----Output-----\n\nPrint $n$ integers $nf_1, nf_2, \\dots, nf_n$, where $nf_i$ should be equal to $f_i$ if $f_i \\ne 0$ or the number of friend whom the $i$-th friend wants to give the gift to. All values $nf_i$ should be distinct, $nf_i$ cannot be equal to $i$. Each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself.\n\nIf there are several answers, you can print any.\n\n\n-----Examples-----\nInput\n5\n5 0 0 2 4\n\nOutput\n5 3 1 2 4 \n\nInput\n7\n7 0 0 1 4 0 6\n\nOutput\n7 3 2 1 4 5 6 \n\nInput\n7\n7 4 0 3 0 5 1\n\nOutput\n7 4 2 3 6 5 1 \n\nInput\n5\n2 1 0 0 0\n\nOutput\n2 1 4 5 3", "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nF=list(map(int,input().split()))\\n\\nUSE=[0]*(n+1)\\n\\nB=[]\\nfor i in range(n):\\n    USE[F[i]]=1\\n    if F[i]==0:\\n        B.append(i+1)\\n\\nA=[]\\nfor i in range(1,n+1):\\n    if USE[i]==0:\\n        A.append(i)\\n        \\nfor i in range(len(A)-1):\\n    if A[i]==B[i]:\\n        A[i],A[i+1]=A[i+1],A[i]\\n\\nif A[-1]==B[-1]:\\n    A[-1],A[-2]=A[-2],A[-1]\\n\\nind=0\\n\\nfor i in range(n):\\n    if F[i]==0:\\n        F[i]=A[ind]\\n        ind+=1\\n\\nprint(*F)\\n\", \"n = int(input())\\nls = list(map(int, input().split()))\\n\\nnogive = set(list(range(1,n+1)))\\nnoget = set(list(range(1,n+1)))\\nfor i,e in enumerate(ls):\\n    if e != 0:\\n        nogive.remove(i+1)\\n        noget.remove(e)\\n\\nprio = nogive.intersection(noget)\\n\\nwhile len(nogive):\\n    if len(prio):\\n        giver = prio.pop()\\n        nogive.remove(giver)\\n    else:\\n        giver = nogive.pop()\\n\\n    if len(prio):\\n        getter = prio.pop()\\n        noget.remove(getter)\\n    else:\\n        getter = noget.pop()\\n        if getter == giver:\\n            getter2 = noget.pop()\\n            noget.add(getter)\\n            getter = getter2\\n    ls[giver-1] = getter\\n\\nfor e in ls:\\n    print(e, end=' ')\\n\\n\\n    \\n\", \"N = int(input())\\n\\narr = list(map(int, input().split()))\\n\\nuniq = set(arr)\\nuniq.remove(0)\\n\\nnot_found = [x for x in range(1,N+1) if x not in uniq]\\n\\nimport random\\nwhile True:\\n  random.shuffle(not_found)\\n  arr2 = arr.copy()\\n  idx = 0\\n  for i in range(N):\\n    if arr2[i] == 0:\\n      arr2[i] = not_found[idx]\\n      idx += 1\\n  if not any(i+1==x for i,x in enumerate(arr2)):\\n    print(' '.join(map(str, arr2)))\\n    break\\n\\n\", \"n = int(input())\\nmas = list(map(int, input().split()))\\ncou = []\\nfor i in range(n + 1):\\n\\tcou.append(0)\\nx = -1\\nfor i in range(n):\\n\\tif mas[i] == 0:\\n\\t\\tif x == -1:\\n\\t\\t\\tx = i\\n\\t\\telse:\\n\\t\\t\\ty = i\\nfor i in range(n):\\n\\tcou[mas[i]] = 1\\nnum = n\\nfor i in range (1, n + 1):\\n\\tif cou[i] != 1:\\n\\t\\tcou[i] = 1\\n\\t\\twhile True:\\n\\t\\t\\tnum -= 1\\n\\t\\t\\tif mas[num] == 0:\\n\\t\\t\\t\\tmas[num] = i\\n\\t\\t\\t\\tbreak\\nfor i in range(n):\\n\\tif mas[i] == i + 1:\\n\\t\\tif i == x:\\n\\t\\t\\tmas[i], mas[y] = mas[y], mas[i]\\n\\t\\telse:\\n\\t\\t\\tmas[i], mas[x] = mas[x], mas[i]\\nprint(*mas)\\n\", \"from sys import stdin,stdout\\nn=int(stdin.readline().strip())\\ns=list(map(int,stdin.readline().strip().split()))\\n\\nvis=[False for i in range(n+10)]\\nfor i in s:\\n    vis[i]=True\\nnu=[]\\nnu1=[]\\nfor i in range(1,n+1):\\n    if not vis[i]:\\n        if s[i-1]==0:\\n            nu.append(i)\\n        else:\\n            nu1.append(i)\\nnu.sort()\\nwhile len(nu)>=2:\\n    if len(nu)%2!=0:\\n        s[nu[-3]-1]=nu[-1]\\n        s[nu[-1]-1]=nu[-2]\\n        s[nu[-2]-1]=nu[-3]\\n        nu.pop()\\n        nu.pop()\\n        nu.pop()\\n        continue\\n    s[nu[-1]-1]=nu[-2]\\n    s[nu[-2]-1]=nu[-1]\\n    nu.pop()\\n    nu.pop()\\n\\n\\nif len(nu)==1:\\n    s[nu[-1]-1]=nu1[-1]\\n    nu1.pop()\\n    nu1.append(nu[-1])\\nfor i in range(n):\\n    if s[i]==0:\\n        s[i]=nu1[-1]\\n        nu1.pop()\\nprint(*s)\\n\\n    \\n\", \"n = int(input())\\nl = list(map(int,input().split()))\\ndostal = [0] * (n+1)\\nfor i in range(n):\\n\\tdostal[l[i]] = 1\\ndo_dania = []\\nind = []\\nfor i in range(n):\\n\\tif l[i] == 0:\\n\\t\\tind.append(i)\\nfor i in range(1, n+1):\\n\\tif dostal[i] == 0:\\n\\t\\tdo_dania.append(i)\\n#print(do_dania)\\nj = 0\\nfor i in range(n):\\n\\tif l[i] == 0:\\n\\t\\tl[i] = do_dania[j]\\n\\t\\tj += 1\\nfor i in range(len(ind) - 1):\\n\\tif l[ind[i]] == ind[i] + 1:\\n\\t\\tkk = l[ind[i]]\\n\\t\\tl[ind[i]] = l[ind[i+1]]\\n\\t\\tl[ind[i+1]] = kk\\nif l[ind[-1]] == ind[-1] + 1:\\n\\tkk = l[ind[-1]]\\n\\tl[ind[-1]] = l[ind[0]]\\n\\tl[ind[0]] = kk\\nprint(*l)\", \"\\nN = int(input())\\n\\na = list(map(int,input().split()))\\n\\nend = [False] * N\\ngive = []\\n\\nfor i in range(N):\\n\\n    if a[i] != 0:\\n        end[a[i] - 1] = True\\n\\n    else:\\n        give.append(i)\\n\\nwant = []\\n\\nfor i in range(N):\\n    if not end[i]:\\n        want.append(i)\\n\\n#print (give)\\n#print (want)\\n\\nfor i in range(len(give) - 1):\\n\\n    if give[i] == want[i]:\\n        t = want[i+1]\\n        want[i+1] = want[i]\\n        want[i] = t\\n\\nif give[-1] == want[-1]:\\n    t = want[-1]\\n    want[-1] = want[-2]\\n    want[-2] = t\\n\\nfor i in range(len(give)):\\n\\n    a[give[i]] = want[i] + 1\\n\\nprint(\\\" \\\".join(map(str,a)))\\n\", \"q=int(input())\\nw=list(map(int,input().split()))\\ne=[0]*q\\nr=[]\\nt=[]\\nfor i in range(q):\\n    if w[i]==0:r.append(i)\\n    else:e[w[i]-1]=1\\nfor i in range(q):\\n    if e[i]==0:t.append(i)\\nfor i in range(len(r)):\\n    if r[i]==t[i]:\\n        if i==0:t[i],t[1]=t[1],t[i]\\n        else:t[i],t[0]=t[0],t[i]\\nfor i in range(len(r)):\\n    w[r[i]]=t[i]+1\\nprint(*w)\", \"import random\\nn = int(input())\\na = [int(x) for x in input().split()]\\nj = 1\\nb = [0] * (n+1)\\nfor i in a:\\n  b[i] = 1\\nc = []\\nfor i,j in enumerate(b):\\n  if j == 0:\\n    c.append(i)\\nc = set(c)\\nfor i in range(1,n+1):\\n  i = i - 1\\n  if a[i] == 0:\\n    if i + 1 in c:\\n      for k in c:\\n        if k!=i+1:\\n          a[i] = k\\n          c.remove(k)\\n          break\\nfor i in range(1,n+1):\\n  i = i - 1\\n  if a[i] == 0:\\n    for k in c:\\n      if k!=i+1:\\n        a[i] = k\\n        c.remove(k)\\n        break\\nfor i in a:\\n  print(i,end=\\\" \\\")\", \"n=int(input())\\na=list(map(int,input().split()))\\nvis=[False for i in range(n+1)]\\nc={}\\nfor i in range(n):\\n    if a[i] is not 0:\\n        vis[a[i]]=True\\n    else:\\n        c[i]=True\\nd={}\\nfor i in range(1,n+1):\\n    if vis[i]==False:\\n        d[i]=True\\ndelete=[]\\nfor i in c:\\n    if i+1 in d:\\n        k=0\\n        for j in d:\\n            if j is not i+1:\\n                a[i]=j\\n                k=j\\n                break\\n        d.pop(k)\\n        delete.append(i)\\nfor i in delete:\\n    c.pop(i)\\np=[i for i in c]\\nq=[i for i in d]\\nfor i in range(len(p)):\\n    a[p[i]]=q[i]\\nprint(\\\" \\\".join(map(str,a)))\", \"import sys\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\ndef solve():\\n\\tn = mint()\\n\\tf = list(mints())\\n\\tw = [False]*(n+1)\\n\\tp = [False]*(n+1)\\n\\tfor i in f:\\n\\t\\tp[i] = True\\n\\tq = []\\n\\tfor i in range(1, n+1):\\n\\t\\tif w[i] or p[i]:\\n\\t\\t\\tcontinue\\n\\t\\ts = i\\n\\t\\te = i\\n\\t\\tw[i] = True\\n\\t\\tok = True\\n\\t\\twhile f[e-1] != 0:\\n\\t\\t\\te = f[e-1]\\n\\t\\t\\tif e == s:\\n\\t\\t\\t\\tok = False\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tw[e] = True\\n\\t\\tif ok:\\n\\t\\t\\tq.append((s,e))\\n\\tfor i in range(len(q)-1):\\n\\t\\tf[q[i][1]-1] = q[i+1][0]\\n\\tf[q[-1][1]-1] = q[0][0]\\n\\t#print(q)\\n\\tprint(' '.join(map(str,f)))\\n\\n#for i in range(mint()):\\nsolve()\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nnew=[-1]*n\\nfor i in l:\\n\\tif i!=0:\\n\\t\\tnew[i-1]=0\\nd=[]\\nfor i in range(n):\\n\\tif new[i]==-1:\\n\\t\\td.append(i+1)\\nloc=0\\nans=[]\\nindex=[]\\nflag=0\\nfor i in range(n):\\n\\tif l[i]!=0:\\n\\t\\tans.append(l[i])\\n\\telse:\\n\\t\\tif d[loc]!=i+1 and flag==0:\\n\\t\\t\\tans.append(d[loc])\\n\\t\\t\\tif len(index)==0:\\n\\t\\t\\t\\tindex.append(i)\\n\\t\\telse:\\n\\t\\t\\tif len(index)!=0:\\n\\t\\t\\t\\tans.append(d[loc])\\n\\t\\t\\t\\tans[-1],ans[index[-1]]=ans[index[-1]],ans[-1]\\n\\t\\t\\t\\tflag=0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag=1\\n\\t\\t\\t\\tans.append(d[loc])\\n\\t\\t\\t\\tif len(index)==0:\\n\\t\\t\\t\\t\\tindex.append(i)\\n\\t\\tloc+=1\\nprint (*ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\nsend = []\\nrecv = []\\nvis = [0] * n\\nfor i in range(n):\\n    if a[i] == 0:\\n        send.append(i+1)\\n    else:\\n        vis[a[i]-1] = 1\\nfor i in range(n):\\n    if vis[i] == 0:\\n        recv.append(i+1)\\nsend.sort()\\nrecv.sort()\\nrecv = list(set(send) & set(recv)) + list(set(recv) - set(send))\\np = 0\\nfor i in range(len(send)):\\n    while recv[p] == -1:\\n        p = (p+1) % len(recv)\\n    if send[i] == recv[p]:\\n            p = (p+1) % len(recv)\\n            while recv[p] == -1:\\n                p = (p+1) % len(recv)\\n    a[send[i]-1] = recv[p]\\n    recv[p] = -1\\n    p = (p+1) % len(recv)\\nprint(*a)        \\n\", \"import sys\\n\\nn, *f = map(int, sys.stdin.read().split())\\nf = [None] + f\\n\\ndef main():\\n    no_receieve = set(range(1, n+1)) - set(f[1:])\\n    if not no_receieve:\\n        return f[1:]\\n    \\n    no_send = []\\n    for i in range(1, n+1):\\n        if f[i] == 0:\\n            no_send.append(i)\\n    \\n    no_send.sort()\\n    no_receieve = sorted(no_receieve, reverse=True)\\n\\n    for i in range(len(no_send)):\\n        if no_send[i] == no_receieve[i]:\\n            if i >= 1:\\n                no_send[i], no_send[i-1] = no_send[i-1], no_send[i]\\n            else:\\n                no_send[0], no_send[1] = no_send[1], no_send[0]\\n    \\n    for i in range(len(no_send)):\\n        f[no_send[i]] = no_receieve[i]\\n    \\n    return f[1:]\\n\\ndef __starting_point():\\n    ans = main()\\n    print(*ans, sep=' ')\\n__starting_point()\", \"from sys import stdin\\nfrom collections import deque\\nmod = 10**9 + 7\\nimport sys\\n# def rl():\\n#     return [int(w) for w in stdin.readline().split()]\\nfrom bisect import bisect_right\\nfrom bisect import bisect_left\\nfrom collections import defaultdict\\nfrom math import sqrt,factorial,gcd,log2,inf,ceil\\n# map(int,input().split())\\n# # l = list(map(int,input().split()))\\n# from itertools import permutations\\nimport heapq\\n\\n# n,k = map(int,input().split())\\n# x = int(input())\\n# s = str(x)\\n#\\n# ans = ['0']*n\\n#\\n# flag = 0\\n#\\n# for i in range(n):\\n#   if i-k>=0:\\n#       ans[i] = ans[i-k]\\n#       if ans[i]<s[i]:\\n#           flag = 1\\n#           break\\n#   else:\\n#       ans[i] = s[i]\\n# s1 = ''.join(ans)\\n# if not flag:\\n#     print(n)\\n#     print(s1)\\n#     return\\n# flag = 0\\n# ans = ['0']*n\\n#\\n# for i in range(k-1,-1,-1):\\n#     if s[i] == '9':\\n#         continue\\n#     else:\\n#         ans[i] = str(int(s[i]) + 1)\\n#         flag = 1\\n#\\n#         for j in range(i+1,k-1):\\n#             ans[j] = '0'\\n#         for j in range(i):\\n#             ans[j] = s[j]\\n#         break\\n# if flag:\\n#\\n#  for i in range(k,n):\\n#    if i-k<0:\\n#      continue\\n#\\n#    else:\\n#        ans[i] = ans[i-k]\\n#\\n#\\n#  print(len(ans))\\n#  print(''.join(ans))\\n#\\n# else:\\n#\\n#     if s[0] != '9':\\n#         for i in range(n):\\n#             if i-k<0:\\n#               if i == 0:\\n#                  ans[i] = str(int(s[i]) + 1)\\n#               else:\\n#                   ans[i] = '0'\\n#             else:\\n#                 ans[i] = ans[i-k]\\n#         print(len(ans))\\n#         print(''.join(ans))\\n#     else:\\n#         # print(ans)\\n#         ans+=['0']\\n#         for i in range(n+1):\\n#             if i-k<0:\\n#                 if i == 0:\\n#                     ans[i] = '1'\\n#                 else:\\n#                     ans[i] = '0'\\n#             else:\\n#                 ans[i] = ans[i-k]\\n#         print(len(ans))\\n#         print(''.join(ans))\\n#\\n#\\n\\n\\n\\n\\n#\\n# t = int(input())\\n#\\n# for _ in range(t):\\n#\\n#     n,s = map(int,input().split())\\n#     l = list(map(int,input().split()))\\n#     pa = []\\n#     ans = 0\\n#     if sum(l)<=s:\\n#         print(0)\\n#         continue\\n#     for i in range(n-1):\\n#\\n#         if l[i]>l[i+1]:\\n#             if pa == []:\\n#               pa.append(l[i])\\n#               ans = i+1\\n#             else:\\n#                if pa[0]<l[i] and s-pa[0]>=0:\\n#\\n#                    s-=pa[0]\\n#                    pa.pop()\\n#                    pa.append(l[i])\\n#                    ans = i+1\\n#                    if s == 0:\\n#                        break\\n#                else:\\n#                    if s>=l[i]:\\n#                        s-=l[i]\\n#                    else:\\n#                        break\\n#\\n#         else:\\n#             if s>=l[i]:\\n#                 s-=l[i]\\n#             else:\\n#                 break\\n#\\n#     print(ans)\\n\\n\\n\\n\\n\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n# t = int(input())\\n#\\n# for _ in range(t):\\n#\\n#     n,m = map(int,input().split())\\n#     l1 = list(map(int,input().split()))\\n#     l2 = list(map(int,input().split()))\\n#     hash = defaultdict(int)\\n#\\n#     seti = set(l2)\\n#     for i in range(n):\\n#         if l1[i] in seti:\\n#             hash[l1[i]] = i\\n#     st = []\\n#     ans = 0\\n#     s = set(l1)\\n#     for i in range(m):\\n#           if l2[i] in s:\\n#              if st == []:\\n#                  z = hash[l2[i]]\\n#                  st.append(z)\\n#                  ans+=2*z + 1\\n#              else:\\n#                  z = hash[l2[i]]\\n#                  # print(i,z)\\n#                  if st[0]>z:\\n#                      ans+=1\\n#                  else:\\n#                      ans+=2*(z-1)+1\\n#                      st.pop()\\n#                      st.append(z-1)\\n#\\n#     print(ans)\\n#\\n#\\n#\\n\\n\\n\\nn = int(input())\\nl = list(map(int,input().split()))\\nla = [i+1 for i in range(n)]\\ns = set(la)\\nyo = set()\\nfor i in l:\\n  if i is not 0:\\n    s.remove(i)\\n    yo.add(i)\\nk = list(s)\\nk.sort()\\nfor i in range(n):\\n    if l[i] == 0:\\n        z = k.pop()\\n        l[i] = z\\n\\nfor i in range(n):\\n    if l[i] == i+1:\\n\\n        for j in range(n):\\n          if l[j] not in yo:\\n            if l[j] == j+1 and i!=j:\\n                l[i],l[j] = l[j],l[i]\\n                break\\n            else:\\n                if l[j]!=i+1 and l[i]!=j+1:\\n                    l[i],l[j] = l[j],l[i]\\n                    break\\n\\n\\n\\n\\n        break\\n\\nprint(*l)\\n\\n\\n\", \"n = int(input())\\nl = list(map(int, input().strip().split()))\\nrecieved = [False for i in range(n+1)]\\nrecieved[0] = True\\nfor i in range(len(l)):\\n    recieved[l[i]] = True\\nrecievedNotGiven = []\\ngivenNotRecieved = []\\nboth = []\\nfor i in range(1,n+1):\\n    if l[i-1] == 0 and recieved[i] == False:\\n        both.append(i)\\n    elif l[i-1] == 0:\\n        recievedNotGiven.append(i)\\n    elif recieved[i] == False:\\n        givenNotRecieved.append(i)\\nif len(both) != 1:\\n    for i in range(len(recievedNotGiven)):\\n        l[recievedNotGiven[i]-1] = givenNotRecieved[i]\\n    for i in range(len(both)):\\n        if i < len(both)-1:\\n            l[both[i]-1] = both[i+1]\\n        else:\\n            l[both[i]-1] = both[0]\\nelse:\\n    l[both[0]-1] = givenNotRecieved[0]\\n    l[recievedNotGiven[0]-1] = both[0]\\n    for i in range(1,len(givenNotRecieved)):\\n        l[recievedNotGiven[i]-1] = givenNotRecieved[i]\\nfor i in range(len(l)):\\n    print(l[i], end = \\\" \\\")\", \"n = int(input())\\nf = list(map(int, input().split()))\\ngive = set(i for i in range(n))\\nget = set(i for i in range(n))\\nfor i in range(n):\\n    if f[i] > 0:\\n        give.remove(i)\\n        get.remove(f[i]-1)\\ngivel = list(give)\\nfor x in givel:\\n    if x in get:\\n        give.remove(x)\\n        for j in get:\\n            if j == x:\\n                continue\\n            f[x] = j+1\\n            break\\n        get.remove(j)\\ngivel = list(give)\\nfor x in give:\\n    for j in get:\\n        f[x] = j+1\\n        break\\n    get.remove(j)\\nprint(' '.join(map(str, f)))\", \"n = int(input())\\na = list(map(int, input().split()))\\na = [-1] + a\\n\\nz = []\\ns = []\\nf = []\\nr = [0] * (n + 1)\\ng = [0] * (n + 1)\\nfor i in range(1, n+1):\\n    if a[i] != 0:\\n        g[i] = 1\\n        r[a[i]] = 1\\nfor i in range(1, n + 1):\\n    if g[i] == 1 and r[i] == 0:\\n        s.append(i)\\n    elif g[i] == 0 and r[i] == 1:\\n        f.append(i)\\n    elif g[i] ==0 and r[i] == 0:\\n        z.append(i)\\nzp = 0\\ni = 1\\n# print(f)\\n# print(s)\\nfor i in range(len(f)):\\n    # if i < len(f):\\n    fin = f[i]\\n    st = s[i]\\n    if (i == len(f) - 1) and len(z) == 1:\\n        a[z[0]] = st\\n        a[fin] = z[0]\\n        z.pop()\\n    else:\\n        a[fin] = st\\n\\nif len(z) > 0:\\n    st = z[0]\\n    for i in range(len(z)):\\n        ze = z[i]\\n        if i < len(z) - 1:\\n            a[ze] = z[i + 1]\\n        else:\\n            a[ze] = st\\nprint(*a[1:])\\n\\n\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nfrds = list(range(1, n + 1))\\nremain = set(frds) - set(arr)\\nslots = set()\\nfor i in range(len(arr)):\\n    if arr[i] == 0:\\n        slots.add(i + 1)\\nsame = slots & remain\\nfor i in same:\\n    x = remain.pop()\\n    if x-1 != i-1:\\n        arr[i-1] = x\\n    else:\\n        y = remain.pop()\\n        arr[i-1] = y\\n        remain.add(x)\\nfor i in range(len(arr)):\\n    if arr[i] == 0:\\n        arr[i] = remain.pop()\\nprint(*arr, sep=\\\" \\\")\\n\"]", "input_output": "{\"inputs\": [\"5\\n5 0 0 2 4\\n\", \"7\\n7 0 0 1 4 0 6\\n\", \"7\\n7 4 0 3 0 5 1\\n\", \"5\\n2 1 0 0 0\\n\", \"2\\n0 0\\n\", \"3\\n3 0 0\\n\", \"3\\n0 0 1\\n\", \"5\\n2 0 1 0 3\\n\", \"5\\n0 4 0 2 1\\n\", \"7\\n0 1 2 3 0 4 6\\n\", \"5\\n0 0 5 3 1\\n\", \"5\\n0 0 0 1 2\\n\", \"4\\n0 1 0 2\\n\", \"10\\n6 3 0 0 0 5 0 4 2 1\\n\", \"5\\n4 5 0 0 0\\n\", \"5\\n5 0 0 2 1\\n\", \"5\\n5 4 0 0 0\\n\", \"4\\n0 0 0 0\\n\", \"5\\n5 1 2 0 0\\n\", \"4\\n3 0 0 0\\n\", \"6\\n2 0 1 5 3 0\\n\", \"4\\n2 0 0 1\\n\", \"5\\n5 0 0 1 2\\n\", \"5\\n5 0 4 0 0\\n\", \"10\\n0 3 0 0 1 5 6 9 2 8\\n\", \"5\\n5 0 4 3 0\\n\", \"5\\n0 4 0 2 0\\n\", \"5\\n2 0 0 5 1\\n\", \"3\\n0 1 0\\n\", \"5\\n0 1 0 2 4\\n\", \"3\\n2 0 0\\n\", \"4\\n0 0 4 1\\n\", \"4\\n0 0 1 0\\n\", \"5\\n5 0 1 0 2\\n\", \"3\\n0 0 2\\n\", \"5\\n0 0 4 5 3\\n\", \"5\\n0 5 1 2 0\\n\", \"5\\n2 0 0 1 4\\n\", \"5\\n4 0 0 1 2\\n\", \"5\\n5 0 0 1 4\\n\", \"5\\n0 0 0 2 1\\n\", \"5\\n0 0 1 5 4\\n\", \"6\\n5 4 0 0 1 2\\n\", \"5\\n4 0 2 1 0\\n\", \"7\\n7 6 5 0 0 0 0\\n\", \"7\\n0 4 0 0 6 7 3\\n\", \"45\\n32 3 19 7 20 16 34 6 8 41 25 21 27 13 24 5 30 36 40 22 37 23 15 28 35 42 26 4 11 44 14 31 0 12 38 0 0 17 29 9 39 0 1 45 43\\n\", \"6\\n0 6 0 2 0 4\\n\", \"5\\n0 0 4 5 1\\n\", \"5\\n3 0 1 0 2\\n\", \"10\\n6 3 0 0 0 0 0 0 2 1\\n\", \"5\\n0 5 0 1 4\\n\", \"5\\n2 3 0 0 1\\n\", \"5\\n4 0 0 2 1\\n\", \"6\\n3 1 2 0 0 4\\n\", \"6\\n5 1 6 0 0 0\\n\", \"5\\n5 0 0 3 4\\n\", \"6\\n2 1 0 0 3 5\\n\", \"27\\n12 5 17 0 24 0 11 6 19 1 14 0 15 7 21 22 8 25 20 16 0 13 2 27 26 9 0\\n\", \"7\\n0 0 0 0 0 1 0\\n\", \"5\\n0 4 0 1 2\\n\", \"10\\n6 3 0 8 9 5 0 4 2 1\\n\", \"5\\n0 1 2 0 3\\n\", \"9\\n8 0 1 6 0 4 2 7 3\\n\", \"5\\n0 4 0 5 0\\n\", \"6\\n6 0 0 3 4 5\\n\", \"5\\n4 1 0 0 2\\n\", \"5\\n3 0 0 5 4\\n\", \"5\\n2 1 5 0 0\\n\", \"4\\n0 4 0 1\\n\", \"8\\n2 0 0 3 0 4 1 7\\n\", \"4\\n0 3 0 2\\n\", \"6\\n0 0 0 2 1 5\\n\", \"75\\n0 0 25 7 33 0 65 0 54 22 0 6 1 55 43 0 0 17 0 53 69 35 0 0 67 0 0 64 51 0 0 42 73 0 20 0 39 0 32 0 34 0 0 0 0 24 0 0 71 0 68 0 0 0 26 0 0 0 18 70 0 9 41 29 48 0 56 0 38 72 0 61 0 0 58\\n\", \"5\\n5 4 0 2 0\\n\", \"44\\n0 16 36 17 0 20 0 38 26 0 23 30 42 0 0 0 0 24 0 0 0 2 9 0 0 39 18 0 0 0 28 37 7 0 0 0 0 0 41 6 0 44 8 32\\n\", \"12\\n10 9 0 8 1 0 0 2 0 4 7 11\\n\", \"6\\n2 3 4 1 0 0\\n\", \"51\\n27 45 0 0 24 39 0 2 41 0 0 0 0 0 17 0 9 38 29 16 37 0 8 0 0 20 46 22 6 0 0 4 49 13 0 0 0 7 0 0 0 14 51 12 36 0 40 0 0 0 0\\n\", \"10\\n0 3 8 6 4 0 0 0 10 2\\n\", \"117\\n0 26 37 74 0 73 0 0 0 36 0 0 0 0 0 0 0 0 0 86 116 0 114 0 0 33 96 0 0 0 0 0 0 0 59 0 41 0 91 43 0 0 89 0 15 0 19 9 54 0 0 82 0 56 0 93 18 85 117 55 0 0 6 0 0 63 0 0 0 0 0 0 115 46 28 0 8 0 0 76 20 25 12 90 0 0 40 0 7 38 0 0 0 112 0 0 0 0 0 0 0 0 0 51 0 62 0 0 0 0 81 0 0 0 68 65 99\\n\", \"11\\n0 8 0 11 0 0 4 2 10 3 0\\n\", \"5\\n2 1 0 0 3\\n\", \"10\\n2 3 4 5 6 7 8 9 0 0\\n\", \"9\\n8 0 5 6 3 4 9 7 0\\n\", \"6\\n3 6 0 0 1 2\\n\", \"5\\n0 3 2 0 1\\n\", \"93\\n0 71 54 56 8 73 33 82 26 79 57 15 24 89 85 69 62 9 39 12 77 28 64 65 20 93 34 53 10 47 68 52 35 43 19 18 84 49 88 7 31 74 29 38 50 51 83 2 32 4 6 36 40 11 46 87 41 42 86 23 45 44 92 1 90 55 70 30 91 21 37 14 48 66 60 72 61 25 5 27 0 13 75 76 59 16 80 58 3 17 63 78 22\\n\", \"104\\n24 0 77 92 89 16 0 81 46 0 12 0 0 0 0 0 74 0 0 88 0 21 20 55 6 0 33 5 0 76 8 68 17 0 0 7 0 0 0 35 0 87 32 14 102 59 49 0 0 11 0 0 0 23 57 31 22 99 63 38 0 0 0 90 0 25 0 0 19 0 50 0 0 0 60 48 0 0 0 0 0 0 0 0 42 0 0 0 98 97 10 65 86 95 0 4 0 45 0 0 75 82 0 78\\n\", \"6\\n0 0 0 2 1 0\\n\", \"7\\n2 1 0 0 0 3 4\\n\", \"9\\n0 6 0 0 7 1 5 3 0\\n\", \"7\\n2 0 0 0 0 0 0\\n\", \"46\\n16 34 13 0 42 14 25 29 11 7 38 26 0 1 0 0 22 0 27 19 35 31 32 46 24 10 6 8 40 5 9 33 43 17 41 45 0 20 37 0 18 44 0 12 3 15\\n\", \"5\\n3 1 0 2 0\\n\", \"12\\n2 3 4 5 12 1 0 10 8 11 9 0\\n\", \"4\\n3 0 2 0\\n\", \"10\\n6 3 0 0 0 0 0 2 1 0\\n\", \"4\\n4 1 0 0\\n\", \"19\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\", \"5\\n5 3 2 0 0\\n\", \"9\\n3 1 2 9 0 0 8 7 6\\n\", \"9\\n2 0 1 3 4 5 6 0 7\\n\", \"5\\n0 0 0 0 1\\n\", \"7\\n0 0 1 0 3 2 0\\n\", \"5\\n0 0 0 2 4\\n\", \"5\\n0 3 0 1 0\\n\", \"11\\n7 11 10 9 8 0 0 0 0 0 0\\n\", \"9\\n0 1 2 3 4 5 6 7 0\\n\", \"116\\n37 0 0 50 0 29 73 0 97 53 0 0 24 1 2 30 0 0 0 68 107 7 0 0 104 85 0 103 111 0 25 0 0 100 36 0 19 82 88 0 0 92 0 62 64 13 0 83 3 0 0 0 0 0 38 101 105 18 6 0 48 0 70 0 116 0 0 0 32 108 0 8 16 0 0 0 75 0 78 0 56 0 110 63 0 0 0 0 15 23 0 0 40 42 0 90 0 94 59 67 0 0 28 34 0 11 21 0 0 33 0 35 57 14 0 10\\n\", \"6\\n0 1 5 3 2 0\\n\", \"7\\n7 6 1 0 3 0 5\\n\", \"4\\n0 1 0 0\\n\", \"148\\n0 110 76 0 0 106 56 107 0 115 0 0 8 0 0 0 0 74 15 58 108 78 0 0 0 29 28 0 103 25 0 0 0 13 0 0 0 126 0 0 0 0 124 12 0 10 0 0 141 19 135 0 84 30 0 100 86 118 95 0 0 134 0 0 0 0 101 0 128 7 5 0 91 0 138 57 112 43 9 0 52 0 0 0 16 0 11 0 0 63 109 0 0 142 53 99 0 0 129 148 21 0 1 0 0 88 31 0 0 0 0 48 0 37 146 145 62 23 0 82 0 70 0 0 0 113 54 0 26 64 0 0 136 114 0 0 0 47 0 83 92 0 0 69 123 0 0 81\\n\", \"32\\n0 20 17 31 0 0 18 22 0 0 0 0 0 0 0 13 12 0 0 8 15 0 5 0 0 0 16 32 0 0 14 0\\n\", \"48\\n0 38 9 45 48 0 41 30 21 44 0 0 5 0 47 18 35 0 43 0 15 24 0 4 0 0 13 11 32 0 0 33 0 25 39 16 0 0 0 20 7 6 0 3 31 36 0 0\\n\", \"5\\n5 1 0 0 0\\n\", \"5\\n5 0 2 0 1\\n\", \"6\\n0 4 2 0 1 0\\n\", \"5\\n5 0 0 3 1\\n\", \"12\\n10 0 12 11 0 0 6 0 7 4 5 8\\n\", \"115\\n109 0 65 0 0 54 37 33 0 0 74 0 0 10 93 0 0 39 87 0 67 68 0 41 44 0 35 0 0 0 82 64 0 52 31 0 0 0 13 0 0 0 0 59 0 43 53 0 0 0 0 29 0 38 0 42 92 47 102 98 3 0 0 1 81 45 9 17 26 80 5 0 104 91 18 36 0 0 8 0 0 0 25 0 72 4 21 0 0 0 78 77 97 56 0 0 0 0 0 88 22 83 105 0 6 0 0 73 0 40 0 108 50 19 28\\n\", \"143\\n0 0 0 76 121 0 9 0 0 0 0 0 83 53 0 0 0 15 0 102 0 3 0 0 0 0 28 0 99 115 60 0 55 0 5 70 0 0 78 0 0 48 33 0 0 139 0 0 0 111 2 0 0 0 0 0 0 80 0 52 0 0 116 0 0 0 10 0 75 0 86 107 0 0 7 0 50 0 47 141 123 0 1 85 0 71 128 0 73 0 0 131 0 62 114 0 0 0 0 66 77 74 0 14 61 0 103 0 0 0 134 11 98 0 0 117 0 89 0 129 58 0 0 138 35 0 142 135 0 0 0 20 118 125 0 21 59 0 90 72 0 112 0\\n\", \"95\\n0 10 12 2 0 58 0 0 17 83 59 33 23 0 0 0 11 92 24 0 5 0 52 16 40 90 62 50 66 72 0 71 0 55 0 0 0 48 0 0 0 44 32 45 69 56 0 41 0 86 54 21 0 0 95 65 64 0 0 0 85 0 39 30 0 0 81 0 28 4 0 20 34 80 89 0 0 19 31 0 0 0 0 0 0 70 36 38 87 0 93 0 0 68 60\\n\", \"13\\n0 3 13 10 8 0 5 0 4 0 0 0 0\\n\", \"6\\n2 0 5 1 3 0\\n\", \"6\\n3 0 5 1 2 0\\n\", \"4\\n0 0 1 3\\n\", \"4\\n2 0 1 0\\n\"], \"outputs\": [\"5 3 1 2 4 \\n\", \"7 3 2 1 4 5 6 \\n\", \"7 4 2 3 6 5 1 \\n\", \"2 1 4 5 3 \\n\", \"2 1 \\n\", \"3 1 2 \\n\", \"2 3 1 \\n\", \"2 4 1 5 3 \\n\", \"3 4 5 2 1 \\n\", \"5 1 2 3 7 4 6 \\n\", \"2 4 5 3 1 \\n\", \"3 5 4 1 2 \\n\", \"3 1 4 2 \\n\", \"6 3 7 9 10 5 8 4 2 1 \\n\", \"4 5 1 2 3 \\n\", \"5 3 4 2 1 \\n\", \"5 4 1 2 3 \\n\", \"2 3 4 1 \\n\", \"5 1 2 3 4 \\n\", \"3 4 1 2 \\n\", \"2 6 1 5 3 4 \\n\", \"2 3 4 1 \\n\", \"5 3 4 1 2 \\n\", \"5 1 4 2 3 \\n\", \"4 3 10 7 1 5 6 9 2 8 \\n\", \"5 1 4 3 2 \\n\", \"3 4 5 2 1 \\n\", \"2 3 4 5 1 \\n\", \"3 1 2 \\n\", \"3 1 5 2 4 \\n\", \"2 3 1 \\n\", \"2 3 4 1 \\n\", \"3 4 1 2 \\n\", \"5 4 1 3 2 \\n\", \"3 1 2 \\n\", \"2 1 4 5 3 \\n\", \"3 5 1 2 4 \\n\", \"2 3 5 1 4 \\n\", \"4 3 5 1 2 \\n\", \"5 3 2 1 4 \\n\", \"3 5 4 2 1 \\n\", \"2 3 1 5 4 \\n\", \"5 4 6 3 1 2 \\n\", \"4 5 2 1 3 \\n\", \"7 6 5 1 2 3 4 \\n\", \"2 4 1 5 6 7 3 \\n\", \"32 3 19 7 20 16 34 6 8 41 25 21 27 13 24 5 30 36 40 22 37 23 15 28 35 42 26 4 11 44 14 31 2 12 38 10 18 17 29 9 39 33 1 45 43 \\n\", \"3 6 5 2 1 4 \\n\", \"2 3 4 5 1 \\n\", \"3 4 1 5 2 \\n\", \"6 3 9 5 7 10 8 4 2 1 \\n\", \"3 5 2 1 4 \\n\", \"2 3 4 5 1 \\n\", \"4 3 5 2 1 \\n\", \"3 1 2 5 6 4 \\n\", \"5 1 6 2 3 4 \\n\", \"5 1 2 3 4 \\n\", \"2 1 4 6 3 5 \\n\", \"12 5 17 3 24 4 11 6 19 1 14 10 15 7 21 22 8 25 20 16 18 13 2 27 26 9 23 \\n\", \"6 3 4 5 7 1 2 \\n\", \"3 4 5 1 2 \\n\", \"6 3 7 8 9 5 10 4 2 1 \\n\", \"4 1 2 5 3 \\n\", \"8 5 1 6 9 4 2 7 3 \\n\", \"3 4 1 5 2 \\n\", \"6 1 2 3 4 5 \\n\", \"4 1 5 3 2 \\n\", \"3 1 2 5 4 \\n\", \"2 1 5 3 4 \\n\", \"3 4 2 1 \\n\", \"2 5 8 3 6 4 1 7 \\n\", \"4 3 1 2 \\n\", \"3 6 4 2 1 5 \\n\", \"3 8 25 7 33 4 65 11 54 22 16 6 1 55 43 19 5 17 23 53 69 35 27 10 67 12 30 64 51 31 36 42 73 13 20 40 39 14 32 44 34 15 21 45 47 24 50 28 71 52 68 57 37 46 26 49 66 59 18 70 60 9 41 29 48 74 56 62 38 72 63 61 75 2 58 \\n\", \"5 4 1 2 3 \\n\", \"5 16 36 17 10 20 3 38 26 14 23 30 42 15 19 4 11 24 21 12 25 2 9 13 29 39 18 22 34 27 28 37 7 35 1 31 33 40 41 6 43 44 8 32 \\n\", \"10 9 6 8 1 3 5 2 12 4 7 11 \\n\", \"2 3 4 1 6 5 \\n\", \"27 45 10 1 24 39 5 2 41 11 25 15 18 19 17 21 9 38 29 16 37 23 8 26 30 20 46 22 6 31 35 4 49 13 48 28 32 7 33 34 42 14 51 12 36 43 40 50 44 3 47 \\n\", \"7 3 8 6 4 5 1 9 10 2 \\n\", \"5 26 37 74 11 73 2 3 4 36 13 10 14 16 21 17 22 23 27 86 116 24 114 29 35 33 96 39 30 31 32 34 45 42 59 47 41 48 91 43 49 44 89 50 15 52 19 9 54 53 57 82 61 56 58 93 18 85 117 55 64 60 6 67 66 63 69 75 70 71 72 78 115 46 28 77 8 79 88 76 20 25 12 90 80 83 40 92 7 38 84 95 87 112 97 94 98 100 104 101 102 103 105 51 107 62 108 109 110 113 81 106 1 111 68 65 99 \\n\", \"5 8 7 11 6 1 4 2 10 3 9 \\n\", \"2 1 4 5 3 \\n\", \"2 3 4 5 6 7 8 9 10 1 \\n\", \"8 1 5 6 3 4 9 7 2 \\n\", \"3 6 4 5 1 2 \\n\", \"4 3 2 5 1 \\n\", \"81 71 54 56 8 73 33 82 26 79 57 15 24 89 85 69 62 9 39 12 77 28 64 65 20 93 34 53 10 47 68 52 35 43 19 18 84 49 88 7 31 74 29 38 50 51 83 2 32 4 6 36 40 11 46 87 41 42 86 23 45 44 92 1 90 55 70 30 91 21 37 14 48 66 60 72 61 25 5 27 67 13 75 76 59 16 80 58 3 17 63 78 22 \\n\", \"24 13 77 92 89 16 1 81 46 3 12 9 15 27 18 28 74 26 30 88 36 21 20 55 6 29 33 5 34 76 8 68 17 37 40 7 39 43 41 35 51 87 32 14 102 59 49 44 47 11 52 53 61 23 57 31 22 99 63 38 62 67 54 90 56 25 70 58 19 72 50 73 79 64 60 48 66 69 80 83 71 85 84 100 42 91 93 94 98 97 10 65 86 95 96 4 101 45 104 103 75 82 2 78 \\n\", \"4 5 6 2 1 3 \\n\", \"2 1 5 7 6 3 4 \\n\", \"2 6 8 9 7 1 5 3 4 \\n\", \"2 1 4 5 6 7 3 \\n\", \"16 34 13 2 42 14 25 29 11 7 38 26 4 1 21 23 22 28 27 19 35 31 32 46 24 10 6 8 40 5 9 33 43 17 41 45 30 20 37 36 18 44 39 12 3 15 \\n\", \"3 1 5 2 4 \\n\", \"2 3 4 5 12 1 6 10 8 11 9 7 \\n\", \"3 4 2 1 \\n\", \"6 3 8 5 7 9 10 2 1 4 \\n\", \"4 1 2 3 \\n\", \"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 1 \\n\", \"5 3 2 1 4 \\n\", \"3 1 2 9 4 5 8 7 6 \\n\", \"2 8 1 3 4 5 6 9 7 \\n\", \"5 3 4 2 1 \\n\", \"5 6 1 7 3 2 4 \\n\", \"3 5 1 2 4 \\n\", \"4 3 5 1 2 \\n\", \"7 11 10 9 8 1 2 3 4 5 6 \\n\", \"9 1 2 3 4 5 6 7 8 \\n\", \"37 4 9 50 12 29 73 20 97 53 22 17 24 1 2 30 27 26 31 68 107 7 39 44 104 85 41 103 111 45 25 46 49 100 36 55 19 82 88 58 43 92 47 62 64 13 51 83 3 61 52 54 65 60 38 101 105 18 6 66 48 69 70 72 116 71 77 79 32 108 74 8 16 76 81 80 75 84 78 86 56 89 110 63 93 87 91 96 15 23 95 98 40 42 102 90 99 94 59 67 106 109 28 34 112 11 21 113 115 33 114 35 57 14 5 10 \\n\", \"6 1 5 3 2 4 \\n\", \"7 6 1 2 3 4 5 \\n\", \"2 1 4 3 \\n\", \"2 110 76 14 3 106 56 107 6 115 18 20 8 17 22 27 24 74 15 58 108 78 34 32 38 29 28 44 103 25 46 33 35 13 36 39 49 126 40 41 42 45 124 12 55 10 50 51 141 19 135 59 84 30 60 100 86 118 95 61 65 134 67 71 66 68 101 72 128 7 5 80 91 73 138 57 112 43 9 89 52 75 77 79 16 85 11 87 93 63 109 90 97 142 53 99 98 102 129 148 21 104 1 105 111 88 31 94 96 116 119 48 117 37 146 145 62 23 121 82 125 70 120 122 131 113 54 127 26 64 132 137 136 114 130 133 139 47 143 83 92 140 147 69 123 144 4 81 \\n\", \"6 20 17 31 2 9 18 22 10 11 19 3 4 7 21 13 12 23 24 8 15 27 5 25 26 29 16 32 30 1 14 28 \\n\", \"12 38 9 45 48 2 41 30 21 44 8 14 5 23 47 18 35 10 43 17 15 24 26 4 19 37 13 11 32 22 27 33 28 25 39 16 1 29 34 20 7 6 40 3 31 36 42 46 \\n\", \"5 1 4 3 2 \\n\", \"5 4 2 3 1 \\n\", \"5 4 2 6 1 3 \\n\", \"5 4 2 3 1 \\n\", \"10 1 12 11 2 3 6 9 7 4 5 8 \\n\", \"109 12 65 7 11 54 37 33 14 15 74 16 24 10 93 20 27 39 87 23 67 68 30 41 44 32 35 34 46 48 82 64 57 52 31 58 60 61 13 66 69 70 71 59 75 43 53 49 51 76 55 29 79 38 62 42 92 47 102 98 3 63 84 1 81 45 9 17 26 80 5 85 104 91 18 36 86 94 8 100 101 103 25 89 72 4 21 110 90 95 78 77 97 56 96 99 112 113 106 88 22 83 105 114 6 107 111 73 115 40 2 108 50 19 28 \\n\", \"4 13 18 76 121 8 9 12 22 27 29 16 83 53 30 17 19 15 23 102 31 3 24 25 26 32 28 36 99 115 60 34 55 37 5 70 38 40 78 41 44 48 33 45 49 139 39 42 54 111 2 43 46 56 51 57 64 80 63 52 67 69 116 65 68 79 10 82 75 81 86 107 84 87 7 92 50 94 47 141 123 88 1 85 95 71 128 91 73 100 93 131 96 62 114 97 106 101 104 66 77 74 105 14 61 108 103 109 110 119 134 11 98 113 120 117 124 89 122 129 58 126 127 138 35 130 142 135 132 143 133 20 118 125 136 21 59 137 90 72 140 112 6 \\n\", \"7 10 12 2 3 58 8 14 17 83 59 33 23 15 22 6 11 92 24 9 5 35 52 16 40 90 62 50 66 72 13 71 18 55 37 25 47 48 26 27 29 44 32 45 69 56 49 41 53 86 54 21 76 42 95 65 64 43 46 51 85 57 39 30 61 63 81 67 28 4 73 20 34 80 89 77 82 19 31 74 75 84 78 1 79 70 36 38 87 88 93 91 94 68 60 \\n\", \"6 3 13 10 8 11 5 2 4 7 12 1 9 \\n\", \"2 6 5 1 3 4 \\n\", \"3 6 5 1 2 4 \\n\", \"2 4 1 3 \\n\", \"2 4 1 3 \\n\"]}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1283/C", "starter_code": ""}
{"id": 4008, "question": "You are given an array $a$ consisting of $n$ integer numbers.\n\nYou have to color this array in $k$ colors in such a way that:   Each element of the array should be colored in some color;  For each $i$ from $1$ to $k$ there should be at least one element colored in the $i$-th color in the array;  For each $i$ from $1$ to $k$ all elements colored in the $i$-th color should be distinct. \n\nObviously, such coloring might be impossible. In this case, print \"NO\". Otherwise print \"YES\" and any coloring (i.e. numbers $c_1, c_2, \\dots c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions above. If there are multiple answers, you can print any.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the length of the array $a$ and the number of colors, respectively.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 5000$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nIf there is no answer, print \"NO\". Otherwise print \"YES\" and any coloring (i.e. numbers $c_1, c_2, \\dots c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions described in the problem statement. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n4 2\n1 2 2 3\n\nOutput\nYES\n1 1 2 2\n\nInput\n5 2\n3 2 1 2 3\n\nOutput\nYES\n2 1 1 2 1\n\nInput\n5 2\n2 1 1 2 1\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example the answer $2~ 1~ 2~ 1$ is also acceptable.\n\nIn the second example the answer $1~ 1~ 1~ 2~ 2$ is also acceptable.\n\nThere exist other acceptable answers for both examples.", "solutions": "[\"def main():\\n    n, k = list(map(int, input().split()))\\n    a = list(map(int, input().split()))\\n    colors = [[] for _ in range(k)]\\n    seen = [0 for _ in range(5003)]\\n    ans = [-1 for _ in range(n)]\\n    for i, x in enumerate(a):\\n        if seen[x] >= k:\\n            print('NO')\\n            return\\n        ans[i] = seen[x]\\n        colors[ans[i]].append(i)\\n        seen[x] += 1\\n\\n    p = 0\\n    for i in range(k):\\n        if not colors[i]:\\n            while p < i and len(colors[p]) == 1:\\n                p += 1\\n            if p == i:\\n                print('NO')\\n                return\\n\\n            colors[i].append(colors[p].pop())\\n            ans[colors[i][-1]] = i\\n\\n    print('YES')\\n    print(' '.join(str(x + 1) for x in ans))\\n\\nmain()\\n\", \"n, k = list(map(int, input().split()))\\nmass = list(map(int, input().split()))\\nfol = 0\\nfor t in set(mass):\\n    if mass.count(t) > k:\\n        fol = 1\\nfor t in range(n):\\n    mass[t] = [mass[t], t]\\npsi = [0]*n\\nmass.sort()\\nif len(mass) < k or fol:\\n    print('NO')\\nelse:\\n    print('YES')\\n    for t in range(n):\\n        psi[mass[t][1]] = t%k+1\\n    print(' '.join(list(map(str, psi))))\\n\", \"n, k = list(map(int, input().split()))\\nd = {}\\na = list(map(int, input().split()))\\nfor i in a:\\n    if i in d:\\n        d[i] += 1\\n    else:\\n        d[i] = 1\\nif max(d.values()) > k:\\n    print('NO')\\nelse:\\n    print('YES')\\n    res = []\\n    x = 1\\n    s = {i: set() for i in set(a)}\\n    for i in range(k):\\n        res.append(x)\\n        s[a[i]].add(x)\\n        x += 1\\n    for i in range(k, n):\\n        z = 1\\n        while z in s[a[i]]:\\n            z += 1\\n        s[a[i]].add(z)\\n        res.append(z)\\n    print(*res)\\n\", \"n, k = list(map(int, input().split()))\\n\\na = list(map(int, input().split()))\\n\\nb = [[False for j in range(k + 1)] for i in range(5010)]\\n\\nans = [0 for _ in range(n)]\\n\\nfor i in range(k):\\n\\tb[a[i]][i + 1] = True\\n\\tans[i] = i + 1\\n\\nfor i in range(k, n):\\n\\tfor j in range(1, k + 1):\\n\\t\\tif not b[a[i]][j]:\\n\\t\\t\\tb[a[i]][j] = True\\n\\t\\t\\tans[i] = j\\n\\t\\t\\tbreak\\n\\nif min(ans) == 0:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\\tprint(*ans)\\n\", \"def main():\\n    arr=input().split()\\n    n=int(arr[0])\\n    k=int(arr[1])\\n    arr=input().split()\\n    store=[[] for x in range(k)]\\n    colors=[]\\n    if k>n:\\n        print(\\\"NO\\\")\\n    elif k==n:\\n        print(\\\"YES\\\")\\n        string=\\\"\\\"\\n        for x in range(k):\\n            string+=str(x+1)+\\\" \\\"\\n        print(string)\\n        \\n    else:\\n        for x in range(k):\\n            store[x].append(int(arr[x]))\\n            colors.append(x+1)\\n        bo_end=False\\n        for x in range(k,n):\\n            test=int(arr[x])\\n            bo=True\\n            for y in range(k):\\n                if not test in store[y]:\\n                    store[y].append(test)\\n                    colors.append(y+1)\\n                    bo=False\\n                    break\\n            if bo:\\n                break\\n            if x==n-1:\\n                bo_end=True\\n        if bo_end:\\n            print(\\\"YES\\\")\\n            string=\\\"\\\"\\n            for x in colors:\\n                string+=str(x)+\\\" \\\"\\n            print(string)\\n        else:\\n            print(\\\"NO\\\")\\nmain()\\n\", \"n,k=list(map(int,input().split()))\\narr=list(map(int,input().split()))\\ndict1={}\\nfor i in range(n):\\n    try:\\n        dict1[arr[i]].append(i)\\n    except:\\n        KeyError\\n        dict1[arr[i]]=[i]\\nflag=0\\ncolors={}\\nfor i in list(dict1.keys()):\\n    colors[i]=[0]*k\\n    if(len(dict1[i])>k):\\n        flag=1\\n        break\\nif(flag==1):\\n    print('NO')\\nelse:\\n    ansarr=[0]*n\\n    for i in range(k):\\n        ansarr[i]=i+1\\n        colors[arr[i]][i]=1\\n    val=0\\n    for i in list(dict1.keys()):\\n        for j in dict1[i]:\\n            if(ansarr[j]==0):\\n                for l in range(k):\\n                    if(colors[i][l]==0):\\n                        ansarr[j]=l+1\\n                        colors[i][l]=1\\n                        break\\n    print('YES')\\n    print(*ansarr)\\n\", \"#list(map(int,input().split()))\\n#map(int,input().split())\\n#for test in range(t):\\n#int(input())\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\ntup=[[0,0] for i in range(n)]\\nfor i in range(n):\\n    tup[i]=[a[i],i]\\ntup.sort()\\ndp=[0]*n\\ndp[tup[0][1]]=1\\ncp=1\\nflag=0\\nct=1\\nfor i in range(1,n):\\n    if tup[i][0]==tup[i-1][0]:\\n        ct=ct%k+1\\n        cp+=1\\n        if cp>k:\\n            print('NO')\\n            flag=1\\n            break\\n        dp[tup[i][1]]=ct\\n    else:\\n        ct=ct%k+1\\n        cp=1\\n        dp[tup[i][1]] = ct\\nif flag==0:\\n    print('YES')\\n    for i in range(n):\\n        print(dp[i],end=\\\" \\\")\\n\", \"from collections import defaultdict\\n\\ndef __starting_point():\\n\\n    n, k = list(map(int, input().split()))\\n\\n    list_ = list(map(int, input().split()))\\n\\n    if k > n:\\n        print(\\\"NO\\\")\\n        return\\n\\n    result = []\\n    colors = set(range(1, k+1))\\n\\n    total_used = set()\\n    used = defaultdict(set)\\n\\n    for i in list_:\\n        free_colors = colors - used[i]\\n        priority_colors = free_colors - total_used\\n        if not free_colors:\\n            print(\\\"NO\\\")\\n            return\\n        else:\\n            if priority_colors:\\n                color = priority_colors.pop()\\n            else:\\n                color = free_colors.pop()\\n\\n            total_used.add(color)\\n            used[i].add(color)\\n            result.append(color)\\n\\n    print(\\\"YES\\\")\\n    for el in result:\\n        print(el, end=' ')\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\na = [int(e) for e in input().split()]\\nb = [1] * 5555\\ncnt = [0] * 5555\\nc = []\\nfor i in a:\\n    if b[i] > k:\\n        print('NO')\\n        return\\n    c.append(b[i])\\n    cnt[b[i]] += 1\\n    b[i] += 1\\nfor i in range(1, k + 1):\\n    if cnt[i] > 0:\\n        continue\\n    for k, j in enumerate(c):\\n        if cnt[j] > 1:\\n            c[k] = i\\n            cnt[j] -= 1\\n            break\\n\\nprint('YES')\\nprint(' '.join(str(e) for e in c))\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,k=map(int,input().split())\\nA=list(map(int,input().split()))\\n\\nif n<k:\\n    print(\\\"NO\\\")\\n    return\\n\\nLIST=[[] for i in range(max(A)+1)]\\n\\nfor i in range(n):\\n    LIST[A[i]].append(i)\\n\\nfor li in LIST:\\n    if len(li)>k:\\n        print(\\\"NO\\\")\\n        return\\n\\n\\nANS=[None]*n\\n\\ni=1\\nfor li in LIST:\\n    for num in li:\\n        ANS[num]=i\\n        i+=1\\n        if i==k+1:\\n            i=1\\n\\n\\nprint(\\\"YES\\\")\\nfor a in ANS:\\n    print(a,end=\\\" \\\")\\n        \\n    \\n\", \"from operator import itemgetter\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\nc=[0]*5001\\nfor i in range (n):\\n\\tx=a[i]\\n\\tc[x]+=1\\n\\nflag=0\\nar=[([0]*3) for i in range (n)]\\nfor i in range (n):\\n\\tar[i][0]=a[i]\\n\\tar[i][1]=i\\n\\nar=sorted(ar,key=itemgetter(0))\\n#print(ar)\\nfor i in range (5001):\\n\\tif(c[i]>k):\\n\\t\\tflag=1\\n\\t\\tbreak\\n\\nif(flag==0):\\n\\tco=1\\n\\tfor i in range (n):\\n\\t\\tif(co>k):\\n\\t\\t\\tco=1\\n\\t\\tar[i][2]=co\\n\\t\\tco+=1\\n\\tprint(\\\"YES\\\")\\n\\tar=sorted(ar,key=itemgetter(1))\\n\\tfor i in range (n):\\n\\t\\tprint(ar[i][2],end=\\\" \\\")\\n\\n\\tprint()\\n\\nelse:\\n\\tprint(\\\"NO\\\")\\n\\n\", \"def mi():\\n    return list(map(int, input().split()))\\n'''\\n'''\\nn,k = mi()\\na = list(mi())\\nb = set(a)\\nt = [[] for i in range(5004)]\\nfor i in range(n):\\n    t[a[i]].append(i)\\nc = [0]*n\\ncol = 1\\nfor i in range(5004):\\n    if len(t[i])>k:\\n        print ('NO')\\n        return\\n    for j in range(len(t[i])):\\n        c[t[i][j]] = col\\n        col+=1\\n        if col==k+1:\\n            col = 1\\nif len(set(c))<k:\\n    print ('NO')\\n    return\\nprint('YES')\\nprint(*c)\\n\", \"def find(forb, i):\\n    for x in range(len(forb)):\\n        if (i not in forb[x]):\\n            return x\\n    return -1\\n\\ndef new_print(arr):\\n    for i in arr:\\n        print(i, end=\\\" \\\")\\n    print()\\nn, k = input().split()\\nn = int(n)\\nk = int(k)\\narr = input().split()\\nmap(int, arr)\\nans = []\\nempty = set()\\nforb = []\\nfor i in range(k):\\n    forb.append(set())\\n    empty.add(i)\\nfor i in arr:\\n    if(len(empty) != 0):\\n        l = empty.pop()\\n        ans.append(l + 1)\\n        forb[l].add(i)\\n    else:\\n        x = find(forb, i)\\n        if (x == -1):\\n            ans = -1\\n            break\\n        forb[x].add(i)\\n        ans.append(x + 1)\\n\\nif (ans == -1):\\n    print(\\\"NO\\\")\\nelif (len(empty) != 0):\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n    new_print(ans)\\n\", \"n,k=[int(x) for x in input().split()]\\nmas=[int(x) for x in input().split()]\\ntot=[]\\ndic={}\\nfor i in range(k):\\n    dic[i+1]=set()\\n    dic[i+1].add(mas[i])\\n    tot.append(i+1)\\nfor item in range(k,len(mas)):\\n    for i in range(k):\\n        if mas[item] not in dic[i+1]:\\n            tot.append(i+1)\\n            dic[i+1].add(mas[item])\\n            break\\n    else:\\n        print('NO')\\n        break\\nelse:\\n    total=''\\n    for item in tot:\\n        total+=str(item)+' '\\n    print('YES')\\n    print(total[:-1])\\n    \\n\", \"n,k=[int(i) for i in input().split()]\\na=[int(i) for i in input().split()]\\ns=list(set(a))\\nfor i in s:\\n\\tif a.count(i)>k:\\n\\t\\tprint(\\\"NO\\\")\\n\\t\\tquit()\\ndone=[]\\n\\nfor i in range(k):\\n\\tdone.append([])\\nprint(\\\"YES\\\")\\nfor i in range(k):\\n\\tprint(i+1,end=' ')\\n\\tdone[i].append(a[i])\\nfor i in range(k,n):\\n\\tfor j in range(k):\\n\\t\\tif a[i] not in done[j]:\\n\\t\\t\\tprint(j+1,end=' ')\\n\\t\\t\\tdone[j].append(a[i])\\n\\t\\t\\tbreak\", \"color = []\\nans = []\\ncheck = True\\n\\nfor _ in range(5005):\\n    color.append({})\\n\\nN, K = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\nindex = 0 # 0 ~ K-1\\n\\nfor i in range(N):\\n    k=0\\n    while 1:\\n        try:\\n            color[index][ arr[i] ]\\n            index += 1\\n            index %= K\\n            k+=1 \\n        except:\\n            color[index][ arr[i] ] = 1\\n            ans.append(index+1)\\n            index +=1\\n            index %=K\\n            break\\n\\n        if k>K:\\n            print(\\\"NO\\\")\\n            check=False\\n            break \\n    if check==False:\\n        break \\n\\nif check:\\n    print(\\\"YES\\\")\\n    print(*ans)\\n        \\n\\n        \\n\\n\\n\\n\\n\\n\\n\", \"n,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\nd=[0]*(5001)\\nfor i in a:\\n    d[i]+=1\\nfor i in range(1,5001):\\n    if(d[i]>k):\\n        print(\\\"NO\\\")\\n        break\\nelse:\\n    done=[]\\n    for i in range(5001):\\n        done.append(set())\\n    for i in range(k):\\n        done[a[i]].add(i+1)\\n        a[i]=i+1\\n    for i in range(k,n):\\n        for j in range(1,k+1):\\n            if(j not in done[a[i]]):\\n                done[a[i]].add(j)\\n                a[i]=j\\n                break\\n    print(\\\"YES\\\")\\n    print(*a)\", \"from collections import Counter\\n\\nN, K = map(int, input().split())\\na = list(map(int, input().split()))\\ncounter = Counter(a)\\n\\nif counter.most_common(1)[0][1] > K or N < K:\\n    print(\\\"NO\\\")\\n    return\\n\\ncolor_table = {}\\n\\ncurrent_color = 0\\nfor k, v in counter.items():\\n    color_table[k] = current_color\\n    current_color = (current_color + v) % K\\n\\nans = [0]*N\\nfor i, n in enumerate(a):\\n    ans[i] = (color_table[n] % K) + 1\\n    color_table[n] += 1\\n\\nprint(\\\"YES\\\")\\nprint(*ans, sep=\\\" \\\")\", \"n,k = [int(e) for e in input().strip().split()]\\nnum = [int(e) for e in input().strip().split()]\\n\\ncount = dict()\\nvalid = True\\n\\nfor i in range(n):\\n    if num[i] not in count:\\n        count[num[i]] = 0\\n    count[num[i]] += 1\\n    if count[num[i]] > k:\\n        valid = False\\n\\nif not valid:\\n    print(\\\"NO\\\")\\nelse:\\n    out = \\\"\\\"\\n    color = dict()\\n    for i in range(k):\\n        color[i] = set()\\n    now_color = 0\\n    for a in num:\\n        while True:\\n            if a in color[now_color]:\\n                now_color += 1\\n                now_color %= k\\n                continue\\n            else:\\n                out += str(now_color+1) + \\\" \\\"\\n                color[now_color].add(a)\\n                now_color += 1\\n                now_color %= k\\n                break\\n    out = out.strip()\\n    print(\\\"YES\\\")\\n    print(out)\\n\", \"import sys\\nN,K=list(map(int,input().split()))\\nA=[int(i) for i in input().split()]\\nL=[0]*(5001)\\nnum=[0]*(5001)\\nfor a in A:\\n    num[a]+=1\\nfor s in num:\\n    if s>K:\\n        print('NO')\\n        return\\ntable=[]\\nfor i in range(N):\\n    table.append((A[i],i))\\ntable.sort()\\nans=[0]*N\\n#print(table)\\nt=0\\nfor a,i in table:\\n    t+=1\\n    if t%K!=0:\\n        ans[i]=t%K\\n    else:\\n        ans[i]=K\\nprint('YES')\\nprint(' '.join(map(str,ans)))\\n\", \"n, k = map(int, input().split())\\nar = list(map(int, input().split()))\\ns = set(ar)\\nd = dict()\\nfor x in s:\\n    d[x] = 0\\nfor x in ar:\\n    d[x] += 1\\nf = 1\\nfor x in d:\\n    if d[x] > k:\\n        f = 0\\nif f == 0:\\n    print('NO')\\nelse:\\n    z = ar[:]\\n    z = [[z[x], x, -1] for x in range(n)]\\n    z.sort(key = lambda x: x[0])\\n    w = 1\\n    for x in range(n):\\n        z[x][2] = w\\n        w = (w + 1) % k\\n        if w == 0:\\n            w = k\\n    z.sort(key = lambda x: x[1])\\n    print('YES')\\n    for x in z:\\n        print(x[2], end = ' ')\\n\\n\", \"# import math\\n# import sys\\nn,k = [int(x) for x in input().strip().split(\\\" \\\")]\\na = [int(x) for x in input().strip().split(\\\" \\\")]\\nd = {}\\nc = {}\\nflag = False\\nb = []\\nfor i in range(n):\\n\\tif a[i] in d:\\n\\t\\td[a[i]].append(i)\\n\\t\\tc[a[i]]+=1\\n\\telse:\\n\\t\\td[a[i]]=[i]\\n\\t\\tc[a[i]]=1\\n\\tb.append(0)\\n\\tif c[a[i]]>k:\\n\\t\\tflag=True\\n\\t\\tbreak\\n\\nif flag:\\n\\tprint(\\\"NO\\\")\\nelse:\\n\\tprint(\\\"YES\\\")\\n\\tcur=0\\n\\tfor j in d:\\n\\t\\tfor i in d[j]:\\n\\t\\t\\tb[i] = (cur%k)+1\\n\\t\\t\\tcur+=1\\n\\tfor i in range(n):\\n\\t\\tprint(b[i],end=\\\" \\\")\\n\\tprint()\", \"n,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\ns=list(set(a))\\nm=[0]*5005\\nk1=[]\\nfor i in range(n):\\n    k1.append([a[i],i])\\nk1.sort()   \\nans=[0]*n \\nfor i in a:\\n    m[i]+=1\\nf=0\\nfor i in s:\\n    if m[i]>k:\\n        f=1\\nif f==1:\\n    print(\\\"NO\\\")\\nelse:\\n    j=0\\n    print(\\\"YES\\\")\\n    for i in range(n):\\n        ans[k1[i][1]]=i%k+1\\n    print(*ans)        \\n        \\n\\n\", \"q,w = list(map(int,input().split()))\\na = list(map(int,input().split()))\\ns = []\\nd = []\\nans = []\\nb = True\\nfor i in a:\\n    if (i in s):\\n        k = s.index(i)\\n        d[k] += 1\\n        ans.append(d[k])\\n    else:\\n        s.append(i)\\n        ans.append(1)\\n        d.append(1)\\nj = max(ans)\\nif (j>w):\\n    print('NO')\\nelse:\\n    l = 1\\n    i = j+1\\n    while (i<w+1):\\n        while(ans.count(l)==1):\\n            l+=1\\n        h = ans.count(l)\\n        while ((i<w+1)&(h>1)):\\n            f = ans.index(l)\\n            ans = ans[:f]+[i]+ans[f+1:]\\n            i+=1\\n            h-=1\\n    print(\\\"YES\\\")\\n    print(*ans)\\n\", \"N, K = map(int, input().split())\\n\\narr = list(map(int, input().split()))\\n\\ncDict = dict()\\n\\n\\nisFine = True\\n\\nfor a in arr:\\n    if a not in cDict: cDict[a] = 1\\n    else: cDict[a] += 1\\n    \\n    if cDict[a] > K:\\n        isFine = False\\n        break\\n    \\nif not isFine:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n    fDict = dict()\\n    lastC = 0\\n    for c in cDict:\\n        fDict[c] = cDict[c] + lastC\\n        lastC = fDict[c]\\n        \\n    ansArr = []\\n    for a in arr:\\n        ansArr.append(fDict[a])\\n        fDict[a] -= 1\\n    \\n    for an in ansArr:\\n        print(an % K + 1, end = ' ')\\n        \"]", "input_output": "{\n  \"inputs\": [\n    \"4 2\\n1 2 2 3\\n\",\n    \"5 2\\n3 2 1 2 3\\n\",\n    \"5 2\\n2 1 1 2 1\\n\",\n    \"5 4\\n1 1 1 2 2\\n\",\n    \"11 9\\n1 1 2 2 2 2 2 2 3 4 5\\n\",\n    \"4 4\\n1 2 2 3\\n\",\n    \"5 5\\n1 1 2 1 1\\n\",\n    \"4 4\\n1 1 2 2\\n\",\n    \"5 4\\n1 2 1 2 3\\n\",\n    \"5 5\\n1 1 2 1 3\\n\",\n    \"10 10\\n1 2 3 1 2 3 4 5 6 7\\n\",\n    \"8 6\\n1 2 3 3 2 2 3 1\\n\",\n    \"6 4\\n1 1 2 2 3 3\\n\",\n    \"5 5\\n1 1 2 2 3\\n\",\n    \"4 3\\n2 2 1 1\\n\",\n    \"10 10\\n1 1 2 2 3 3 4 4 5 5\\n\",\n    \"6 5\\n1 1 2 2 3 3\\n\",\n    \"4 4\\n3 3 3 5\\n\",\n    \"9 8\\n1 2 2 3 3 3 4 5 4\\n\",\n    \"5 5\\n2 1 1 2 1\\n\",\n    \"6 6\\n1 1 2 1 2 2\\n\",\n    \"6 6\\n1 1 1 2 2 2\\n\",\n    \"8 8\\n1 1 1 1 1 2 2 3\\n\",\n    \"6 6\\n2 1 1 2 1 3\\n\",\n    \"5 3\\n3 2 1 2 3\\n\",\n    \"6 6\\n1 2 3 3 3 3\\n\",\n    \"1 1\\n5000\\n\",\n    \"3 3\\n6 7 8\\n\",\n    \"8 6\\n1 1 2 2 3 4 5 6\\n\",\n    \"7 5\\n2 3 2 1 1 1 3\\n\",\n    \"5 4\\n1 2 1 2 4\\n\",\n    \"8 8\\n1 2 2 2 1 1 3 3\\n\",\n    \"3 2\\n5000 5000 5000\\n\",\n    \"7 6\\n1 2 3 4 2 3 4\\n\",\n    \"2 1\\n5000 5000\\n\",\n    \"5 4\\n3 2 1 2 3\\n\",\n    \"4 4\\n2 1 2 3\\n\",\n    \"4 4\\n2 1 3 2\\n\",\n    \"6 6\\n1 2 2 2 3 3\\n\",\n    \"7 6\\n1 2 3 7 7 7 7\\n\",\n    \"1 1\\n500\\n\",\n    \"8 8\\n2 1 1 1 1 1 1 1\\n\",\n    \"6 6\\n1 1 2 2 3 3\\n\",\n    \"10 9\\n1 2 1 1 1 1 1 1 2 1\\n\",\n    \"8 8\\n1 2 8 2 3 3 3 3\\n\",\n    \"9 9\\n1 2 2 3 2 5 3 6 8\\n\",\n    \"4 4\\n1 2 1 2\\n\",\n    \"4 2\\n2000 2000 2000 3\\n\",\n    \"5 5\\n1 2 1 2 4\\n\",\n    \"8 8\\n1 2 2 2 1 1 1 1\\n\",\n    \"5 5\\n3 2 1 2 3\\n\",\n    \"9 9\\n1 1 1 1 2 2 2 2 2\\n\",\n    \"6 6\\n1 1 1 1 2 3\\n\",\n    \"5 5\\n1 2 2 1 1\\n\",\n    \"50 20\\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\\n\",\n    \"5 5\\n1 2 3 3 3\\n\",\n    \"5 5\\n1 1 1 3 3\\n\",\n    \"7 3\\n1 2 3 4 5 5 1\\n\",\n    \"2 1\\n7 9\\n\",\n    \"4 2\\n4999 4999 4999 3\\n\",\n    \"5 5\\n1 1 3 3 3\\n\",\n    \"3 3\\n1 1 2\\n\",\n    \"5 5\\n2 2 1 1 2\\n\",\n    \"6 5\\n1 2 3 4 4 4\\n\",\n    \"1 1\\n1\\n\",\n    \"6 6\\n1 2 1 2 4 5\\n\",\n    \"8 6\\n1 2 3 4 1 2 3 4\\n\",\n    \"6 5\\n1 2 1 2 1 2\\n\",\n    \"10 10\\n1 2 3 1 2 3 1 2 4 5\\n\",\n    \"8 5\\n9 3 9 6 10 7 8 2\\n\",\n    \"18 18\\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\\n\",\n    \"5 1\\n5 2 3 4 5\\n\",\n    \"9 9\\n9 8 1 3 4 5 3 8 9\\n\",\n    \"10 10\\n1 2 3 3 2 1 4 5 7 10\\n\",\n    \"10 10\\n1 2 3 3 2 1 4 5 6 10\\n\",\n    \"3 2\\n500 500 500\\n\",\n    \"5 5\\n1 2 3 1 2\\n\",\n    \"10 5\\n1 2 3 4 1 2 3 4 1 2\\n\",\n    \"10 7\\n1 2 3 1 2 3 1 2 3 1\\n\",\n    \"3 3\\n1 2 2\\n\",\n    \"4 4\\n4999 5000 5000 4999\\n\",\n    \"12 12\\n8 8 8 8 8 8 4 4 4 4 2 2\\n\",\n    \"5 4\\n25 2 3 2 2\\n\",\n    \"7 6\\n1 1 1 1 1 2 2\\n\",\n    \"3 3\\n5 5 5\\n\",\n    \"1 1\\n2\\n\",\n    \"6 2\\n100 100 101 101 102 102\\n\",\n    \"8 8\\n1 1 2 2 3 3 4 4\\n\",\n    \"3 1\\n2 2 1\\n\",\n    \"5 5\\n1 1 2 2 1\\n\",\n    \"8 6\\n1 1 1 1 2 2 2 2\\n\",\n    \"3 2\\n2019 2019 2019\\n\",\n    \"3 2\\n2018 2018 2018\\n\",\n    \"10 10\\n1 2 3 1 2 3 4 5 6 42\\n\",\n    \"7 7\\n1 1 1 1 2 3 4\\n\",\n    \"10 10\\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\\n\",\n    \"5 4\\n1 4 6 6 3\\n\",\n    \"4 4\\n1 2 2 1\\n\",\n    \"6 6\\n1 1 2 2 3 4\\n\",\n    \"6 3\\n2 1 3 4 5 1\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n1 2 1 2 \\n\",\n    \"YES\\n2 2 1 1 1 \\n\",\n    \"NO\\n\",\n    \"YES\\n1 2 3 4 1 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 8 9 1 2 \\n\",\n    \"YES\\n1 2 3 4 \\n\",\n    \"YES\\n1 2 5 3 4 \\n\",\n    \"YES\\n1 2 3 4 \\n\",\n    \"YES\\n1 3 2 4 1 \\n\",\n    \"YES\\n1 2 4 3 5 \\n\",\n    \"YES\\n1 3 5 2 4 6 7 8 9 10 \\n\",\n    \"YES\\n1 3 6 1 4 5 2 2 \\n\",\n    \"YES\\n1 2 3 4 1 2 \\n\",\n    \"YES\\n1 2 3 4 5 \\n\",\n    \"YES\\n3 1 1 2 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 8 9 10 \\n\",\n    \"YES\\n1 2 3 4 5 1 \\n\",\n    \"YES\\n1 2 3 4 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 1 8 \\n\",\n    \"YES\\n4 1 2 5 3 \\n\",\n    \"YES\\n1 2 4 3 5 6 \\n\",\n    \"YES\\n1 2 3 4 5 6 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 8 \\n\",\n    \"YES\\n4 1 2 5 3 6 \\n\",\n    \"YES\\n1 2 1 3 2 \\n\",\n    \"YES\\n1 2 3 4 5 6 \\n\",\n    \"YES\\n1 \\n\",\n    \"YES\\n1 2 3 \\n\",\n    \"YES\\n1 2 3 4 5 6 1 2 \\n\",\n    \"YES\\n4 1 5 1 2 3 2 \\n\",\n    \"YES\\n1 3 2 4 1 \\n\",\n    \"YES\\n1 4 5 6 2 3 7 8 \\n\",\n    \"NO\\n\",\n    \"YES\\n1 2 4 6 3 5 1 \\n\",\n    \"NO\\n\",\n    \"YES\\n4 2 1 3 1 \\n\",\n    \"YES\\n2 1 3 4 \\n\",\n    \"YES\\n2 1 4 3 \\n\",\n    \"YES\\n1 2 3 4 5 6 \\n\",\n    \"YES\\n1 2 3 4 5 6 1 \\n\",\n    \"YES\\n1 \\n\",\n    \"YES\\n8 1 2 3 4 5 6 7 \\n\",\n    \"YES\\n1 2 3 4 5 6 \\n\",\n    \"YES\\n1 9 2 3 4 5 6 7 1 8 \\n\",\n    \"YES\\n1 2 8 3 4 5 6 7 \\n\",\n    \"YES\\n1 2 3 5 4 7 6 8 9 \\n\",\n    \"YES\\n1 3 2 4 \\n\",\n    \"NO\\n\",\n    \"YES\\n1 3 2 4 5 \\n\",\n    \"YES\\n1 6 7 8 2 3 4 5 \\n\",\n    \"YES\\n4 2 1 3 5 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 8 9 \\n\",\n    \"YES\\n1 2 3 4 5 6 \\n\",\n    \"YES\\n1 4 5 2 3 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \\n\",\n    \"YES\\n1 2 3 4 5 \\n\",\n    \"YES\\n1 2 3 4 5 \\n\",\n    \"YES\\n1 3 1 2 3 1 2 \\n\",\n    \"YES\\n1 1 \\n\",\n    \"NO\\n\",\n    \"YES\\n1 2 3 4 5 \\n\",\n    \"YES\\n1 2 3 \\n\",\n    \"YES\\n3 4 1 2 5 \\n\",\n    \"YES\\n1 2 3 4 5 1 \\n\",\n    \"YES\\n1 \\n\",\n    \"YES\\n1 3 2 4 5 6 \\n\",\n    \"YES\\n1 3 5 1 2 4 6 2 \\n\",\n    \"YES\\n1 4 2 5 3 1 \\n\",\n    \"YES\\n1 4 7 2 5 8 3 6 9 10 \\n\",\n    \"YES\\n1 2 2 3 3 4 5 1 \\n\",\n    \"YES\\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \\n\",\n    \"NO\\n\",\n    \"YES\\n8 6 1 2 4 5 3 7 9 \\n\",\n    \"YES\\n1 3 5 6 4 2 7 8 9 10 \\n\",\n    \"YES\\n1 3 5 6 4 2 7 8 9 10 \\n\",\n    \"NO\\n\",\n    \"YES\\n1 3 5 2 4 \\n\",\n    \"YES\\n1 4 2 4 2 5 3 5 3 1 \\n\",\n    \"YES\\n1 5 1 2 6 2 3 7 3 4 \\n\",\n    \"YES\\n1 2 3 \\n\",\n    \"YES\\n1 3 4 2 \\n\",\n    \"YES\\n7 8 9 10 11 12 3 4 5 6 1 2 \\n\",\n    \"YES\\n1 1 4 2 3 \\n\",\n    \"YES\\n1 2 3 4 5 6 1 \\n\",\n    \"YES\\n1 2 3 \\n\",\n    \"YES\\n1 \\n\",\n    \"YES\\n1 2 1 2 1 2 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 8 \\n\",\n    \"NO\\n\",\n    \"YES\\n1 2 4 5 3 \\n\",\n    \"YES\\n1 2 3 4 5 6 1 2 \\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1 3 5 2 4 6 7 8 9 10 \\n\",\n    \"YES\\n1 2 3 4 5 6 7 \\n\",\n    \"YES\\n1 3 5 2 4 6 7 8 9 10 \\n\",\n    \"YES\\n1 3 4 1 2 \\n\",\n    \"YES\\n1 3 4 2 \\n\",\n    \"YES\\n1 2 3 4 5 6 \\n\",\n    \"YES\\n3 1 1 2 3 2 \\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1102/B", "starter_code": ""}
{"id": 4009, "question": "You are given a huge decimal number consisting of $n$ digits. It is guaranteed that this number has no leading zeros. Each digit of this number is either 0 or 1.\n\nYou may perform several (possibly zero) operations with this number. During each operation you are allowed to change any digit of your number; you may change 0 to 1 or 1 to 0. It is possible that after some operation you can obtain a number with leading zeroes, but it does not matter for this problem.\n\nYou are also given two integers $0 \\le y < x < n$. Your task is to calculate the minimum number of operations you should perform to obtain the number that has remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, x, y$ ($0 \\le y < x < n \\le 2 \\cdot 10^5$) \u2014 the length of the number and the integers $x$ and $y$, respectively.\n\nThe second line of the input contains one decimal number consisting of $n$ digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of operations you should perform to obtain the number having remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Examples-----\nInput\n11 5 2\n11010100101\n\nOutput\n1\n\nInput\n11 5 1\n11010100101\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example the number will be $11010100100$ after performing one operation. It has remainder $100$ modulo $100000$.\n\nIn the second example the number will be $11010100010$ after performing three operations. It has remainder $10$ modulo $100000$.", "solutions": "[\"n, x, y = map(int, input().split())\\ns = input()[-x:]\\nres = s.count('1')\\nif s[-y - 1] == '1': res -= 1\\nelse: res += 1\\n# print(s)\\nprint(res)\", \"n, x, y = map(int, input().split())\\ns = input()\\ncnt = 0\\nfor i in range(n - x, n):\\n    if s[i] == '1':\\n        if i != n - y - 1: cnt += 1\\n    elif i == n - y - 1: cnt += 1\\nprint(cnt)\", \"n, x, y = list(map(int, input().split()))\\ns = input()\\ns = s[::-1]\\nans = 0\\nfor i in range(x):\\n    if i == y:\\n        if s[i] == \\\"0\\\":\\n            ans += 1\\n    else:\\n        if s[i] == \\\"1\\\":\\n            ans += 1\\nprint(ans)\\n\", \"n, x, y = list(map(int, input().split()))\\ns = input()\\nans = 0\\nfor i in range(n - x, n):\\n\\tif i < n - y - 1:\\n\\t\\tif s[i] == '1':\\n\\t\\t\\tans += 1\\n\\telse:\\n\\t\\tif i == n - y - 1:\\n\\t\\t\\tif s[i] == '0':\\n\\t\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tif (s[i] == '1'):\\n\\t\\t\\t\\tans += 1\\nprint(ans)\\n\", \"n, x, y = map(int, input().split())\\ns = input()\\ns = s[-x:]\\ncnt = 0\\nfor i in range(len(s)):\\n    if i == x - y - 1 and s[i] == '0':\\n        cnt += 1\\n    elif s[i] == '1' and i != x - y - 1:\\n        cnt += 1\\nprint(cnt)\", \"n, x, y = list(map(int, input().split()))\\ns = input().strip()\\nans = 0\\nfor i in range(x):\\n    if i == y:\\n        ans += s[n - 1 - i] == '0'\\n    else:\\n        ans += s[n - 1 - i] == '1'\\nprint(ans)\\n\", \"def main():\\n    n, x, y = map(int, input().split())\\n    s = input()\\n    ans = 0\\n    for i in range(-1, -x - 1, -1):\\n        if i == -(y + 1):\\n            ans += s[i] != '1'\\n            continue\\n        ans += s[i] == '1'\\n    print(int(ans))\\n    return 0\\n\\nmain()\", \"import math\\nimport bisect\\nimport heapq\\nfrom collections import defaultdict\\n\\n\\ndef egcd(a, b):\\n    if a == 0:\\n        return (b, 0, 1)\\n    else:\\n        g, x, y = egcd(b % a, a)\\n        return (g, y - (b // a) * x, x)\\n\\n\\ndef mulinv(b, n):\\n    g, x, _ = egcd(b, n)\\n    if g == 1:\\n        return x % n\\n\\n\\n\\ndef isprime(n):\\n    for d in range(2, int(math.sqrt(n))+1):\\n        if n % d == 0:\\n            return False\\n    return True\\n\\n\\ndef argsort(ls):\\n    return sorted(range(len(ls)), key=ls.__getitem__)\\n\\n\\ndef f(p=0):\\n    if p == 1:\\n        return map(int, input().split())\\n    elif p == 2:\\n        return list(map(int, input().split()))\\n    elif p == 3:\\n        return list(input())\\n    else:\\n        return int(input())\\n\\nn, x, y = f(1)\\ns = f(3)\\n\\ncount = 0\\n\\nfor i in range(n-x, n):\\n    if (s[i]=='1' and i!=n-1-y) or (s[i]=='0' and i==n-1-y):\\n        count+=1\\n\\nprint(count)\", \"# AC\\nimport sys\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = self.next_line()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_line(self):\\n        return sys.stdin.readline().split()\\n\\n    def next_ints(self):\\n        return [int(x) for x in sys.stdin.readline().split()]\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def solve(self):\\n        n, x, y = self.next_ints()\\n        xx = next(self)\\n        stp = 0\\n        for i in range(0, x):\\n            if i == y:\\n                if xx[- 1 - i] != '1':\\n                    stp += 1\\n            elif xx[-1 - i] != '0':\\n                stp += 1\\n        print(stp)\\n\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\", \"n, x, y = list(map(int, input().split()))\\ns = input()\\nans = 0\\nfor i in range(n - x, n):\\n    if i == n - y - 1:\\n        if (s[i] == '0'):\\n            ans += 1\\n    else:\\n        if (s[i] == '1'):\\n            ans += 1\\nprint(ans)\\n\", \"n, x, y = map(int, input().split())\\ns = input()\\ncount = 0\\nfor i in range(n - x, n):\\n    if s[i] == \\\"1\\\" and i != n - y - 1:\\n        count += 1\\n    if s[i] == \\\"0\\\" and i == n - y - 1:\\n        count += 1\\nprint(count)\", \"n,x,y = list(map(int, input().split()))\\nnum = input()\\nans=0\\nfor i in range(x):\\n    if i==y:\\n        if num[n-1-i]!=\\\"1\\\":\\n            ans+=1\\n    else:\\n        if num[n-1-i]!=\\\"0\\\":\\n            ans+=1\\nprint(ans)\\n#r = list(map(int, input().split()))\\n\", \"n,x,y=[int(x) for x in input().split()]\\na=[int(x) for x in list(input())]\\ncounter=0\\nfor i in range(n-x,n):\\n    if i==n-y-1:\\n        if a[i]==0:\\n            counter+=1\\n    else:\\n        if a[i]==1:\\n            counter+=1\\nprint(counter)\\n\", \"def main():\\n    from sys import stdin, stdout\\n\\n    def read():\\n        return stdin.readline().rstrip('\\\\n')\\n\\n    def read_array(sep=None, maxsplit=-1):\\n        return read().split(sep, maxsplit)\\n\\n    def read_int():\\n        return int(read())\\n\\n    def read_int_array(sep=None, maxsplit=-1):\\n        return [int(a) for a in read_array(sep, maxsplit)]\\n\\n    def write(*args, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in args) + end)\\n\\n    def write_array(array, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in array) + end)\\n\\n    n, x, y = read_int_array()\\n    s = read()\\n    out = 0\\n    for i in range(x):\\n        if i != y and s[-1-i] == '1':\\n            out += 1\\n        elif i == y and s[-1-i] == '0':\\n            out += 1\\n    write(out)\\n\\nmain()\\n\", \"l = list(map(int,input().split()))\\nn = l[0]\\nx = l[1]\\ny = l[2]\\ns = input()\\nstring = s[::-1]\\ncount = 0\\nfor i in range(y):\\n\\tif(string[i]==\\\"1\\\"):\\n\\t\\tcount+=1\\nif(string[y]==\\\"0\\\"):\\n\\tcount+=1\\nfor i in range(y+1,x):\\n\\tif(string[i]==\\\"1\\\"):\\n\\t\\tcount+=1\\nprint(count)\", \"n,x,y = list(map(int,input().split()))\\ns = input()\\n\\nprint(s[-x:].count('1') - (1 if s[-y-1]=='1' else -1))\\n#print(s[-x:],s[-x:].count('1'),1 if s[-y-1]=='1' else 0)\\n\\n\", \"n,x,y=input().split()\\nans=0\\ns=input()\\ns=s[::-1]\\ns=s[:int(x)]\\nfor i in range(0,len(s)):\\n    if i==int(y):\\n        if s[i]=='0':\\n            ans+=1\\n    else :\\n        if s[i]=='1':\\n            ans+=1\\n            \\nprint(ans)\\n\", \"IN = input\\nrint = lambda: int(IN())\\nrmint = lambda: map(int, IN().split())\\nrlist = lambda: list(rmint())\\n\\nn, x, y = rmint()\\nt = list(map(int,list(IN())))\\nt.reverse()\\nt = t[:x]\\nt[y] = 1 - t[y]\\nprint(sum(t))\", \"n, x, y = map( int, input().split() )\\n\\ns = input()\\n\\nans = 0\\n\\nfor i in range( x ):\\n    if s[ -(i + 1) ] != ( '1' if i == y else '0' ) :\\n        ans += 1\\n\\nprint( ans )\", \"[n, x, y] = [int(i) for i in input().split()]\\ns = input()\\nt = \\\"\\\"\\nfor i in range(x):\\n\\tt += s[len(s) - 1 - i]\\nans = 0\\nfor i in range(x):\\n\\tif y == i:\\n\\t\\tans += int(t[i] != '1')\\n\\telse:\\n\\t\\tans += int(t[i] != '0')\\nprint (ans)\", \"n,x,y=list(map(int,input().split()))\\nA=input()[-x:]\\nB=str(10**y).zfill(x)\\n\\nANS=0\\nfor i in range(x):\\n    if A[i]!=B[i]:\\n        ANS+=1\\n\\nprint(ANS)\\n\", \"n, x, y = list(map(int,input().split()))\\nl = input()\\nwyn = 0\\nfor i in range(n):\\n\\tj = n - 1 - i\\n\\tif i == x:\\n\\t\\tbreak\\n\\tif i < y:\\n\\t\\tif l[j] == '1':\\n\\t\\t\\twyn += 1\\n\\tif i == y:\\n\\t\\tif l[j] == '0':\\n\\t\\t\\twyn += 1\\n\\tif i > y:\\n\\t\\tif l[j] == '1':\\n\\t\\t\\twyn += 1\\nprint(wyn)\", \"n,x,y=map(int,input().split())\\na=input()\\ncount=0\\na=a[::-1]\\nfor i in range(y):\\n    if a[i]=='1':\\n        count+=1\\nif a[y]=='0':\\n    count+=1\\nfor i in range(y+1,x):\\n    if a[i]=='1':\\n        count+=1\\nprint(count)\", \"l=(input().split())\\nn=int(l[0])\\nx=int(l[1])\\ny=int(l[2])\\nnum=input()\\ncount=0\\nfor i in range(n-1,n-x-1,-1):\\n\\tif i==(n-1-y):\\n\\t\\tif num[i]==\\\"0\\\":\\n\\t\\t\\tcount+=1\\n\\telse:\\n\\t\\tif num[i]==\\\"1\\\":\\n\\t\\t\\tcount+=1\\nprint (count)\", \"# stdin=open('input.txt')\\nfrom sys import stdin\\n\\ndef input():\\n\\treturn stdin.readline()[:-1]\\n\\n\\n# # stdout=open('output.txt',mode='w+')\\n\\n# # def print(x, end='\\\\n'):\\n# # \\tstdout.write(str(x) +end)\\n\\n\\n# # a, b = map(int, input().split())\\n\\n# # l = list(map(int, input().split()))\\n\\n\\n\\n\\n\\n\\n\\n# CODE BEGINS HERE.................\\n\\n\\nn, x, y = list(map(int, input().split()))\\ns = input()\\nones = s[-1*x:].count('1') - (s[-1 * y - 1] == '1') + (s[-1 * y - 1] == '0')\\n\\nprint(ones)\\n\\n\\n#CODE ENDS HERE....................\\n\\n#stdout.close()\\n\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"11 5 2\\n11010100101\\n\",\n    \"11 5 1\\n11010100101\\n\",\n    \"2 1 0\\n10\\n\",\n    \"11 5 2\\n11010000101\\n\",\n    \"11 5 0\\n11010011001\\n\",\n    \"7 3 0\\n1100101\\n\",\n    \"7 5 2\\n1000100\\n\",\n    \"4 2 1\\n1011\\n\",\n    \"100 89 33\\n1011000100000110011111000100001000000000010110100111101110111011010001010110110011010110101101111101\\n\",\n    \"3 1 0\\n100\\n\",\n    \"5 1 0\\n10001\\n\",\n    \"11 5 2\\n10000000000\\n\",\n    \"5 3 2\\n10100\\n\",\n    \"13 10 0\\n1000001101100\\n\",\n    \"8 5 2\\n10000010\\n\",\n    \"9 3 2\\n100010101\\n\",\n    \"8 3 1\\n10000000\\n\",\n    \"5 3 2\\n10111\\n\",\n    \"12 5 2\\n100000000100\\n\",\n    \"5 3 0\\n10000\\n\",\n    \"5 3 2\\n10010\\n\",\n    \"5 2 1\\n11010\\n\",\n    \"5 3 2\\n10000\\n\",\n    \"5 1 0\\n11101\\n\",\n    \"4 2 0\\n1000\\n\",\n    \"6 4 2\\n100010\\n\",\n    \"11 5 0\\n11010100100\\n\",\n    \"6 2 1\\n111000\\n\",\n    \"50 14 6\\n10110010000100111011111111000010001011100010100110\\n\",\n    \"5 3 2\\n10011\\n\",\n    \"5 2 0\\n10000\\n\",\n    \"5 3 1\\n10001\\n\",\n    \"60 17 15\\n111101011111000010000001011000000001010011001000011100110100\\n\",\n    \"20 11 9\\n11110000010011101010\\n\",\n    \"7 5 3\\n1011000\\n\",\n    \"8 6 5\\n10100000\\n\",\n    \"39 15 0\\n101101100000000000110001011011111010011\\n\",\n    \"46 16 10\\n1001011011100010100000101001001010001110111101\\n\",\n    \"5 2 1\\n10000\\n\",\n    \"96 25 9\\n101110000001101011011001000111010111110011010010100111111100101111010000100001111100101001101011\\n\",\n    \"8 5 2\\n10000100\\n\",\n    \"11 5 2\\n11110000101\\n\",\n    \"8 5 2\\n10011110\\n\",\n    \"81 24 18\\n111010110101010001111101100001101000000100111111111001100101011110001000001000110\\n\",\n    \"7 4 2\\n1000100\\n\",\n    \"5 3 0\\n10111\\n\",\n    \"16 2 0\\n1101011000011000\\n\",\n    \"5 1 0\\n10000\\n\",\n    \"5 3 0\\n10001\\n\",\n    \"11 5 1\\n11010000101\\n\",\n    \"5 2 0\\n11011\\n\",\n    \"10 5 3\\n1000000000\\n\",\n    \"74 45 35\\n10110111111000011110111110000101000110000000100010101010001110010111100101\\n\",\n    \"10 5 2\\n1101000100\\n\",\n    \"4 1 0\\n1000\\n\",\n    \"46 15 12\\n1000111101111100001010001100000001000101010100\\n\",\n    \"74 43 12\\n10001011100000010110110111000101110100000000001100100100110110111101001011\\n\",\n    \"6 3 2\\n100000\\n\",\n    \"51 44 21\\n111011011001100110101011100110010010011111111101000\\n\",\n    \"213 5 3\\n111001111110111001101011111100010010011001000001111010110110011000100000101010111110010001111110001010011001101000000011111110101001101100100100110100000111111100010100011010010001011100111011000001110000111000101\\n\",\n    \"64 40 14\\n1010011100101100101011000001000011110111011011000111011011000100\\n\",\n    \"40 7 0\\n1101010110000100101110101100100101001000\\n\",\n    \"10 5 3\\n1111000100\\n\",\n    \"6 3 1\\n100010\\n\",\n    \"12 4 3\\n110011100111\\n\",\n    \"78 7 5\\n101001001101100101110111111110010011101100010100100001111011110110111100011101\\n\",\n    \"10 7 3\\n1101111111\\n\",\n    \"5 2 1\\n10010\\n\",\n    \"28 25 19\\n1000011111100000111101010101\\n\",\n    \"15 6 1\\n100000000100100\\n\",\n    \"7 5 2\\n1010100\\n\",\n    \"49 15 14\\n1011110111101100110101010110110100001100011011010\\n\",\n    \"6 3 1\\n110110\\n\",\n    \"6 4 2\\n100100\\n\",\n    \"4 1 0\\n1101\\n\",\n    \"7 5 2\\n1000000\\n\",\n    \"4 2 1\\n1000\\n\",\n    \"11 5 2\\n11010000001\\n\",\n    \"6 1 0\\n100000\\n\",\n    \"107 5 3\\n11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"7 5 4\\n1010100\\n\",\n    \"11 5 4\\n10101010101\\n\",\n    \"7 5 2\\n1000101\\n\",\n    \"8 5 1\\n10000000\\n\",\n    \"6 3 0\\n110011\\n\",\n    \"5 3 1\\n10111\\n\",\n    \"103 5 2\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"102 5 2\\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"5 1 0\\n10101\\n\",\n    \"7 1 0\\n1111001\\n\",\n    \"10 1 0\\n1000000000\\n\",\n    \"10 1 0\\n1010000100\\n\",\n    \"10 5 3\\n1111001111\\n\",\n    \"11 5 2\\n11110000100\\n\",\n    \"11 1 0\\n11010100101\\n\",\n    \"11 5 1\\n11111000010\\n\",\n    \"52 43 29\\n1111010100110101101000010110101110011101110111101001\\n\",\n    \"4 2 0\\n1001\\n\",\n    \"5 4 0\\n11001\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"47\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"9\\n\",\n    \"11\\n\",\n    \"1\\n\",\n    \"12\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"20\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"21\\n\",\n    \"1\\n\",\n    \"26\\n\",\n    \"3\\n\",\n    \"19\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"13\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"26\\n\",\n    \"0\\n\",\n    \"1\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1165/A", "starter_code": ""}
{"id": 4010, "question": "You are given an array $a$ consisting of $n$ integers.\n\nYour task is to determine if $a$ has some subsequence of length at least $3$ that is a palindrome.\n\nRecall that an array $b$ is called a subsequence of the array $a$ if $b$ can be obtained by removing some (possibly, zero) elements from $a$ (not necessarily consecutive) without changing the order of remaining elements. For example, $[2]$, $[1, 2, 1, 3]$ and $[2, 3]$ are subsequences of $[1, 2, 1, 3]$, but $[1, 1, 2]$ and $[4]$ are not.\n\nAlso, recall that a palindrome is an array that reads the same backward as forward. In other words, the array $a$ of length $n$ is the palindrome if $a_i = a_{n - i - 1}$ for all $i$ from $1$ to $n$. For example, arrays $[1234]$, $[1, 2, 1]$, $[1, 3, 2, 2, 3, 1]$ and $[10, 100, 10]$ are palindromes, but arrays $[1, 2]$ and $[1, 2, 3, 1]$ are not.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nNext $2t$ lines describe test cases. The first line of the test case contains one integer $n$ ($3 \\le n \\le 5000$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$ ($\\sum n \\le 5000$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if $a$ has some subsequence of length at least $3$ that is a palindrome and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case of the example, the array $a$ has a subsequence $[1, 2, 1]$ which is a palindrome.\n\nIn the second test case of the example, the array $a$ has two subsequences of length $3$ which are palindromes: $[2, 3, 2]$ and $[2, 2, 2]$.\n\nIn the third test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\n\nIn the fourth test case of the example, the array $a$ has one subsequence of length $4$ which is a palindrome: $[1, 2, 2, 1]$ (and has two subsequences of length $3$ which are palindromes: both are $[1, 2, 1]$).\n\nIn the fifth test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.", "solutions": "[\"for i in range(int(input())):\\n    n = int(input())\\n    arr = list(map(int, input().split()))\\n    flag = False\\n    for j in range(len(arr)):\\n        for c in range(j + 2, len(arr)):\\n            if arr[c] == arr[j]:\\n                flag = True\\n                break\\n    print(\\\"YES\\\" if flag else \\\"NO\\\")\\n\", \"q = int(input())\\nfor rwe in range(q):\\n\\tn = int(input())\\n\\tl = list(map(int,input().split()))\\n\\tdasie = False\\n\\td = {}\\n\\tfor i in range(n):\\n\\t\\td[l[i]] = []\\n\\tfor i in range(n):\\n\\t\\td[l[i]].append(i)\\n\\tfor elt in d:\\n\\t\\tif len(d[elt]) > 2:\\n\\t\\t\\tdasie = True\\n\\t\\t\\tbreak\\n\\t\\tif len(d[elt]) < 2:\\n\\t\\t\\tcontinue\\n\\t\\tif len(d[elt]) == 2:\\n\\t\\t\\tif d[elt][0] != d[elt][1] - 1:\\n\\t\\t\\t\\tdasie = True\\n\\tif dasie:\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tprint(\\\"NO\\\")\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nimport heapq\\nimport math\\nfrom collections import *\\nfrom functools import reduce,cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\n \\nM = mod = 10**9 + 7\\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\\ndef inv_mod(n):return pow(n, mod - 2, mod)\\n \\ndef li():return [int(i) for i in input().rstrip('\\\\n').split()]\\ndef st():return input().rstrip('\\\\n')\\ndef val():return int(input().rstrip('\\\\n'))\\ndef li2():return [i for i in input().rstrip('\\\\n')]\\ndef li3():return [int(i) for i in input().rstrip('\\\\n')]\\n\\nfor _ in range(val()):\\n    n = val()\\n    l = li()\\n    d = {}\\n    ans = 'NO'\\n    for i in range(n):\\n        if l[i] in d:\\n            if i - d[l[i]]> 1:\\n                ans = 'YES'\\n                break\\n        else:\\n            d[l[i]] = i\\n    print(ans)\", \"from sys import stdin,stdout                           #\\nimport math                                            #\\nimport heapq                                           #\\n                                                       #\\nt = 1                                                  #\\ndef aint():                                            #\\n\\treturn int(input().strip())                        #\\ndef lint():                                            #\\n\\treturn list(map(int,input().split()))              #\\ndef fint():                                            #\\n\\treturn list(map(int,stdin.readline().split()))     #\\n                                                       #\\t\\n########################################################\\n\\ndef main():\\n\\tn=aint()\\n\\tl=lint()\\n\\tans=\\\"NO\\\"\\n\\tfor i in range(n):\\n\\t\\tfor j in range(i+2,n):\\n\\t\\t\\tif l[i]==l[j]:\\n\\t\\t\\t\\tans=\\\"YES\\\"\\n\\t\\t\\t\\tbreak\\n\\tprint(ans)\\n\\t#solve\\n\\nt=int(input())\\n\\n########################################################\\nfor i in range(t):                                     #\\n\\tmain()                                             #\", \"\\nt = int(input())\\n\\nfor loop in range(t):\\n\\n    n = int(input())\\n\\n    a = list(map(int,input().split()))\\n\\n    lis = [None] * (n+1)\\n\\n    ans = \\\"NO\\\"\\n    for i in range(n):\\n\\n        if lis[a[i]] == None:\\n            lis[a[i]] = i\\n        elif lis[a[i]] + 1 < i:\\n            ans = \\\"YES\\\"\\n            break\\n\\n    print (ans)\\n\", \"#!/usr/bin/env python3\\nimport sys\\ninput = sys.stdin.readline\\n\\nt = int(input())\\nfor _ in range(t):\\n    n = int(input())\\n    a = [int(item) for item in input().split()]\\n    ok = False\\n    for i in range(n-2):\\n        for j in range(i+2, n):\\n            if a[i] == a[j]:\\n                ok = True\\n    if ok:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\", \"def main():\\n    import sys\\n    input = sys.stdin.readline\\n\\n    for _ in range(int(input())):\\n        N = int(input())\\n        A = list(map(int, input().split()))\\n        dic = {}\\n        ok = 0\\n        for i, a in enumerate(A):\\n            if a not in dic:\\n                dic[a] = i\\n            else:\\n                if i - dic[a] > 1:\\n                    ok = 1\\n                    break\\n        if ok:\\n            print('YES')\\n        else:\\n            print('NO')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\nimport math\\nimport bisect\\n\\ndef solve(A):\\n    n = len(A)\\n    d = dict()\\n    for i in range(n):\\n        if A[i] not in d:\\n            d[A[i]] = i\\n        else:\\n            if i - d[A[i]] > 1:\\n                return True\\n    return False\\n\\ndef main():\\n    for _ in range(int(input())):\\n        n = int(input())\\n        A = list(map(int, input().split()))\\n        if solve(A):\\n            print('YES')\\n        else:\\n            print('NO')\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"t = int(input())\\nwhile(t):\\n    t -= 1\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    d = dict()\\n    for i in range(n):\\n        if(a[i] in d):\\n            d[a[i]].append(i)\\n        else:\\n            d[a[i]] = [i]\\n    flag = 1\\n    for i in d:\\n        if(len(d[i]) >= 3):\\n            print(\\\"YES\\\")\\n            break\\n    else:\\n        for i in d:\\n            if(len(d[i]) >= 2 and d[i][-1] - d[i][0] >= 2):\\n                print(\\\"YES\\\")\\n                break\\n        else:\\n            print(\\\"NO\\\")\", \"t = int(input())\\nfor i in range(t):\\n    n = int(input())\\n    data = tuple(map(int, input().split()))\\n    met = []\\n    for i in data:\\n        if i in met[:-1]:\\n            print(\\\"YES\\\")\\n            break\\n        met.append(i)\\n    else:\\n        print(\\\"NO\\\")\\n    \\n\", \"t = int(input())\\nfor i in range(t):\\n    n = int(input())\\n    arr = list(map(int, input().split()))\\n    cnt = [[] for i in range(n + 2)]\\n    for i in range(n):\\n        cnt[arr[i]].append(i)\\n    for el in cnt:\\n        if len(el) > 2:\\n            print(\\\"YES\\\")\\n            break\\n        if (len(el) < 2):\\n            continue\\n        if abs(el[1] - el[0]) != 1:\\n            print(\\\"YES\\\")\\n            break\\n    else:\\n        print(\\\"NO\\\")\\n\", \"def go():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    d = {}\\n    for i, aa in enumerate(a):\\n        if aa in d:\\n            if i - d[aa] > 1 :\\n                return 'YES'\\n        d[aa] = d.get(aa, i)\\n    return 'NO'\\n\\n\\nt = int(input())\\nfor _ in range(t):\\n    print(go())\\n\", \"def f(N,L):\\n    V=[0]*(N+1)\\n    for i,a in enumerate(L):\\n        if V[a]>0:\\n            r=V[a]\\n            if L[i-1]==a:\\n                r-=1\\n            if r>0:\\n                return True\\n        V[a]+=1\\n    return False\\n\\nfor _ in range(int(input())):\\n    N=int(input())\\n    L=list(map(int,input().split()))\\n    if f(N,L): print('YES')\\n    else: print('NO')\", \"import sys\\ninput = sys.stdin.readline\\n\\nQ = int(input())\\nQuery = []\\nfor _ in range(Q):\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n    Query.append((N, A))\\n\\nfor N, A in Query:\\n    dic = {}\\n    for i, a in enumerate(A):\\n        if not a in dic:\\n            dic[a] = [i]\\n        else:\\n            dic[a].append(i)\\n    \\n    ok = False\\n    for L in dic.values():\\n        if len(L) > 1 and L[-1] - L[0] > 1:\\n            ok = True\\n            break\\n    print(\\\"YES\\\" if ok else \\\"NO\\\")\", \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    i1 = 0\\n    i2 = n\\n    flag = False\\n    for i in range(n-2):\\n        e1 = a[i]\\n        for j in range(i+2, n):\\n            if e1 == a[j]:\\n                print('YES')\\n                flag = True\\n                break\\n        if flag == True:\\n            break\\n    if flag == False:\\n        print('NO')\\n\\nfor i in range(int(input())):\\n    solve()\", \"t=int(input())\\nfor x in range(t):\\n    n=int(input())\\n    a=list(map(int,input().split()))\\n    b={}\\n    for x in range(n):\\n        if a[x] in b:\\n            if b[a[x]][-1]!=x-1:\\n                b[a[x]].append(x)\\n        else:b[a[x]]=[x]\\n    t=False\\n    for x in b:\\n        if len(b[x])>=2:\\n            t=True\\n    if t:\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"import sys\\n\\ninput = sys.stdin.readline\\n\\nq = int(input())\\n\\nfor _ in range(q):\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n    if N < 3:\\n        print(\\\"NO\\\")\\n    else:\\n        ans = False\\n        for i in range(N - 2):\\n            x = A[i]\\n            for j in range(i + 2, N):\\n                if A[j] == x:\\n                    ans = True\\n        if ans:\\n            print(\\\"YES\\\")\\n        else:\\n            print(\\\"NO\\\")\", \"import math\\n \\n \\nclass Read:\\n    @staticmethod\\n    def string():\\n        return input()\\n \\n    @staticmethod\\n    def int():\\n        return int(input())\\n \\n    @staticmethod\\n    def list(sep=' '):\\n        return input().split(sep)\\n \\n    @staticmethod\\n    def list_int(sep=' '):\\n        return list(map(int, input().split(sep)))\\n \\nresult = math.inf\\n \\ndef solve():\\n  n = Read.int()\\n  a = Read.list_int();\\n  for i in range(n):\\n    for j in range(i + 2, n):\\n      if a[i] == a[j]:\\n        print('YES')\\n        return\\n  print('NO')\\n \\n# query_count = 1\\nquery_count = Read.int()\\nwhile query_count:\\n    query_count -= 1\\n    solve()\", \"import sys\\n\\nfor _ in range(int(sys.stdin.readline().rstrip())):\\n    n = int(sys.stdin.readline().rstrip())\\n    num = list(map(int, sys.stdin.readline().rstrip().split()))\\n    re = False\\n    for i in range(len(num)):\\n        for j in range(i + 2, len(num)):\\n            if num[i] == num[j]:\\n                re = True\\n                break\\n        if re:\\n            break\\n    if re:\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"def solve(n, a):\\n    d = {}\\n    for i, aa in enumerate(a):\\n        if aa in d:\\n            d[aa].append(i)\\n        else:\\n            d[aa] = [i]\\n    for k in d:\\n        if len(d[k]) > 2:\\n            return \\\"YES\\\"\\n        if len(d[k]) == 2:\\n            if d[k][1] - d[k][0] > 1:\\n                return \\\"YES\\\"\\n    return \\\"NO\\\"\\n\\n\\ndef main():\\n    t = int(input())\\n    for _ in range(t):\\n        n = int(input())\\n        a = [int(i) for i in input().split()]\\n        print(solve(n, a))\\n\\n\\nmain()\\n\", \"def solve():\\n  n=int(input())\\n  a=list(map(int,input().split()))\\n  ans=\\\"NO\\\"\\n  d={}\\n  for i in range(n):\\n    if a[i] not in d:d[a[i]]=i\\n    elif i-1>d[a[i]]:ans=\\\"YES\\\"\\n  return ans\\nfor _ in range(int(input())):\\n  print(solve())\"]", "input_output": "{\n  \"inputs\": [\n    \"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\",\n    \"1\\n3\\n1 1 1\\n\",\n    \"1\\n3\\n3 3 3\\n\",\n    \"1\\n3\\n2 2 2\\n\",\n    \"1\\n5\\n1 1 1 1 1\\n\",\n    \"2\\n3\\n1 1 1\\n3\\n1 1 1\\n\",\n    \"1\\n6\\n1 1 1 1 1 1\\n\",\n    \"1\\n6\\n1 2 1 2 1 2\\n\",\n    \"2\\n3\\n1 1 1\\n5\\n5 5 5 5 5\\n\",\n    \"1\\n6\\n1 1 2 2 1 1\\n\",\n    \"1\\n5\\n2 2 2 2 2\\n\",\n    \"1\\n5\\n1 2 3 3 3\\n\",\n    \"3\\n5\\n1 1 1 1 1\\n3\\n1 1 1\\n3\\n1 2 1\\n\",\n    \"1\\n4\\n2 2 2 2\\n\",\n    \"4\\n5\\n1 2 3 4 4\\n5\\n1 1 2 3 4\\n3\\n1 2 1\\n3\\n1 1 1\\n\",\n    \"1\\n4\\n1 1 1 1\\n\",\n    \"1\\n10\\n1 1 1 4 5 6 7 8 9 10\\n\",\n    \"1\\n4\\n4 3 1 2\\n\",\n    \"6\\n14\\n7 7 8 8 8 8 8 9 9 12 12 13 14 14\\n27\\n4 4 7 11 14 14 16 16 19 19 19 19 19 19 19 19 19 19 19 19 19 20 20 21 23 23 27\\n30\\n9 10 16 27 13 24 16 29 3 7 12 1 20 25 30 8 28 24 29 8 26 7 24 2 24 24 26 25 4 18\\n25\\n1 4 6 6 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 16 20\\n21\\n12 5 15 5 1 7 20 5 6 16 10 15 10 4 21 19 7 11 3 13 13\\n13\\n2 2 4 10 4 6 6 8 13 11 4 13 1\\n\",\n    \"1\\n3\\n2 2 1\\n\",\n    \"1\\n4\\n3 1 1 1\\n\",\n    \"5\\n5\\n1 2 3 4 4\\n5\\n1 1 2 3 4\\n3\\n1 2 1\\n3\\n1 1 1\\n10\\n1 2 3 4 5 6 7 8 9 1\\n\",\n    \"1\\n3\\n2 3 1\\n\",\n    \"2\\n3\\n1 1 1\\n3\\n2 2 2\\n\",\n    \"1\\n22\\n2 4 4 5 5 6 10 12 15 15 18 18 19 19 19 19 19 19 19 19 22 22\\n\",\n    \"1\\n50\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\n\",\n    \"6\\n7\\n2 3 3 7 2 4 7\\n3\\n1 1 2\\n6\\n1 1 6 6 6 6\\n24\\n3 3 4 4 5 5 7 11 13 13 14 14 14 14 14 14 14 14 14 15 15 21 21 23\\n3\\n1 1 3\\n23\\n1 1 4 4 9 9 11 11 12 12 13 14 14 14 14 14 14 18 18 19 19 22 22\\n\",\n    \"2\\n4\\n4 2 3 2\\n23\\n8 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 15 15 20\\n\",\n    \"1\\n6\\n2 2 2 2 2 2\\n\",\n    \"13\\n6\\n2 2 5 5 6 6\\n6\\n2 2 2 2 2 4\\n11\\n2 3 11 7 8 6 3 11 6 5 11\\n14\\n1 2 1 14 14 7 3 7 7 3 5 1 1 14\\n6\\n2 4 6 5 1 1\\n17\\n10 12 6 12 15 11 2 14 13 13 8 14 5 7 11 7 2\\n29\\n3 4 6 6 14 14 17 17 18 18 22 22 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27\\n10\\n9 1 2 10 7 6 5 4 5 1\\n11\\n1 1 1 1 1 1 1 1 1 9 11\\n15\\n3 4 6 9 9 14 14 14 14 14 14 14 14 14 14\\n3\\n2 3 3\\n10\\n8 10 3 6 6 8 3 1 9 4\\n15\\n1 2 3 4 4 4 4 4 4 4 4 4 11 14 14\\n\",\n    \"9\\n4\\n1 1 2 4\\n22\\n11 1 5 1 13 15 1 9 13 4 4 1 5 19 13 18 1 12 1 5 17 10\\n17\\n10 2 1 15 6 7 3 9 9 1 12 14 12 11 17 15 14\\n29\\n5 27 17 29 5 1 18 16 18 11 4 5 4 9 16 9 3 18 13 12 23 10 14 11 14 11 8 27 29\\n9\\n2 6 3 4 8 1 4 3 8\\n13\\n10 5 2 1 2 5 1 11 6 9 6 4 12\\n10\\n5 1 4 8 1 3 6 7 5 2\\n26\\n15 7 15 26 24 9 19 10 3 5 18 8 20 1 12 26 12 19 3 19 12 4 6 12 14 19\\n28\\n1 12 12 13 13 19 19 20 21 21 21 21 21 21 21 21 21 21 21 21 21 21 23 23 24 25 25 27\\n\",\n    \"3\\n3\\n1 1 1\\n3\\n2 1 1\\n3\\n1 2 1\\n\",\n    \"15\\n16\\n1 1 1 1 1 1 1 1 1 1 1 1 5 12 12 14\\n18\\n12 14 12 15 17 16 11 5 15 15 7 15 15 14 16 16 11 11\\n13\\n4 9 11 7 13 9 10 1 3 7 12 5 9\\n3\\n3 2 2\\n6\\n6 3 2 2 3 1\\n20\\n2 2 4 4 5 5 5 5 5 5 5 5 5 5 6 8 10 12 12 17\\n25\\n1 1 6 6 8 8 9 10 14 16 16 16 16 16 16 16 16 16 16 16 16 18 21 21 23\\n15\\n6 1 5 3 15 10 14 15 14 3 13 12 9 7 3\\n6\\n1 1 5 5 5 6\\n11\\n2 2 4 4 6 6 6 7 7 8 8\\n7\\n5 2 4 1 4 3 2\\n9\\n1 1 3 3 3 4 4 9 9\\n16\\n5 6 6 7 7 7 7 7 7 7 8 12 12 13 15 15\\n17\\n1 1 1 1 1 1 1 4 4 7 7 11 13 13 15 17 17\\n4\\n3 3 4 2\\n\",\n    \"1\\n4\\n1 4 3 2\\n\",\n    \"10\\n11\\n4 7 7 8 8 10 10 10 10 11 11\\n26\\n2 2 3 3 7 7 10 10 12 16 17 17 23 23 23 23 23 23 23 23 23 23 23 23 26 26\\n6\\n3 5 6 3 4 6\\n30\\n4 4 5 5 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 11 16 16 23 23 26 26 27\\n22\\n1 3 3 9 9 11 13 13 13 13 13 13 13 13 13 13 13 13 14 14 15 17\\n20\\n1 3 14 20 12 3 12 20 18 14 10 10 6 7 4 17 12 7 19 2\\n25\\n25 16 10 15 14 3 6 21 11 2 20 2 21 7 11 25 16 11 13 19 24 12 24 25 14\\n13\\n8 9 13 5 2 7 4 9 5 5 3 13 6\\n10\\n5 7 7 7 7 7 7 7 7 10\\n12\\n12 5 8 1 2 1 2 11 8 9 2 2\\n\",\n    \"4\\n3\\n1 1 1\\n4\\n1 1 2 1\\n5\\n1 2 3 3 1\\n6\\n1 1 1 1 1 1\\n\",\n    \"2\\n3\\n2 2 2\\n5\\n1 2 5 3 5\\n\",\n    \"9\\n25\\n1 1 3 7 12 16 16 19 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 22 23\\n29\\n1 1 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 11 12 15 17 17 20 21 21 22 24 24 27\\n22\\n2 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 12 12 14 15 20 22\\n8\\n3 5 8 4 1 8 3 3\\n11\\n1 2 2 3 4 4 6 6 6 8 8\\n28\\n3 5 5 6 6 9 9 12 18 21 22 22 25 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26\\n7\\n7 2 3 3 3 6 6\\n7\\n2 2 4 4 4 4 4\\n30\\n11 19 2 23 29 12 5 20 20 12 5 20 18 6 15 10 2 6 3 14 26 13 6 25 7 13 22 29 23 28\\n\",\n    \"2\\n5\\n1 1 1 1 1\\n5\\n1 2 5 3 5\\n\",\n    \"1\\n4\\n4 3 2 1\\n\",\n    \"5\\n3\\n1 1 1\\n4\\n1 1 2 1\\n5\\n1 2 3 3 1\\n6\\n1 1 1 1 1 1\\n3\\n1 1 2\\n\",\n    \"1\\n6\\n1 2 3 3 3 3\\n\",\n    \"2\\n3\\n2 2 2\\n3\\n2 2 2\\n\",\n    \"1\\n6\\n2 2 2 1 1 1\\n\",\n    \"1\\n4\\n2 1 1 1\\n\",\n    \"4\\n18\\n1 14 4 10 14 18 13 6 14 8 17 15 2 15 10 11 1 5\\n14\\n2 2 5 5 8 10 10 11 11 11 11 11 14 14\\n6\\n2 5 2 4 6 4\\n10\\n1 4 2 10 3 6 5 4 3 1\\n\",\n    \"3\\n4\\n3 1 1 1\\n6\\n1 3 4 2 5 4\\n3\\n1 2 1\\n\",\n    \"10\\n20\\n2 2 2 2 2 2 2 2 2 2 2 2 6 6 8 12 14 16 20 20\\n11\\n11 10 3 6 2 6 2 11 6 2 5\\n13\\n1 2 5 5 6 6 6 6 6 6 6 6 12\\n6\\n5 6 6 6 6 6\\n18\\n14 18 11 11 4 6 16 1 8 4 9 18 1 9 13 12 18 3\\n23\\n4 4 4 4 4 4 4 4 4 4 4 9 9 14 14 17 17 18 18 21 21 22 22\\n7\\n4 4 4 4 4 5 7\\n21\\n1 1 3 3 5 5 6 6 6 6 6 6 6 6 6 6 6 11 17 20 20\\n25\\n2 2 3 5 9 9 13 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 21 21\\n15\\n1 1 1 1 1 1 1 3 4 4 7 7 10 10 14\\n\",\n    \"1\\n5\\n3 3 1 4 2\\n\",\n    \"1\\n5\\n5 5 5 5 5\\n\",\n    \"2\\n4\\n2 2 2 2\\n4\\n2 1 1 2\\n\",\n    \"1\\n4\\n1 1 1 2\\n\",\n    \"1\\n5\\n1 1 2 2 2\\n\",\n    \"2\\n5\\n3 3 1 4 2\\n5\\n1 2 3 3 3\\n\",\n    \"2\\n4\\n4 4 4 4\\n17\\n2 6 6 10 12 13 13 13 13 13 13 13 13 13 15 15 16\\n\",\n    \"3\\n3\\n2 2 2\\n4\\n2 1 1 2\\n5\\n1 3 3 2 1\\n\",\n    \"3\\n5\\n2 1 5 4 2\\n5\\n5 5 5 5 5\\n6\\n5 5 2 2 1 1\\n\",\n    \"3\\n5\\n3 3 1 4 2\\n5\\n1 2 3 3 3\\n5\\n3 3 3 1 2\\n\",\n    \"4\\n5\\n1 2 3 3 5\\n7\\n7 6 1 5 2 6 1\\n7\\n7 6 2 3 2 6 1\\n10\\n9 9 9 9 9 9 9 9 9 9\\n\",\n    \"1\\n4\\n1 2 2 2\\n\",\n    \"1\\n5\\n2 3 3 3 4\\n\",\n    \"3\\n4\\n2 2 2 2\\n4\\n2 1 1 2\\n3\\n2 1 2\\n\",\n    \"1\\n3\\n2 1 1\\n\",\n    \"1\\n4\\n2 3 3 3\\n\",\n    \"5\\n5\\n1 2 3 5 3\\n7\\n7 6 1 5 2 6 1\\n7\\n7 6 2 3 2 6 1\\n10\\n9 9 9 9 9 9 9 9 9 9\\n8\\n1 2 3 4 5 3 7 1\\n\",\n    \"7\\n18\\n2 2 2 2 2 2 2 2 2 2 3 7 7 10 13 14 14 16\\n7\\n4 7 2 2 2 3 1\\n24\\n8 8 9 2 20 14 6 2 12 20 1 6 19 6 5 8 14 23 16 14 5 2 18 3\\n21\\n20 6 18 4 6 14 7 14 4 12 10 8 11 2 5 9 16 12 4 1 15\\n6\\n3 3 4 4 6 6\\n30\\n12 2 28 17 24 21 19 2 25 5 20 15 29 7 7 9 13 19 15 30 9 21 2 28 23 3 21 15 18 12\\n23\\n4 4 7 7 12 13 13 14 14 14 14 14 14 14 14 14 14 14 14 18 18 23 23\\n\",\n    \"1\\n5\\n1 2 3 4 1\\n\",\n    \"3\\n3\\n3 3 3\\n5\\n5 5 5 5 5\\n3\\n1 2 3\\n\",\n    \"2\\n6\\n2 2 2 2 2 2\\n3\\n1 2 3\\n\",\n    \"3\\n8\\n2 2 2 2 2 5 5 8\\n3\\n1 1 1\\n23\\n3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 11 14 14 20 21\\n\",\n    \"3\\n3\\n3 3 3\\n3\\n3 1 3\\n3\\n3 3 2\\n\",\n    \"5\\n3\\n3 3 3\\n3\\n1 1 1\\n5\\n1 1 1 1 1\\n5\\n2 2 4 5 5\\n3\\n3 2 2\\n\",\n    \"1\\n4\\n2 4 4 4\\n\",\n    \"2\\n5\\n1 2 4 3 5\\n3\\n3 2 1\\n\",\n    \"4\\n3\\n1 1 1\\n5\\n1 2 3 1 1\\n5\\n1 2 3 4 4\\n5\\n1 2 3 3 3\\n\",\n    \"2\\n3\\n1 2 3\\n3\\n1 2 3\\n\",\n    \"3\\n3\\n2 2 2\\n3\\n2 2 3\\n3\\n3 2 2\\n\",\n    \"4\\n3\\n1 1 1\\n3\\n2 2 2\\n4\\n2 2 2 3\\n4\\n2 4 4 4\\n\",\n    \"1\\n4\\n4 4 4 4\\n\",\n    \"9\\n4\\n1 2 2 2\\n6\\n2 2 2 1 3 4\\n5\\n1 1 2 2 3\\n7\\n2 2 1 3 5 5 6\\n8\\n5 1 1 3 2 2 6 4\\n5\\n1 2 2 3 1\\n7\\n1 1 4 4 4 3 2\\n10\\n7 7 7 1 2 2 3 5 5 2\\n10\\n1 1 2 8 5 4 4 8 5 6\\n\",\n    \"1\\n9\\n7 5 2 6 4 5 4 4 8\\n\",\n    \"2\\n4\\n2 2 2 2\\n3\\n1 2 3\\n\",\n    \"1\\n3\\n1 2 2\\n\",\n    \"1\\n7\\n1 1 2 2 5 3 7\\n\",\n    \"1\\n5\\n1 2 3 4 5\\n\",\n    \"1\\n3\\n1 2 3\\n\",\n    \"1\\n4\\n1 2 1 3\\n\",\n    \"1\\n5\\n4 2 1 5 5\\n\",\n    \"5\\n5\\n2 2 1 1 3\\n3\\n2 2 1\\n3\\n2 1 1\\n3\\n1 1 2\\n3\\n1 1 1\\n\",\n    \"2\\n4\\n1 2 1 1\\n5\\n1 4 2 1 1\\n\",\n    \"1\\n5\\n5 4 4 1 5\\n\",\n    \"1\\n6\\n1 1 3 4 4 4\\n\",\n    \"30\\n6\\n1 1 4 4 3 3\\n6\\n1 1 4 3 2 2\\n6\\n1 1 3 4 4 4\\n6\\n1 1 3 2 3 4\\n6\\n1 1 3 4 2 2\\n6\\n1 1 2 2 4 2\\n6\\n1 1 3 3 2 4\\n6\\n1 1 4 4 4 2\\n6\\n1 1 4 2 2 3\\n6\\n1 1 4 3 3 2\\n6\\n1 1 4 2 4 2\\n6\\n1 1 2 4 2 3\\n6\\n1 1 4 3 4 4\\n6\\n1 1 3 2 2 3\\n6\\n1 1 4 2 3 3\\n6\\n1 1 3 4 4 2\\n6\\n1 1 2 3 3 4\\n6\\n1 1 3 3 4 2\\n6\\n1 1 4 2 3 4\\n6\\n1 1 2 2 2 4\\n6\\n1 1 2 4 2 3\\n6\\n1 1 2 4 3 4\\n6\\n1 1 4 3 2 2\\n6\\n1 1 4 3 4 3\\n6\\n1 1 4 2 2 4\\n6\\n1 1 2 4 3 2\\n6\\n1 1 2 2 2 4\\n6\\n1 1 4 2 4 4\\n6\\n1 1 4 3 2 2\\n6\\n1 1 4 2 2 2\\n\",\n    \"2\\n3\\n1 2 3\\n3\\n2 3 1\\n\",\n    \"1\\n3\\n3 1 2\\n\",\n    \"20\\n6\\n1 1 3 4 4 4\\n6\\n6 1 4 4 4 2\\n6\\n1 1 4 2 2 2\\n6\\n1 1 2 2 2 4\\n6\\n2 2 2 1 3 4\\n4\\n1 2 2 2\\n7\\n1 1 4 4 4 3 2\\n6\\n1 2 4 4 3 3\\n6\\n1 2 4 3 2 2\\n6\\n1 2 3 4 4 4\\n6\\n1 2 3 2 3 4\\n6\\n1 2 3 4 2 2\\n6\\n1 2 2 2 4 2\\n6\\n1 2 3 3 2 4\\n6\\n1 2 4 4 4 2\\n6\\n1 2 4 2 2 3\\n6\\n1 2 4 3 3 2\\n6\\n1 2 4 2 4 2\\n6\\n1 2 2 4 2 3\\n6\\n1 2 4 3 4 4\\n\",\n    \"2\\n6\\n1 1 1 2 2 2\\n4\\n1 2 2 2\\n\",\n    \"4\\n16\\n1 1 1 1 1 1 1 1 1 1 1 1 5 12 12 14\\n18\\n12 14 12 15 17 16 11 5 15 15 7 15 15 14 16 16 11 11\\n13\\n4 9 11 7 13 9 10 1 3 7 12 5 9\\n3\\n3 2 2\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\nYES\\nNO\\nYES\\nNO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\nYES\\n\",\n    \"YES\\n\",\n    \"NO\\nNO\\nYES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\nNO\\nYES\\nYES\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"NO\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\n\",\n    \"NO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nNO\\nYES\\n\",\n    \"YES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nNO\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\nYES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nNO\\n\",\n    \"NO\\nYES\\nYES\\n\",\n    \"NO\\nYES\\nYES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\nNO\\n\",\n    \"YES\\nNO\\n\",\n    \"YES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nNO\\n\",\n    \"YES\\nYES\\nYES\\nNO\\nNO\\n\",\n    \"YES\\n\",\n    \"NO\\nNO\\n\",\n    \"YES\\nYES\\nNO\\nYES\\n\",\n    \"NO\\nNO\\n\",\n    \"YES\\nNO\\nNO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\nYES\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nYES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\nNO\\nYES\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\n\",\n    \"YES\\nYES\\nYES\\nNO\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1324/B", "starter_code": ""}
{"id": 4011, "question": "You are given a long decimal number $a$ consisting of $n$ digits from $1$ to $9$. You also have a function $f$ that maps every digit from $1$ to $9$ to some (possibly the same) digit from $1$ to $9$.\n\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in $a$, and replace each digit $x$ from this segment with $f(x)$. For example, if $a = 1337$, $f(1) = 1$, $f(3) = 5$, $f(7) = 3$, and you choose the segment consisting of three rightmost digits, you get $1553$ as the result.\n\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of digits in $a$.\n\nThe second line contains a string of $n$ characters, denoting the number $a$. Each character is a decimal digit from $1$ to $9$.\n\nThe third line contains exactly $9$ integers $f(1)$, $f(2)$, ..., $f(9)$ ($1 \\le f(i) \\le 9$).\n\n\n-----Output-----\n\nPrint the maximum number you can get after applying the operation described in the statement no more than once.\n\n\n-----Examples-----\nInput\n4\n1337\n1 2 5 4 6 6 3 1 9\n\nOutput\n1557\n\nInput\n5\n11111\n9 8 7 6 5 4 3 2 1\n\nOutput\n99999\n\nInput\n2\n33\n1 1 1 1 1 1 1 1 1\n\nOutput\n33", "solutions": "[\"def main():\\n    n = int(input())\\n    a = list(map(int, input()))\\n    f = [0] + list(map(int, input().split()))\\n    i = 0\\n    while f[a[i]] <= a[i]:\\n        i += 1\\n        if i == n:\\n            break\\n    for j in range(i, n):\\n        if f[a[j]] < a[j]:\\n            break\\n        else:\\n            a[j] = f[a[j]]\\n    print(\\\"\\\".join(str(x) for x in a))\\n    return 0\\n\\nmain()\", \"n = int(input())\\ns = input()\\nd = input().split()\\nx = 0\\nfor i in s:\\n    if d[int(i) - 1] > i:\\n        break\\n    x += 1\\nr = s[:x]\\np = x\\nfor i in s[x:]:\\n    if d[int(i) - 1] >= i:\\n        r += d[int(i) - 1]\\n    else:\\n        r += s[p:]\\n        break\\n    p += 1\\nprint(r)\", \"# AC\\nimport sys\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = sys.stdin.readline().split()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def solve(self):\\n        n = self.next_int()\\n        s = [int(x) for x in next(self)]\\n        x = [self.next_int() for _ in range(0, 9)]\\n        id = 0\\n        while id < n and s[id] >= x[s[id] - 1]:\\n            id += 1\\n        while id < n and s[id] <= x[s[id] - 1]:\\n            s[id] = x[s[id] - 1]\\n            id += 1\\n        print(''.join([str(x) for x in s]))\\n\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\", \"def main():\\n    input()\\n    n = [int(x) for x in input()]\\n    f = [0]+[int(x) for x in input().split()]\\n    for i in range(len(n)):\\n        if f[n[i]] > n[i]:\\n            n[i] = f[n[i]]\\n            for j in range(i+1, len(n)):\\n                if f[n[j]] < n[j]:\\n                    break\\n                n[j] = f[n[j]]\\n            break\\n    print(''.join(str(x) for x in n))\\nmain()\\n\\n\", \"n = int(input())\\na = list(input())\\nfi = list(map(int,input().split()))\\nflag = 0\\nfor i in range(n):\\n    if fi[int(a[i])-1] > int(a[i]) and flag != 2:\\n        flag = 1\\n        print(fi[int(a[i])-1],end=\\\"\\\")\\n    elif fi[int(a[i])-1] == int(a[i]) and flag == 1:\\n        print(a[i],end=\\\"\\\")\\n    else:\\n        if flag == 1:\\n            flag = 2\\n        print(a[i],end=\\\"\\\")\\n    \\n\", \"a = int(input())\\nN = list(input())\\nf = list(map(int, input().split()))\\n\\nind = 0\\n\\nfor i, n in enumerate(N):\\n    if int(n) < f[int(n) - 1]:\\n        N[i] = f[int(n) - 1]\\n        ind = 1\\n    if int(n) > f[int(n) - 1] and ind == 1:\\n        break\\n\\nprint(\\\"\\\".join(list(map(str, N))))\\n        \\n\", \"import sys\\n\\ninput = sys.stdin.readline\\n\\nn = int(input())\\n\\ns = [int(x) for x in input().strip()]\\n\\nf = list(map(int, input().split()))\\n\\nstarted = False\\nfor i in range(len(s)):\\n  if f[s[i]-1] > s[i]:\\n    started = True\\n    s[i] = f[s[i]-1]\\n  elif started and f[s[i]-1] < s[i]:\\n    break\\n\\nprint(''.join([str(x) for x in s]))\\n\", \"n = int(input())\\nl = [*map(int, input())]\\nd = {}\\nfor i, j in enumerate(map(int, input().split())):\\n    d[i + 1] = j\\n\\ni = 0\\nwhile i < n and d[l[i]] <= l[i]:\\n    i += 1\\nwhile i < n and d[l[i]] >= l[i]:\\n    l[i] = d[l[i]]\\n    i += 1\\nprint(''.join(map(str, l)))\", \"#\\t!/usr/bin/env python3\\n#\\tencoding: UTF-8\\n#\\tModified: <26/Apr/2019 08:18:47 PM>\\n\\n\\n#\\t\\u272a H4WK3yE\\u4e61\\n#\\tMohd. Farhan Tahir\\n#\\tIndian Institute Of Information Technology (IIIT),Gwalior\\n\\n\\n# ///==========Libraries, Constants and Functions=============///\\n\\n\\nimport sys\\n\\n\\ndef get_array(): return list(map(int, sys.stdin.readline().split()))\\n\\n\\ndef get_ints(): return map(int, sys.stdin.readline().split())\\n\\n\\ndef input(): return sys.stdin.readline().strip()\\n\\n# ///==========MAIN=============///\\n\\n\\ndef main():\\n    n = int(input())\\n    a = list(input())\\n    f = get_array()\\n    flag = False\\n    for i in range(n):\\n        x = int(a[i])\\n        if (x < f[x - 1]):\\n            flag = True\\n            a[i] = f[x - 1]\\n        else:\\n            if flag == True and x > f[x - 1]:\\n                break\\n    print(*a, sep='')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\na = list(input())\\nf = list(map(int,input().split()))\\nf = {i+1:f[i] for i in range(9)}\\n\\nst = n\\nfor i in range(n):\\n\\tc = int(a[i])\\n\\tif f[c] > c:\\n\\t\\tst = i\\n\\t\\tbreak\\n\\nfor i in range(st,n):\\n\\tc = int(a[i])\\n\\tif f[c] >= c:\\n\\t\\ta[i] = str(f[c])\\n\\telse:\\n\\t\\tbreak\\n\\nprint(''.join(a))\", \"n=int(input())\\ns=str(input())\\ndict1={}\\narr=list(map(int,input().split()))\\nfor i in range(1,10):\\n\\tdict1[i]=arr[i-1]\\nans=''\\ni=0\\nwhile(i<n):\\n\\tif(dict1[int(s[i])]>int(s[i])):\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans+=s[i]\\n\\t\\ti+=1\\n#print(ans)\\nwhile(i<n):\\n\\tif(dict1[int(s[i])]<int(s[i])):\\n\\t\\tbreak\\n\\telse:\\n\\t\\tans+=str(dict1[int(s[i])])\\n\\t\\ti+=1\\nans+=s[i:]\\nprint(ans)\\n\\n\", \"n = int(input())\\na1 = list(map(int, list(input())))\\nu = list(map(int, input().split()))\\na2 = []\\nfor i in range(n):\\n    a2.append(u[a1[i] - 1])\\nok = False\\ni1 = -1\\nfor i in range(n):\\n    if a2[i] > a1[i]:\\n        i1 = i\\n        ok = True\\n        break\\nif ok:\\n    i2 = n\\n    for i in range(i1 + 1, n):\\n        if a2[i] < a1[i]:\\n            i2 = i\\n            break\\n    for i in range(i1, i2):\\n        a1[i] = a2[i]\\nprint(''.join(map(str, a1)))\\n\", \"\\n\\n\\ninput()\\nA = list(map(int,input()))\\nf = tuple(map(int,input().split()))\\n\\nfor i,a in enumerate(A):\\n    if a < f[a-1]:\\n        break\\nfor j,a in enumerate(A[i:], start=i):\\n    if a > f[a-1]:\\n        break\\n    else:\\n        A[j] = f[a-1]\\n\\nprint(*A, sep='')\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n##################################\\n# University of Wisconsin-Madison\\n# Author: Yaqi Zhang\\n##################################\\n# This module contains\\n##################################\\n\\n# standard library\\nimport sys\\n\\ndef main():\\n    # nums = list(map(int, input().split()))\\n    n = int(input())\\n    s = input()\\n    assert(len(s) == n)\\n    digits = list(s)\\n    m = [0]\\n    m.extend(list(map(int, input().split())))\\n    change = False\\n    for i, ch in enumerate(digits):\\n        d = int(ch)\\n        if m[d] > d:\\n            digits[i] = str(m[d])\\n            change = True\\n        else:\\n            if m[d] < d and change:\\n                break\\n    print(''.join(digits))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n\\n__starting_point()\", \"n = int(input())\\ns = list(input())\\nf = [0] + list(map(int, input().split()))\\ncok = 1\\nfor i in range(n):\\n    q = int(s[i])\\n    if cok:\\n        if f[q] > q:\\n            cok = 0\\n            s[i] = str(f[q])\\n    else:\\n        if f[q] >= q:\\n            s[i] = str(f[q])\\n        else:\\n            print(''.join(s))\\n            return\\nprint(''.join(s))\\n\\n\", \"n=int(input())\\nnum=[int(x) for x in list(input())]\\nf=[int(x) for x in input().split()]\\nflag=0\\nfor i in range(n):\\n    if num[i]<f[num[i]-1]:\\n        num[i]=f[num[i]-1]\\n        flag=1\\n    elif num[i]>f[num[i]-1]:\\n        if flag==1:\\n            break\\nprint(*num,sep='')\\n\", \"n = int(input())\\ns = [int(item) for item in list(input())]\\nf = [0] + [int(item) for item in input().split()]\\n\\nnew_s = [0] * n\\nfor i in range(n):\\n    new_s[i] = f[int(s[i])]\\n\\ni = 0\\nidx = -1\\nfor j in range(n):\\n    if new_s[j] > s[j]:\\n        idx = j\\n        break\\n\\nif idx == -1:\\n    print(''.join(str(item) for item in s))\\nelse:\\n    start = idx\\n    while idx < n and new_s[idx] >= s[idx]:\\n        idx += 1\\n    u = [str(item) for item in s[:start]]\\n    v = [str(item) for item in new_s[start:idx]]\\n    w = [str(item) for item in s[idx:]]\\n    assert(len(u) + len(v) + len(w) == n)\\n    print(''.join(u) + ''.join(v) + ''.join(w))\\n\", \"n = int(input())\\na = input()\\n\\nf = [int(x) for x in input().split()]\\n\\n\\nr = \\\"\\\"\\n\\nflag = -1\\nfor c in a:\\n\\n    k = f[int(c)-1]\\n    if flag == -1:\\n        if k > int(c):\\n            flag = 0\\n            r += str(k)\\n        else:\\n            r += c\\n\\n    elif flag == 0:\\n        if k < int(c):\\n            r += c\\n            flag = 1\\n        else:\\n            r += str(k)\\n    else:\\n        r += c\\n\\nprint(r)\\n\", \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\\\"\\\"\\\"Codeforces Round #555 (Div. 3)\\n\\nProblem B. Long Number\\n\\n:author:         Kitchen Tong\\n:mail:    kctong529@gmail.com\\n\\nPlease feel free to contact me if you have any question\\nregarding the implementation below.\\n\\\"\\\"\\\"\\n\\n__version__ = '0.2'\\n__date__ = '2019-04-26'\\n\\nimport sys\\n\\n\\ndef solve(a, f):\\n    mydict = dict(list(zip(list(map(str, list(range(1, 10)))), f)))\\n    ans = []\\n    flag = -1\\n    for ch in a:\\n        if mydict[ch] > ch and flag <= 0:\\n            ans.append(mydict[ch])\\n            flag = 0\\n        else:\\n            ans.append(ch)\\n            if flag >= 0 and mydict[ch] < ch:\\n                flag = 1\\n    return ''.join(ans)\\n\\ndef main(argv=None):\\n    n = int(input())\\n    a = list(input())\\n    f = list(input().split())\\n    print(solve(a, f))\\n    return 0\\n\\ndef __starting_point():\\n    STATUS = main()\\n    return(STATUS)\\n\\n\\n__starting_point()\", \"n = int(input())\\na = list(input())\\nd = dict()\\ns = input().split()\\ncan = set()\\nfor i in range(9):\\n    if i < int(s[i]):\\n        can.add(str(i + 1))\\n    d[str(i + 1)] = s[i]\\nfor i in range(n):\\n    if a[i] < d[a[i]]:\\n        a[i] = d[a[i]]\\n        i += 1\\n        while i < n and a[i] in can:\\n            a[i] = d[a[i]]\\n            i += 1\\n        break\\nprint(*a, sep='')\\n\", \"n = int(input())\\nx = list(input())\\nf = dict(zip(range(1,10), map(int, input().strip().split())))\\n\\nfor i in range(n):\\n    p = int(x[i])\\n    if p<f[p]:\\n        while i<n and int(x[i])<=f[int(x[i])]:\\n            x[i] = str(f[int(x[i])])\\n            i += 1\\n        break\\nprint(\\\"\\\".join(x))\", \"n = int(input())\\ns = input()\\nperm = list(map(int,input().split()))\\nwyn = list(map(int,s))\\nc = 0\\nfor i in range(n):\\n\\tif c == 1:\\n\\t\\tbreak\\n\\tif perm[int(s[i])-1] > int(s[i]):\\n\\t\\twyn[i] = perm[int(s[i])-1]\\n\\t\\tj = i \\n\\t\\tc = 1\\n\\t\\twhile True:\\n\\t\\t\\tj += 1\\n\\t\\t\\tif j < n and perm[int(s[j])-1] >= int(s[j]):\\n\\t\\t\\t\\t\\twyn[j] = perm[int(s[j])-1]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\nfor i in wyn:\\n\\tprint(i, end = \\\"\\\")\", \"n = int(input())\\ns = list(input())\\nf = [int(elem) for elem in input().split()]\\nind = -1\\nfor i in range(n):\\n    if f[int(s[i]) - 1] > int(s[i]):\\n        ind = i\\n        break\\nif ind == -1:\\n    for i in range(n):\\n        print(s[i], end='')\\nelse:\\n    x = i\\n    while x < n and f[int(s[x]) - 1] >= int(s[x]):\\n        s[x] = f[int(s[x]) - 1]\\n        x += 1\\n    for i in range(n):\\n        print(s[i], end='')\", \"n = int(input())\\na = list(input())\\n\\nf = ['0']\\nf.extend(list(input().split()))\\n# print('f:', f)\\n\\nstarted = False\\nfor i, item in enumerate(a):\\n\\tif not started:\\n\\t\\tif int(f[int(item)]) > int(item):\\n\\t\\t\\ta[i] = f[int(item)]\\n\\t\\t\\tstarted = True\\n\\telse:\\n\\t\\tif int(f[int(item)]) >= int(item):\\n\\t\\t\\ta[i] = f[int(item)]\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\nprint(''.join(a))\\n\", \"n = int(input())\\na = input()\\nsp = list(map(str, input().split()))\\nnew = \\\"\\\"\\nfl1 = True\\nfl2 = False\\nfor x in a:\\n\\tif int(x) > int(sp[int(x) - 1]) and not fl1 or fl2:\\n\\t\\tfl2 = True\\n\\t\\tnew += x\\n\\telse:\\n\\t\\tif int(x) < int(sp[int(x) - 1]):\\n\\t\\t\\tnew += sp[int(x) - 1]\\n\\t\\t\\tfl1 = False\\n\\t\\telse:\\n\\t\\t\\tnew += x\\nprint(new)\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"4\\n1337\\n1 2 5 4 6 6 3 1 9\\n\",\n    \"5\\n11111\\n9 8 7 6 5 4 3 2 1\\n\",\n    \"2\\n33\\n1 1 1 1 1 1 1 1 1\\n\",\n    \"4\\n1234\\n1 1 4 5 1 1 1 1 1\\n\",\n    \"6\\n912349\\n1 1 4 5 1 1 1 1 1\\n\",\n    \"1\\n5\\n1 2 3 4 5 6 7 8 9\\n\",\n    \"2\\n51\\n1 2 5 4 6 6 3 1 9\\n\",\n    \"2\\n51\\n1 2 3 4 5 6 7 8 9\\n\",\n    \"3\\n738\\n3 7 4 9 4 6 7 3 3\\n\",\n    \"9\\n193787726\\n5 5 8 9 4 5 2 9 1\\n\",\n    \"4\\n1733\\n1 2 5 4 6 6 3 1 9\\n\",\n    \"15\\n164563457334873\\n4 3 3 3 6 6 8 8 5\\n\",\n    \"1\\n9\\n2 3 4 5 6 7 8 9 1\\n\",\n    \"8\\n71222655\\n8 4 8 9 7 6 6 4 8\\n\",\n    \"7\\n6545161\\n7 2 3 5 9 6 8 1 3\\n\",\n    \"4\\n4444\\n2 1 4 3 6 5 8 9 7\\n\",\n    \"5\\n77372\\n1 4 7 7 9 1 9 9 7\\n\",\n    \"2\\n33\\n4 5 5 8 7 7 5 4 4\\n\",\n    \"3\\n931\\n4 7 8 6 2 4 3 1 2\\n\",\n    \"1\\n2\\n9 7 6 2 2 6 2 4 4\\n\",\n    \"18\\n263583239493593927\\n7 7 3 7 7 6 9 7 6\\n\",\n    \"3\\n512\\n3 3 7 7 2 4 7 9 4\\n\",\n    \"2\\n87\\n6 2 9 2 4 3 9 6 4\\n\",\n    \"5\\n21558\\n6 9 4 9 6 6 5 9 7\\n\",\n    \"8\\n72231447\\n7 9 4 5 1 2 7 6 5\\n\",\n    \"2\\n47\\n9 1 2 3 7 3 8 6 1\\n\",\n    \"3\\n934\\n5 9 6 8 6 2 2 9 6\\n\",\n    \"4\\n4841\\n6 4 7 1 7 1 3 9 7\\n\",\n    \"1\\n3\\n2 8 4 5 4 1 7 2 3\\n\",\n    \"7\\n3243631\\n6 3 6 5 2 9 2 2 2\\n\",\n    \"3\\n814\\n5 7 1 7 4 3 9 4 4\\n\",\n    \"11\\n95933442388\\n4 8 4 6 3 7 5 8 5\\n\",\n    \"10\\n2422346641\\n4 2 8 7 4 7 1 9 7\\n\",\n    \"1\\n2\\n1 4 4 8 8 8 7 3 2\\n\",\n    \"4\\n3753\\n5 8 3 2 6 5 7 4 3\\n\",\n    \"2\\n35\\n1 8 7 2 1 8 8 6 2\\n\",\n    \"4\\n7362\\n2 6 4 6 5 7 5 5 8\\n\",\n    \"1\\n3\\n4 9 9 6 8 4 5 5 5\\n\",\n    \"15\\n338725139492819\\n6 2 4 9 2 9 3 8 9\\n\",\n    \"5\\n96563\\n6 7 4 8 5 5 4 7 4\\n\",\n    \"4\\n5422\\n3 4 1 8 6 5 1 7 2\\n\",\n    \"3\\n743\\n4 4 4 8 5 8 6 6 5\\n\",\n    \"5\\n13362\\n5 3 6 5 8 7 8 8 3\\n\",\n    \"3\\n235\\n4 7 3 2 6 8 8 7 5\\n\",\n    \"5\\n28491\\n1 6 5 5 8 9 6 9 4\\n\",\n    \"11\\n42828727593\\n8 8 7 5 6 5 4 8 9\\n\",\n    \"2\\n42\\n2 3 8 5 6 5 3 1 8\\n\",\n    \"20\\n58832646452639258958\\n9 2 2 1 1 4 8 6 6\\n\",\n    \"3\\n649\\n1 5 2 9 7 8 8 3 1\\n\",\n    \"6\\n848821\\n2 3 9 4 9 6 5 3 5\\n\",\n    \"6\\n422354\\n8 4 3 6 7 9 7 6 8\\n\",\n    \"2\\n98\\n7 5 5 4 8 3 1 9 4\\n\",\n    \"6\\n853377\\n3 5 7 3 9 5 8 1 5\\n\",\n    \"3\\n613\\n6 4 4 5 7 5 4 3 4\\n\",\n    \"3\\n985\\n3 5 3 8 8 6 4 4 3\\n\",\n    \"2\\n22\\n8 5 2 7 9 3 8 8 1\\n\",\n    \"4\\n6785\\n6 9 7 3 8 2 9 4 3\\n\",\n    \"1\\n6\\n4 8 2 6 8 8 8 8 3\\n\",\n    \"1\\n3\\n8 7 8 7 8 5 8 2 2\\n\",\n    \"5\\n11636\\n9 2 2 1 3 8 1 7 5\\n\",\n    \"5\\n89126\\n9 3 7 6 7 8 9 8 3\\n\",\n    \"5\\n14241\\n4 8 1 9 7 8 7 3 5\\n\",\n    \"19\\n4752348644348366742\\n6 7 9 7 5 7 9 9 5\\n\",\n    \"6\\n463364\\n9 7 7 4 9 7 3 3 6\\n\",\n    \"5\\n14824\\n6 3 4 5 4 7 9 9 7\\n\",\n    \"1\\n6\\n2 6 3 9 8 4 7 3 2\\n\",\n    \"11\\n69351528788\\n2 3 8 2 9 3 9 8 5\\n\",\n    \"3\\n469\\n5 6 8 9 2 6 7 1 5\\n\",\n    \"1\\n4\\n9 7 4 6 5 6 2 9 3\\n\",\n    \"4\\n3511\\n2 9 9 9 7 7 2 7 1\\n\",\n    \"1\\n6\\n4 2 1 6 8 9 5 2 3\\n\",\n    \"19\\n2612437771227631192\\n6 7 3 6 8 7 9 9 9\\n\",\n    \"5\\n63192\\n1 7 4 6 9 3 6 2 2\\n\",\n    \"2\\n36\\n1 4 7 5 3 2 7 8 7\\n\",\n    \"6\\n135642\\n7 9 3 8 4 8 2 3 8\\n\",\n    \"8\\n25711736\\n9 3 1 1 3 2 8 8 1\\n\",\n    \"9\\n145553875\\n9 2 5 3 8 6 3 1 5\\n\",\n    \"3\\n536\\n7 7 8 9 7 5 6 5 6\\n\",\n    \"5\\n73491\\n9 9 2 1 4 2 1 8 7\\n\",\n    \"11\\n19727914253\\n2 9 4 6 4 5 1 7 6\\n\",\n    \"1\\n1\\n9 6 4 3 4 6 8 9 6\\n\",\n    \"4\\n3985\\n2 8 1 1 9 2 2 8 3\\n\",\n    \"5\\n97533\\n2 8 4 8 9 2 2 8 2\\n\",\n    \"4\\n3411\\n2 9 5 8 1 9 9 1 1\\n\",\n    \"16\\n3245311794575433\\n3 5 3 4 3 4 2 7 5\\n\",\n    \"3\\n149\\n1 2 3 8 8 6 6 9 4\\n\",\n    \"3\\n167\\n3 1 6 6 7 8 5 6 3\\n\",\n    \"11\\n15968722286\\n8 6 8 3 5 7 3 8 4\\n\",\n    \"3\\n149\\n2 4 4 5 5 9 8 2 2\\n\"\n  ],\n  \"outputs\": [\n    \"1557\\n\",\n    \"99999\\n\",\n    \"33\\n\",\n    \"1245\\n\",\n    \"912459\\n\",\n    \"5\\n\",\n    \"61\\n\",\n    \"51\\n\",\n    \"748\\n\",\n    \"593787726\\n\",\n    \"1755\\n\",\n    \"464563457334873\\n\",\n    \"9\\n\",\n    \"78444677\\n\",\n    \"6959767\\n\",\n    \"4444\\n\",\n    \"99794\\n\",\n    \"55\\n\",\n    \"984\\n\",\n    \"7\\n\",\n    \"763783239493593927\\n\",\n    \"533\\n\",\n    \"89\\n\",\n    \"96669\\n\",\n    \"79947557\\n\",\n    \"48\\n\",\n    \"968\\n\",\n    \"4941\\n\",\n    \"4\\n\",\n    \"6356966\\n\",\n    \"857\\n\",\n    \"95944668488\\n\",\n    \"2722877774\\n\",\n    \"4\\n\",\n    \"3763\\n\",\n    \"75\\n\",\n    \"7476\\n\",\n    \"9\\n\",\n    \"448725139492819\\n\",\n    \"96564\\n\",\n    \"6844\\n\",\n    \"784\\n\",\n    \"56673\\n\",\n    \"736\\n\",\n    \"69591\\n\",\n    \"58888727593\\n\",\n    \"53\\n\",\n    \"58832646452639258958\\n\",\n    \"899\\n\",\n    \"848832\\n\",\n    \"644376\\n\",\n    \"99\\n\",\n    \"897788\\n\",\n    \"664\\n\",\n    \"988\\n\",\n    \"55\\n\",\n    \"6985\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"99836\\n\",\n    \"89938\\n\",\n    \"49894\\n\",\n    \"7957979777979977977\\n\",\n    \"477774\\n\",\n    \"65935\\n\",\n    \"6\\n\",\n    \"69892938988\\n\",\n    \"969\\n\",\n    \"6\\n\",\n    \"9722\\n\",\n    \"9\\n\",\n    \"7767639996779736697\\n\",\n    \"64192\\n\",\n    \"76\\n\",\n    \"735642\\n\",\n    \"35711736\\n\",\n    \"945553875\\n\",\n    \"786\\n\",\n    \"73499\\n\",\n    \"29727914253\\n\",\n    \"9\\n\",\n    \"3989\\n\",\n    \"97944\\n\",\n    \"5822\\n\",\n    \"3545311794575433\\n\",\n    \"189\\n\",\n    \"387\\n\",\n    \"85968722286\\n\",\n    \"259\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1157/B", "starter_code": ""}
{"id": 4012, "question": "You are given three integers $a \\le b \\le c$.\n\nIn one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.\n\nYou have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\n\nYou have to answer $t$ independent test cases. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a separate line as three space-separated integers $a, b$ and $c$ ($1 \\le a \\le b \\le c \\le 10^4$).\n\n\n-----Output-----\n\nFor each test case, print the answer. In the first line print $res$ \u2014 the minimum number of operations you have to perform to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$. On the second line print any suitable triple $A, B$ and $C$.\n\n\n-----Example-----\nInput\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\nOutput\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48", "solutions": "[\"mii = 3*10**4\\n\\nfactors = [set() for _ in range(mii + 1)]\\nfactors[1] = set([1])\\n\\nfor k in range(2, mii + 1):\\n    for p in range(2, mii + 1):\\n        if k % p == 0:\\n            factors[k] = set(ole*p for ole in factors[k//p]) | factors[k//p]\\n            break\\n        elif p * p > k:\\n            factors[k] = set([1, k])\\n            break\\n\\n# print(factors[:20])\\n\\nt = int(input())\\nfor _ in range(t):\\n\\n    a, b, c = [int(x) for x in input().split()]\\n\\n\\n    best_score = 10**15\\n    best_trip = a, b, c\\n\\n    for k in range(1, mii + 1):\\n        this_b = k\\n        if c % this_b < this_b - (c % this_b):\\n            this_c = this_b * (c // this_b)\\n        else:\\n            this_c = this_b * (c // this_b + 1)\\n\\n        this_c = max(this_c, this_b)\\n\\n        this_a = -1\\n        loss_a = 10**15\\n        for cur_a in factors[this_b]:\\n            if abs(a - cur_a) < loss_a:\\n                this_a = cur_a\\n                loss_a = abs(a - cur_a)\\n\\n        cur_score = abs(a - this_a) + abs(b - this_b) + abs(c - this_c)\\n        if cur_score < best_score:\\n            best_score = cur_score\\n            best_trip = this_a, this_b, this_c\\n\\n    print(best_score)\\n    print(*best_trip)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\n\\ndef make_divisors(n):\\n    \\\"\\\"\\\"\\u81ea\\u7136\\u6570n\\u306e\\u7d04\\u6570\\u3092\\u5217\\u6319\\u3057\\u305f\\u30ea\\u30b9\\u30c8\\u3092\\u51fa\\u529b\\u3059\\u308b\\n    \\u8a08\\u7b97\\u91cf: O(sqrt(N))\\n    \\u5165\\u51fa\\u529b\\u4f8b: 12 -> [1, 2, 3, 4, 6, 12]\\n    \\\"\\\"\\\"\\n    divisors = []\\n    for k in range(1, int(n**0.5) + 1):\\n        if n % k == 0:\\n            divisors.append(k)\\n            if k != n // k:\\n                divisors.append(n // k)\\n    divisors = sorted(divisors)\\n    return divisors\\n\\ndiv_list = [None] * (10**4 + 30)\\nfor i in range(1, 10**4 + 30):\\n    div_list[i] = make_divisors(i)\\n\\nt = int(input())\\nINF = 10**6\\nfor _ in range(t):\\n    ans_a = -1\\n    ans_b = -1\\n    ans_c = -1\\n    ans = INF\\n    a, b, c = list(map(int, input().split()))\\n    for tmp_b in range(1, 10**4 + 30):\\n        cost_b = abs(b - tmp_b)\\n        \\n        cost_a = INF\\n        for tmp_a in div_list[tmp_b]:\\n            if cost_a > abs(a - tmp_a):\\n                cost_a = abs(a - tmp_a)\\n                aa = tmp_a\\n              \\n        cost_c = INF\\n        num = c // tmp_b\\n        cost_c = INF\\n        if cost_c > abs(c - num * tmp_b):\\n            cost_c = abs(c - num * tmp_b)\\n            cc = num * tmp_b\\n        if cost_c > abs(c - (num+1) * tmp_b):\\n            cost_c = abs(c - (num+1) * tmp_b)\\n            cc = (num+1) * tmp_b\\n        if cost_c > abs(c - (num-1) * tmp_b):\\n            cost_c = abs(c - (num-1) * tmp_b)\\n            cc = (num-1) * tmp_b\\n        tmp_ans = cost_a + cost_b + cost_c\\n        if ans > tmp_ans:\\n            ans = tmp_ans\\n            ans_b = tmp_b\\n            ans_a = aa\\n            ans_c = cc\\n    print(ans)\\n    print(ans_a, ans_b, ans_c)\\n   \\n        \\n            \\n        \\n\", \"import bisect\\n\\nt = int(input())\\n\\nq = []\\nans = [float(\\\"inf\\\")] * t\\nansabc = [[0] * 3 for i in range(t) ]\\n\\nfor loop in range(t):\\n\\n    a,b,c = map(int,input().split())\\n    q.append([a,b,c])\\n\\nfor nb in range(1,30001):\\n\\n    mlis = []\\n    now = 1\\n\\n    while now ** 2 <= nb:\\n        if now ** 2 == nb:\\n            mlis.append(now)\\n            break\\n        elif nb % now == 0:\\n            mlis.append(now)\\n            mlis.append(nb // now)\\n\\n        now += 1\\n\\n    mlis.sort()\\n    mlis.append(float(\\\"inf\\\"))\\n\\n    for i in range(t):\\n\\n        a,b,c = q[i]\\n\\n        nans = abs(b-nb)\\n\\n        if c < nb:\\n            nans += nb-c\\n            ansc = nb\\n        else:\\n\\n            if c % nb < nb - c%nb:\\n                ansc = c // nb * nb\\n            else:\\n                ansc = c // nb * nb + nb\\n            nans += min(c % nb , nb - c%nb)\\n\\n        ind = bisect.bisect_left(mlis,a)\\n\\n        if abs(a - mlis[ind]) < abs(a - mlis[ind-1]):\\n            ansa = mlis[ind]\\n        else:\\n            ansa = mlis[ind-1]\\n        nans += min(abs(a - mlis[ind]) , abs(a - mlis[ind-1]))\\n\\n        if ans[i] > nans:\\n            ans[i] = nans\\n            ansabc[i] = [ansa,nb,ansc]\\n\\nfor i in range(t):\\n    print (ans[i])\\n    print (\\\" \\\".join(map(str,ansabc[i])))\", \"import sys\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\nf = [[] for i in range(20021)]\\n\\nfor i in range(1,20021):\\n\\tfor j in range(1,i+1):\\n\\t\\tif j * j > i:\\n\\t\\t\\tbreak\\n\\t\\tif i % j == 0:\\n\\t\\t\\t\\tf[i].append(j)\\n\\t\\t\\t\\tif j*j != i:\\n\\t\\t\\t\\t\\tf[i].append(i//j)\\n\\ndef solve():\\n\\ta,b,c = mints()\\n\\tans = (int(1e9),0,0,0)\\n\\tfor C in range(1,2*c+10):\\n\\t\\tdc = abs(C-c)\\n\\t\\t#print(C, f[C])\\n\\t\\tfor B in f[C]:\\n\\t\\t\\tdb = abs(B-b)\\n\\t\\t\\tfor A in f[B]:\\n\\t\\t\\t\\tans = min(ans, (dc+db+abs(A-a),A,B,C))\\n\\tprint(ans[0])\\n\\tprint(*ans[1:])\\n\\nfor i in range(mint()):\\n\\tsolve()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nfor _ in range(int(input())):\\n    a, b, c = list(map(int, input().split()))\\n    ans = 10**18\\n    index = [0, 0, 0]\\n\\n    for x in range(1, c+1):\\n        for y in range(x, c+100, x):\\n            cost = abs(a-x) + abs(b-y)\\n            if c % y < y - (c % y):\\n                z = c - (c % y)\\n                cost += c % y\\n            else:\\n                z = c + (y - (c % y))\\n                cost += y - (c % y)\\n            if ans > cost:\\n                ans = cost\\n                index = [x, y, z]\\n\\n    print(ans)\\n    print(*index)\\n\", \"q = int(input())\\ndz = [set() for i in range(13337)]\\ndz[1].add(1)\\ndz[2].add(1)\\ndz[2].add(2)\\nfor k in range(3,13337):\\n\\ti = 2\\n\\tcyk = 0\\n\\twhile i**2 <= k:\\n\\t\\tif k%i == 0:\\n\\t\\t\\tcyk = 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif cyk == 0:\\n\\t\\tdz[k].add(1)\\n\\t\\tdz[k].add(k)\\n\\telse:\\n\\t\\tkk = k\\n\\t\\tdzi = 1\\n\\t\\twhile kk%i == 0:\\n\\t\\t\\tdzi *= i\\n\\t\\t\\tkk//= i\\n\\t\\tpom = dz[kk]\\n\\t\\tdupa = set()\\n\\t\\tfor j in pom:\\n\\t\\t\\tdupa.add(j*dzi)\\n\\t\\tdz[k] = dz[k//i].union(dupa)\\nfor _ in range(q):\\n\\ta,b,c = map(int,input().split())\\n\\tbestie = [a,b,c]\\n\\tbest = 34739174893\\n\\tdef wyn(x,y,z):\\n\\t\\treturn abs(x-a)+abs(y-b)+abs(z-c)\\n\\tfor z in range(1,13337):\\n\\t\\tif abs(z-c) > best:\\n\\t\\t\\tcontinue\\n\\t\\tfor y in dz[z]:\\n\\t\\t\\tif abs(z-c)+abs(y-b)>best:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tfor x in dz[y]:\\n\\t\\t\\t\\tif wyn(x,y,z) < best:\\n\\t\\t\\t\\t\\tbestie = [x,y,z]\\n\\t\\t\\t\\t\\tbest = wyn(x,y,z)\\n\\tprint(best)\\n\\tprint(*bestie)\", \"import sys\\n\\nfor _ in range(int(sys.stdin.readline().rstrip())):\\n    a, b, c = list(map(int, sys.stdin.readline().rstrip().split()))\\n    re = 99999999\\n    re_arr = [a, b, c]\\n    for i in range(1, 10001):\\n        chk_i = abs(i - a)\\n        if chk_i > re and i > a:\\n            break\\n        j = 1\\n        while True:\\n            chk_j = chk_i + abs(b - (i * j))\\n            if chk_j > re and i * j > b:\\n                break\\n            k = 1\\n            while True:\\n                chk_k = chk_j + abs(c - (i * j * k))\\n                if chk_k > re and i * j * k > c:\\n                    break\\n                elif chk_k < re:\\n                    re = chk_k\\n                    re_arr = [i, i * j, i * j * k]\\n                k += 1\\n            j += 1\\n    print(re)\\n    for i in re_arr:\\n        print(i, end=' ')\\n    print('')\\n\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\",\n    \"1\\n137 10000 10000\\n\",\n    \"1\\n1 137 10000\\n\",\n    \"1\\n73 10000 10000\\n\",\n    \"1\\n1667 3334 10000\\n\",\n    \"1\\n256 4096 10000\\n\",\n    \"1\\n1 1667 10000\\n\",\n    \"2\\n1 137 10000\\n1 1429 10000\\n\",\n    \"1\\n1667 10000 10000\\n\",\n    \"1\\n667 10000 10000\\n\",\n    \"1\\n1 1000 1000\\n\",\n    \"1\\n3334 3334 10000\\n\",\n    \"1\\n137 137 10000\\n\",\n    \"1\\n73 73 10000\\n\",\n    \"1\\n3334 3335 10000\\n\",\n    \"1\\n152 912 10000\\n\",\n    \"1\\n3340 3340 10000\\n\",\n    \"1\\n137 139 10000\\n\",\n    \"1\\n1429 1429 10000\\n\",\n    \"2\\n3334 3334 10000\\n73 10000 10000\\n\",\n    \"1\\n171 9999 10000\\n\",\n    \"1\\n3 6 10000\\n\",\n    \"2\\n437 10000 10000\\n874 10000 10000\\n\",\n    \"1\\n417 10000 10000\\n\",\n    \"1\\n171 10000 10000\\n\",\n    \"1\\n73 146 10000\\n\",\n    \"1\\n1429 10000 10000\\n\",\n    \"1\\n437 10000 10000\\n\",\n    \"1\\n452 10000 10000\\n\",\n    \"1\\n1 10000 10000\\n\",\n    \"1\\n435 10000 10000\\n\",\n    \"1\\n1 73 10000\\n\",\n    \"1\\n1667 5001 9999\\n\",\n    \"1\\n1667 1667 10000\\n\",\n    \"2\\n73 10000 10000\\n73 73 10000\\n\",\n    \"1\\n1 667 10000\\n\",\n    \"1\\n1667 5001 10000\\n\",\n    \"1\\n2052 5002 10000\\n\",\n    \"1\\n473 1771 9994\\n\",\n    \"1\\n63 10000 10000\\n\",\n    \"1\\n6 5583 8366\\n\",\n    \"1\\n715 5005 10000\\n\",\n    \"2\\n73 10000 10000\\n71 10000 10000\\n\",\n    \"1\\n152 912 9999\\n\",\n    \"3\\n1 137 10000\\n1 1429 10000\\n1429 1429 10000\\n\",\n    \"1\\n91 91 10000\\n\",\n    \"2\\n667 10000 10000\\n1 667 10000\\n\",\n    \"1\\n556 5004 10000\\n\",\n    \"1\\n278 10000 10000\\n\",\n    \"3\\n1667 3334 10000\\n137 10000 10000\\n417 10000 10000\\n\",\n    \"1\\n5 76 10000\\n\",\n    \"1\\n44 2760 6796\\n\",\n    \"1\\n667 667 10000\\n\",\n    \"3\\n3334 3334 10000\\n73 10000 10000\\n273 10000 10000\\n\",\n    \"2\\n455 10000 10000\\n1 323 10000\\n\",\n    \"1\\n2 749 1000\\n\",\n    \"1\\n459 10000 10000\\n\",\n    \"1\\n213 213 10000\\n\",\n    \"1\\n1684 5052 10000\\n\",\n    \"3\\n667 10000 10000\\n1 667 10000\\n1 556 10000\\n\",\n    \"6\\n455 10000 10000\\n1 323 10000\\n278 10000 10000\\n88 528 10000\\n3334 3334 10000\\n73 10000 10000\\n\",\n    \"1\\n451 10000 10000\\n\",\n    \"1\\n75 10000 10000\\n\",\n    \"1\\n3533 3533 10000\\n\",\n    \"1\\n1 1573 9014\\n\",\n    \"1\\n54 7280 9967\\n\",\n    \"1\\n176 4048 10000\\n\",\n    \"2\\n1667 10000 10000\\n3334 3335 10000\\n\",\n    \"2\\n256 4096 10000\\n2 749 1000\\n\",\n    \"1\\n1 100 940\\n\",\n    \"10\\n3351 6383 6479\\n7051 9793 9929\\n1 1061 9572\\n5401 5401 5865\\n9777 9987 9987\\n3393 7229 9665\\n8014 8533 8665\\n9549 9917 9998\\n3336 6686 9962\\n5351 8201 9241\\n\",\n    \"3\\n256 4096 10000\\n2 749 1000\\n417 10000 10000\\n\",\n    \"1\\n1 1991 2975\\n\",\n    \"1\\n71 9998 10000\\n\",\n    \"1\\n71 9999 10000\\n\",\n    \"5\\n1 2 3\\n3 4 5\\n5 6 7\\n7 8 9\\n10 11 12\\n\",\n    \"5\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"5\\n1 2 3\\n4 55 66\\n888 999 1000\\n483 2349 9999\\n3842 8344 9999\\n\",\n    \"2\\n233 233 233\\n233 233 233\\n\",\n    \"1\\n176 3344 10000\\n\",\n    \"1\\n1 242 1324\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n\",\n    \"2\\n137 10001 10001\\n\",\n    \"1\\n1 137 10001\\n\",\n    \"2\\n73 10001 10001\\n\",\n    \"2\\n1667 3334 10002\\n\",\n    \"779\\n257 3341 10023\\n\",\n    \"2\\n1 1667 10002\\n\",\n    \"1\\n1 137 10001\\n3\\n1 1429 10003\\n\",\n    \"4\\n1667 10002 10002\\n\",\n    \"10\\n667 10005 10005\\n\",\n    \"0\\n1 1000 1000\\n\",\n    \"2\\n3334 3334 10002\\n\",\n    \"1\\n137 137 10001\\n\",\n    \"1\\n73 73 10001\\n\",\n    \"3\\n3334 3334 10002\\n\",\n    \"32\\n152 912 10032\\n\",\n    \"14\\n3334 3334 10002\\n\",\n    \"3\\n137 137 10001\\n\",\n    \"3\\n1429 1429 10003\\n\",\n    \"2\\n3334 3334 10002\\n2\\n73 10001 10001\\n\",\n    \"16\\n164 10004 10004\\n\",\n    \"2\\n3 6 10002\\n\",\n    \"12\\n435 10005 10005\\n37\\n909 9999 9999\\n\",\n    \"16\\n417 10008 10008\\n\",\n    \"15\\n164 10004 10004\\n\",\n    \"22\\n77 154 10010\\n\",\n    \"6\\n1429 10003 10003\\n\",\n    \"12\\n435 10005 10005\\n\",\n    \"23\\n455 10010 10010\\n\",\n    \"0\\n1 10000 10000\\n\",\n    \"10\\n435 10005 10005\\n\",\n    \"1\\n1 73 10001\\n\",\n    \"3\\n1667 5001 10002\\n\",\n    \"2\\n1667 1667 10002\\n\",\n    \"2\\n73 10001 10001\\n1\\n73 73 10001\\n\",\n    \"5\\n1 667 10005\\n\",\n    \"2\\n1667 5001 10002\\n\",\n    \"388\\n1667 5001 10002\\n\",\n    \"173\\n417 1668 10008\\n\",\n    \"10\\n61 10004 10004\\n\",\n    \"1403\\n4 4184 8368\\n\",\n    \"10\\n715 5005 10010\\n\",\n    \"2\\n73 10001 10001\\n4\\n73 10001 10001\\n\",\n    \"33\\n152 912 10032\\n\",\n    \"1\\n1 137 10001\\n3\\n1 1429 10003\\n3\\n1429 1429 10003\\n\",\n    \"10\\n91 91 10010\\n\",\n    \"10\\n667 10005 10005\\n5\\n1 667 10005\\n\",\n    \"8\\n556 5004 10008\\n\",\n    \"16\\n278 10008 10008\\n\",\n    \"2\\n1667 3334 10002\\n2\\n137 10001 10001\\n16\\n417 10008 10008\\n\",\n    \"4\\n5 80 10000\\n\",\n    \"502\\n42 2268 6804\\n\",\n    \"5\\n667 667 10005\\n\",\n    \"2\\n3334 3334 10002\\n2\\n73 10001 10001\\n21\\n278 10008 10008\\n\",\n    \"20\\n455 10010 10010\\n13\\n1 323 10013\\n\",\n    \"249\\n2 500 1000\\n\",\n    \"24\\n455 10010 10010\\n\",\n    \"11\\n213 213 10011\\n\",\n    \"70\\n1667 5001 10002\\n\",\n    \"10\\n667 10005 10005\\n5\\n1 667 10005\\n8\\n1 556 10008\\n\",\n    \"20\\n455 10010 10010\\n13\\n1 323 10013\\n16\\n278 10008 10008\\n32\\n88 528 10032\\n2\\n3334 3334 10002\\n2\\n73 10001 10001\\n\",\n    \"24\\n455 10010 10010\\n\",\n    \"4\\n73 10001 10001\\n\",\n    \"400\\n3334 3334 10002\\n\",\n    \"73\\n1 1502 9012\\n\",\n    \"2299\\n56 4984 9968\\n\",\n    \"736\\n176 3344 10032\\n\",\n    \"4\\n1667 10002 10002\\n3\\n3334 3334 10002\\n\",\n    \"779\\n257 3341 10023\\n249\\n2 500 1000\\n\",\n    \"6\\n1 94 940\\n\",\n    \"208\\n3239 6478 6478\\n2223\\n4964 9928 9928\\n7\\n1 1063 9567\\n464\\n5401 5401 5401\\n210\\n9987 9987 9987\\n2608\\n3221 9663 9663\\n651\\n8533 8533 8533\\n449\\n9917 9917 9917\\n2551\\n2491 4982 9964\\n1771\\n4620 9240 9240\\n\",\n    \"779\\n257 3341 10023\\n249\\n2 500 1000\\n16\\n417 10008 10008\\n\",\n    \"504\\n1 1488 2976\\n\",\n    \"6\\n73 10001 10001\\n\",\n    \"5\\n73 10001 10001\\n\",\n    \"1\\n1 1 3\\n2\\n2 4 4\\n2\\n6 6 6\\n2\\n8 8 8\\n2\\n11 11 11\\n\",\n    \"0\\n1 1 1\\n0\\n1 1 1\\n0\\n1 1 1\\n0\\n1 1 1\\n0\\n1 1 1\\n\",\n    \"1\\n1 1 3\\n11\\n4 56 56\\n112\\n999 999 999\\n169\\n500 2500 10000\\n1985\\n4172 8344 8344\\n\",\n    \"0\\n233 233 233\\n0\\n233 233 233\\n\",\n    \"32\\n176 3344 10032\\n\",\n    \"23\\n1 221 1326\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1311/D", "starter_code": ""}
{"id": 4013, "question": "You are given an array $a$ consisting of $n$ integer numbers.\n\nLet instability of the array be the following value: $\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$.\n\nYou have to remove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array. Your task is to calculate the minimum possible instability.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible instability of the array if you have to remove exactly one element from the array $a$.\n\n\n-----Examples-----\nInput\n4\n1 3 3 7\n\nOutput\n2\n\nInput\n2\n1 100000\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can remove $7$ then instability of the remaining array will be $3 - 1 = 2$.\n\nIn the second example you can remove either $1$ or $100000$ then instability of the remaining array will be $100000 - 100000 = 0$ and $1 - 1 = 0$ correspondingly.", "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nprint(min(a[-1] - a[1], a[-2] - a[0]))\\n\", \"n=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nif a[1]-a[0]>=a[-1]-a[-2]:\\n    print(a[-1]-a[1])\\nelse:\\n    print(a[-2]-a[0])\\n\", \"n=int(input())\\narr=list(map(int,input().split()))\\narr.sort()\\nval1=max(arr)-min(arr[1:])\\nval2=max(arr[:n-1])-min(arr)\\nprint(min(val1,val2))\\n\", \"n = int(input())\\nnums = sorted(list(map(int, input().split())))\\n\\nr1 = nums[-2] - nums[0]\\nr2 = nums[-1] - nums[1]\\nprint(min(r1, r2))\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, = getIntList()\\n#print(N)\\nza = getIntList()\\n\\nza.sort()\\n\\nt = za[-1] - za[1]\\nt1 = za[-2] - za[0]\\n\\nprint(min(t,t1))\\n\\n\\n\\n\\n\\n\", \"n = int(input())\\na = list(map(int,input().split()))\\na.sort()\\n\\nif(len(a) == 2):\\n\\tprint(0)\\nelse:\\n\\tprint(min(a[-1]-a[1], a[-2]-a[0]))\", \"def read_nums():\\n    return [int(x) for x in input().split()]\\n\\n\\ndef main():\\n    n, = read_nums()\\n    nums = sorted(read_nums())\\n    res = min(nums[-2] - nums[0], nums[-1] - nums[1])\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def solve():\\n    n = int(input())\\n    arr = [int(k) for k in input().split()]\\n    \\n    arr.sort()\\n    \\n    if n == 2:\\n        print (0)\\n        return\\n    \\n    ans = arr[-1] - arr[1]\\n    ans = min(ans, arr[-2] - arr[0])\\n    \\n    print (ans)\\n    \\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"# alpha = \\\"abcdefghijklmnopqrstuvwxyz\\\"\\nt = 1\\nfor test in range(t):\\n    # n,s = (map(int, input().split()))\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    a.sort()\\n    if a[1]-a[0]>a[-1]-a[-2]:\\n        print(a[-1]-a[1])\\n    else:\\n        print(a[-2]-a[0])\\n\\n\", \"def go():\\n    n = int(input())\\n    a = [int(i) for i in input().split(' ')]\\n    if n == 2:\\n        return 0\\n    m1 = max(a)\\n    a.remove(m1)\\n    m2 = max(a)\\n    mi1 = min(a)\\n    a.remove(mi1)\\n    mi2 = min(a)\\n    if m2 - mi1 < m1 - mi2:\\n        return m2 - mi1\\n    return m1 - mi2\\n\\nprint(go())\\n\", \"n = input()\\narr = [int(x) for x in input().split()]\\narr.sort()\\n\\nx1, x2 = arr[0], arr[1]\\ny1, y2 = arr[-1], arr[-2]\\n\\nif (y2 - x1) > (y1 - x2):\\n    print(y1 - x2)\\nelse:\\n    print(y2 - x1)\\n\", \"n=int(input())\\na=[int(s) for s in input().split()]\\na.sort()\\nmn1=a[n-2]-a[0]\\nmn2=a[n-1]-a[1]\\nprint(min(mn1,mn2))\\n\", \"#JMD\\n#Nagendra Jha-4096\\n\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nt=1\\nfor tt in range(t):\\n    n=int(input())\\n    a=list(map(int,sys.stdin.readline().split(' ')))\\n    a.sort()\\n\\n    print(min(a[-2]-a[0],a[-1]-a[1]))\\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\\n    \\n    \\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\\n\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\nans = 0\\nif n > 2:\\n    ans = min(a[-2] - a[0], a[-1] - a[1])\\nprint(ans)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\na.sort()\\nif a[1]-a[0]>a[-1]-a[-2]:\\n\\tdel a[0]\\nelse:\\n\\tdel a[-1]\\nprint(a[-1]-a[0])\", \"n = int(input())\\ns = list(map(int, input().split()))\\nM = max(s)\\nm = min(s)\\ni = M - m\\ns.remove(M)\\nM1 = max(s)\\ni1 = M1 - m\\ns.append(M)\\ns.remove(m)\\nm1 = min(s)\\ni2 = M - m1\\nprint(min(i,i1,i2))\\n\", \"from operator import itemgetter\\n#int(input())\\n#map(int,input().split())\\n#[list(map(int,input().split())) for i in range(q)]\\n#print(\\\"YES\\\" * ans + \\\"NO\\\" * (1-ans))\\nn = int(input())\\nai = list(map(int,input().split()))\\nai.sort()\\nprint(min(ai[-2] - ai[0],ai[-1] - ai[1]))\\n\", \"n=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nprint(min(a[n-1]-a[1],a[n-2]-a[0]))\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\nprint(min(a[n - 2] - a[0], a[n - 1] - a[1]))\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl.sort()\\nans1 = l[-2] - l[0]\\nans2 = l[-1] - l[1]\\nprint(min(ans1, ans2))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na.sort(reverse = True)\\nprint(min(a[0] - a[-2], a[1] - a[-1]))\", \"n=int(input())\\nl=list(map(int,input().split()))\\nl.sort()\\nprint(min(l[n-1]-l[0],l[n-1]-l[1],l[n-2]-l[0]))\", \"import sys\\nsys.setrecursionlimit(10**6)\\n\\ndef main(): \\n   nbEntrees = int(input())\\n   nb = list(map(int, input().split()))\\n   maximum = max(nb)\\n   nb.remove(maximum)\\n\\n   etendue = max(nb) - min(nb)\\n   nb.append(maximum)\\n   maximum = min(nb)\\n   nb.remove(maximum)\\n   \\n   etendue = min(etendue, max(nb) - min(nb))\\n\\n   print(etendue)\\n\\nmain()\", \"#codeforces _1095B_live\\ngi = lambda : list(map(int,input().split()))\\nn, = gi()\\nl = gi()\\nl.sort()\\nans = min(max(l)-min(l[1:]),(max(l[:-1])-min(l)))\\nprint(ans)\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"4\\n1 3 3 7\\n\",\n    \"2\\n1 100000\\n\",\n    \"5\\n3 1 4 4 2\\n\",\n    \"3\\n1 10 11\\n\",\n    \"60\\n36 91 2 38 37 49 48 11 59 67 53 56 35 60 87 59 60 16 73 34 15 4 57 40 38 44 4 80 63 26 94 99 68 47 88 4 96 36 15 54 54 19 9 88 78 47 99 90 63 23 23 77 79 31 68 68 75 71 100 37\\n\",\n    \"3\\n1 2 4\\n\",\n    \"4\\n1 5 6 7\\n\",\n    \"4\\n12 8 7 4\\n\",\n    \"23\\n48 76 49 46 54 10 7 11 48 78 1 44 36 64 73 19 80 83 81 59 19 18 8\\n\",\n    \"5\\n1 12 13 14 15\\n\",\n    \"3\\n1 3 4\\n\",\n    \"6\\n1 47 66 81 19 95\\n\",\n    \"12\\n1 2 3 4 5 6 7 8 9 10 11 12\\n\",\n    \"4\\n1 2 3 7\\n\",\n    \"3\\n1 4 4\\n\",\n    \"23\\n5 61 68 76 70 87 26 55 83 93 95 45 90 36 95 99 72 10 97 22 13 23 100\\n\",\n    \"4\\n1 6 7 9\\n\",\n    \"24\\n93 94 43 61 84 67 63 4 42 4 40 1 37 57 51 68 19 18 92 44 62 62 38 51\\n\",\n    \"3\\n1 345 347\\n\",\n    \"3\\n4 5 5\\n\",\n    \"5\\n3 4 3 1 5\\n\",\n    \"3\\n99999 100000 100000\\n\",\n    \"35\\n13 9 84 88 42 75 73 3 10 44 94 74 36 14 23 67 85 94 55 93 38 82 96 54 19 99 73 58 65 90 41 29 50 77 17\\n\",\n    \"3\\n4 1 2\\n\",\n    \"9\\n94 33 89 40 53 48 71 78 88\\n\",\n    \"4\\n1 4 8 9\\n\",\n    \"80\\n85 14 30 21 2 68 24 96 71 4 78 33 15 32 55 86 62 55 71 26 14 45 26 47 24 6 16 21 84 52 87 20 65 68 40 18 35 15 13 57 70 91 89 84 22 43 21 83 50 92 8 15 36 86 61 12 43 28 32 26 31 70 97 47 37 88 64 23 3 77 80 24 67 68 8 40 63 80 74 64\\n\",\n    \"27\\n89 65 26 78 91 30 4 18 65 72 96 15 99 22 26 60 36 98 86 79 30 57 52 94 70 35 29\\n\",\n    \"64\\n58 66 82 99 26 95 18 87 83 65 29 83 89 72 23 41 87 48 14 7 83 20 34 63 83 80 33 70 12 59 88 21 76 70 71 53 16 88 40 99 5 20 81 93 91 55 33 29 54 46 35 36 18 69 50 100 100 82 21 11 40 60 31 68\\n\",\n    \"52\\n27 30 55 43 7 12 25 21 76 78 61 88 96 8 12 88 50 57 37 36 57 59 48 39 44 71 91 74 94 42 3 72 23 57 14 81 20 90 53 48 19 13 35 14 73 98 1 74 55 90 9 11\\n\",\n    \"4\\n4 11 12 17\\n\",\n    \"44\\n76 38 4 52 34 38 23 88 8 80 33 43 37 48 67 18 37 21 94 60 90 18 9 85 60 45 18 26 20 72 74 95 9 77 98 94 14 72 81 73 52 13 15 88\\n\",\n    \"2\\n47 2\\n\",\n    \"21\\n91 46 66 24 98 3 2 16 64 47 66 9 88 24 55 39 42 23 39 69 4\\n\",\n    \"78\\n20 4 81 66 78 5 47 77 63 9 26 91 45 44 28 70 73 58 30 61 92 55 8 1 54 9 41 83 79 58 80 50 13 13 68 90 69 14 18 31 22 43 73 66 38 1 88 11 10 17 71 53 71 30 5 76 38 98 59 69 7 38 70 19 2 37 60 70 50 78 53 72 72 25 89 62 77 76\\n\",\n    \"5\\n1 9 4 11 10\\n\",\n    \"45\\n97 87 66 76 82 5 67 20 77 29 63 18 48 18 28 26 12 13 96 60 21 93 94 7 20 23 100 80 21 10 80 69 96 97 96 29 1 62 49 78 42 11 47 90 29\\n\",\n    \"4\\n1 5 5 6\\n\",\n    \"2\\n1220 1000\\n\",\n    \"3\\n1 1 4\\n\",\n    \"3\\n1 4 8\\n\",\n    \"59\\n73 46 90 8 44 17 32 67 18 68 35 85 86 63 44 64 73 12 96 37 86 70 88 2 73 61 37 12 23 55 96 96 100 85 55 95 53 38 61 70 57 96 7 94 10 50 57 83 13 53 71 50 74 58 51 47 19 39 10\\n\",\n    \"3\\n40 67 65\\n\",\n    \"3\\n4 56 62\\n\",\n    \"76\\n23 38 14 65 43 92 98 33 32 71 52 88 6 9 38 63 20 14 84 58 84 66 87 62 30 14 81 6 39 32 22 61 22 87 77 16 30 26 48 62 97 51 49 2 60 38 65 31 51 100 40 86 17 78 47 47 92 80 52 82 63 25 42 84 12 19 99 41 96 99 54 92 49 54 46 60\\n\",\n    \"13\\n43 28 60 70 71 57 24 94 54 95 34 7 93\\n\",\n    \"6\\n67 100 5 97 83 85\\n\",\n    \"30\\n28 69 21 75 45 3 30 78 95 30 49 53 29 50 44 90 15 47 84 88 15 80 29 83 12 43 36 71 75 23\\n\",\n    \"18\\n88 16 51 10 26 52 88 56 54 16 30 43 89 90 70 66 5 72\\n\",\n    \"3\\n1 7 8\\n\",\n    \"43\\n20 75 10 50 77 99 75 54 1 62 46 19 37 4 79 37 100 85 54 59 91 91 96 38 62 49 28 39 29 81 49 48 7 11 49 83 9 24 88 61 85 33 31\\n\",\n    \"5\\n3 3 3 5 7\\n\",\n    \"95\\n28 37 51 19 54 38 21 62 47 83 96 60 36 89 14 77 4 16 99 25 41 55 67 38 13 35 88 19 73 70 16 100 6 66 70 12 55 90 73 54 24 20 13 60 8 27 88 11 94 86 87 34 40 5 23 5 92 11 23 64 32 38 16 38 56 37 1 10 79 25 63 54 44 28 65 3 54 52 66 99 37 4 33 29 9 7 33 52 17 55 67 49 45 82 38\\n\",\n    \"3\\n2 30 33\\n\",\n    \"17\\n99 42 52 81 78 94 100 56 20 60 74 88 2 55 7 78 35\\n\",\n    \"3\\n7 9 11\\n\",\n    \"3\\n1 4 5\\n\",\n    \"3\\n2 23 3\\n\",\n    \"4\\n7 24 20 12\\n\",\n    \"4\\n6 4 1 2\\n\",\n    \"3\\n1 8 7\\n\",\n    \"4\\n6 4 2 1\\n\",\n    \"18\\n71 72 96 81 89 62 42 28 92 1 37 28 3 19 65 79 73 33\\n\",\n    \"3\\n39 14 59\\n\",\n    \"7\\n14 20 15 12 1 4 7\\n\",\n    \"3\\n9 15 16\\n\",\n    \"3\\n4 4 14\\n\",\n    \"4\\n12521 87651 61289 78514\\n\",\n    \"10\\n671 529 765 761 54 406 450 284 312 567\\n\",\n    \"14\\n14 10 4 19 16 16 8 8 15 23 14 1 8 16\\n\",\n    \"20\\n9 10 23 6 15 10 13 3 3 20 16 16 7 3 24 25 25 10 18 6\\n\",\n    \"4\\n49999 49999 100000 100000\\n\",\n    \"8\\n8 20 7 16 11 9 24 2\\n\",\n    \"8\\n1 5 5 6 6 7 7 9\\n\",\n    \"67\\n76344 46992 50112 6145 4118 31055 70413 55046 92656 2066 2039 38823 73744 5618 66069 50373 77580 22466 7802 86261 5150 98903 97345 62706 21074 19227 39450 26828 85204 49023 1245 61547 12367 51356 84043 32836 98762 54455 87881 91417 56521 89919 46592 46616 95536 12660 96988 89467 51478 21141 92080 56627 20043 89424 35684 57469 25002 75133 648 26557 24155 1892 88103 36521 69599 72146 69356\\n\",\n    \"30\\n5494 90839 21677 21065 33720 40995 69053 30133 68390 23593 73669 59438 16475 78283 85669 57228 19501 93784 45860 30592 31376 14060 99524 43144 38260 21140 37393 46696 26737 86463\\n\",\n    \"82\\n53931 67166 20637 68570 4855 63080 53128 28375 54407 70564 46622 46903 32659 68966 20614 11381 51217 94774 90448 13368 51098 46518 15907 1090 44331 39269 17316 22813 66082 78034 58245 36364 45200 78881 4933 66406 58312 74413 94780 12718 61328 57754 75973 93986 26719 12938 21718 94288 24063 28518 7655 75160 91387 39913 76250 35717 95534 9917 74881 61615 87950 33125 97978 49501 28357 19262 15906 3021 93674 27038 15738 55002 84791 8062 65339 27861 20999 87057 22148 61413 15574 46154\\n\",\n    \"3\\n1 20 21\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"96\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"76\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"76\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"90\\n\",\n    \"3\\n\",\n    \"90\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"90\\n\",\n    \"1\\n\",\n    \"54\\n\",\n    \"5\\n\",\n    \"94\\n\",\n    \"84\\n\",\n    \"93\\n\",\n    \"95\\n\",\n    \"6\\n\",\n    \"90\\n\",\n    \"0\\n\",\n    \"89\\n\",\n    \"91\\n\",\n    \"7\\n\",\n    \"95\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"93\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"94\\n\",\n    \"71\\n\",\n    \"33\\n\",\n    \"83\\n\",\n    \"80\\n\",\n    \"1\\n\",\n    \"96\\n\",\n    \"2\\n\",\n    \"97\\n\",\n    \"3\\n\",\n    \"93\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"12\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"91\\n\",\n    \"20\\n\",\n    \"14\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"26362\\n\",\n    \"481\\n\",\n    \"18\\n\",\n    \"22\\n\",\n    \"50001\\n\",\n    \"17\\n\",\n    \"4\\n\",\n    \"97658\\n\",\n    \"85464\\n\",\n    \"94444\\n\",\n    \"1\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1095/B", "starter_code": ""}
{"id": 4014, "question": "Petya studies at university. The current academic year finishes with $n$ special days. Petya needs to pass $m$ exams in those special days. The special days in this problem are numbered from $1$ to $n$.\n\nThere are three values about each exam:  $s_i$ \u2014 the day, when questions for the $i$-th exam will be published,  $d_i$ \u2014 the day of the $i$-th exam ($s_i < d_i$),  $c_i$ \u2014 number of days Petya needs to prepare for the $i$-th exam. For the $i$-th exam Petya should prepare in days between $s_i$ and $d_i-1$, inclusive. \n\nThere are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the $i$-th exam in day $j$, then $s_i \\le j < d_i$.\n\nIt is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.\n\nFind the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ $(2 \\le n \\le 100, 1 \\le m \\le n)$ \u2014 the number of days and the number of exams.\n\nEach of the following $m$ lines contains three integers $s_i$, $d_i$, $c_i$ $(1 \\le s_i < d_i \\le n, 1 \\le c_i \\le n)$ \u2014 the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n\n\n-----Output-----\n\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\n\nAssume that the exams are numbered in order of appearing in the input, starting from $1$.\n\nIf there are multiple schedules, print any of them.\n\n\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\n\nOutput\n1 2 3 0 3 \n\nInput\n3 2\n1 3 1\n1 2 1\n\nOutput\n-1\n\nInput\n10 3\n4 7 2\n1 10 3\n8 9 1\n\nOutput\n2 2 2 1 1 0 4 3 4 4 \n\n\n\n-----Note-----\n\nIn the first example Petya can, for example, prepare for exam $1$ in the first day, prepare for exam $2$ in the second day, pass exam $1$ in the third day, relax in the fourth day, and pass exam $2$ in the fifth day. So, he can prepare and pass all exams.\n\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.", "solutions": "[\"def ke(i):\\n    return b[i]\\nn,m=map(int,input().split())\\na=[0]*m\\nb=[0]*m\\nc=[0]*m\\ne=[]\\nans=[0]*n\\nfor i in range(m):\\n    a[i],b[i],c[i]=map(int,input().split())\\n    ans[b[i]-1]=m+1\\n    e.append(i)\\ne.sort(key=ke)\\nfor i in range(m):\\n    k=0\\n    for j in range(a[e[i]]-1,b[e[i]]-1):\\n        if ans[j]==0:\\n            ans[j]=e[i]+1\\n            k+=1\\n        if k==c[e[i]]:\\n            break\\n    if k!=c[e[i]]:\\n        print(-1)\\n        return\\nfor i in ans:\\n    print(i,end=' ')\", \"n, m = list(map(int, input().split()))\\nL = []\\nfor i in range(m):\\n    a, b, c = list(map(int, input().split()))\\n    L.append([b, a, c, i])\\nL.sort()\\n\\nM = [-1 for i in range(n + 1)]\\nfor i in range(m):\\n    M[L[i][0]] = m + 1\\nfor i in range(1, n + 1):\\n    if M[i] == -1:\\n        f = False\\n        for j in range(m):\\n            if L[j][1] <= i and L[j][2] > 0 and i < L[j][0]:\\n                M[i] = L[j][3] + 1\\n                L[j][2] -= 1\\n                f = True\\n                break\\n        if not(f):\\n            M[i] = 0\\nf = True\\nfor j in range(m):\\n    if L[j][2] > 0:\\n        f = False\\nif f:\\n    print(*M[1:])\\nelse:\\n    print(-1)\\n\", \"T = input().split(' ')\\nn = int(T[0])\\nm = int(T[1])\\nL = [0] * n\\nM = []\\nD = [0] * m\\nF = [0] * m\\nfor i in range(m):\\n    S = input().split(' ')\\n    a = int(S[0])\\n    b = int(S[1])\\n    c = int(S[2])\\n    L[b-1] = m+1\\n    F[i] = b-1\\n    M.append((a-1, b-2, i+1))\\n    D[i] = c\\nM.sort()\\nfor i in range(n):\\n    if L[i] == 0:\\n        G = []\\n        for j in range(len(M)):\\n            if M[j][0]<=i:\\n                G.append((M[j][1], M[j][2]))\\n        G.sort()\\n        for k in range(len(G)):\\n            if D[G[k][1]-1] > 0 and F[G[k][1]-1]>i:\\n                D[G[k][1]-1]-=1\\n                L[i] = G[k][1]\\n                break\\nb = True\\nfor j in range(len(D)):\\n    if D[j] > 0:\\n        b = False\\nif b:\\n    for i in range(n-1):\\n        print(L[i], end=' ')\\n    print(L[n-1])\\nelse:\\n    print(-1)\\n\", \"n, m = list(map(int, input().split()))\\nprep = []\\n\\ndays = [-1] * n\\nrelease = []\\n\\nfor i in range(m):\\n    s_, d_, c_ = list(map(int, input().split()))\\n    release.append(s_)\\n    days[d_ - 1] = i\\n    prep.append(c_)\\n\\nrel_on_day = {}\\nfor i, r in enumerate(release):\\n    if r - 1 in rel_on_day:\\n        rel_on_day[r - 1].append(i)\\n    else:\\n        rel_on_day[r - 1] = [i]\\n\\nans = []\\n\\nwaiting = set()\\n\\nexam_q = []\\nfor d in days:\\n    if d != -1:\\n        exam_q.append(d)\\n\\n#print(rel_on_day)\\n\\nfor i in range(n):\\n    if i in rel_on_day:\\n        waiting = waiting | set(rel_on_day[i])\\n\\n #   print(waiting)\\n\\n\\n    if days[i] != -1: #exam\\n        if prep[days[i]] == 0:\\n            ans.append(m + 1)\\n            waiting.remove(days[i])\\n        else:\\n            print(-1)\\n            return\\n    else: #choose closest unstudied exam\\n        chosen = None\\n        for ex in exam_q:\\n            if prep[ex] > 0 and ex in waiting:\\n                chosen = ex\\n                break\\n        if not chosen is None:\\n            prep[ex] -= 1\\n            ans.append(ex + 1)\\n        else:\\n            ans.append(0)\\n\\nprint(\\\" \\\".join(list(map(str, ans))))\\n\", \"import sys\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndef __starting_point():\\n    n, m = [int(c) for c in input().split()]\\n    s = []\\n    d = []\\n    c = []\\n    studying = []\\n    for _ in range(m):\\n        x,y,z = [int(w) for w in input().split()]\\n        s.append(x)\\n        d.append(y)\\n        c.append(z)\\n        \\n    plan = []\\n\\n    for i in range(1, n+1):\\n        \\n        if i in s:\\n            indices = [k for k, x in enumerate(s) if x == i]\\n            for idx in indices:\\n                studying.append( (d[idx], idx) )\\n            studying.sort()\\n        \\n        #print(studying)\\n        if i in d:\\n            idx = d.index(i)\\n            if (i, idx) in studying:\\n                print (-1)\\n                return\\n            else:\\n                plan.append(m+1)\\n        else:\\n            if not studying:\\n                plan.append(0)\\n                continue\\n            idx = studying[0][1]\\n            plan.append(idx+1)\\n            c[idx] -= 1\\n            if c[idx] == 0:\\n                studying = studying[1:]\\n\\n    for i in plan:\\n        print (i, end=' ')\\n    print()\\n\\n\\n\\n\\n\\n\\n__starting_point()\", \"# Hello World program in Python\\nclass exam:\\n    def __init__(self, tickets, ex_day, prep_days, index):\\n        self.tick = tickets-1\\n        self.ex_day = ex_day-1\\n        self.prep_days = prep_days\\n        self.index = index\\n\\n\\ndef task():\\n    n, m = [int(x) for x in input().split(' ')]\\n    exs = list()\\n    for i in range(m):\\n        a, b, c = [int(x) for x in input().split(' ')]\\n        exs.append(exam(a, b, c, i + 1))\\n    s = sum((x.prep_days for x in exs))\\n    if s > n - m:\\n        print(-1)\\n        return -1\\n    exs = sorted(exs, key=lambda x: -x.tick)\\n    exdays = [x.ex_day for x in exs]\\n    days = [m+1 if i in exdays else 0 for i in range(0, n)]\\n    for ex in exs:\\n        d = ex.ex_day\\n        offs = 1\\n        for i in range(ex.prep_days):\\n            cont = True\\n            while (cont):\\n                if d - offs < ex.tick:\\n                    print(-1)\\n                    return\\n                if days[d - offs] == 0:\\n                    days[d - offs] = ex.index\\n                    cont = False\\n                else:\\n                    offs += 1\\n\\n    print(' '.join((str(x) for x in days)))\\n\\n\\ntask()\", \"n, m = map(int, input().split())\\nexams = []\\nfor i in range(m):\\n    e = list(map(int, input().split()))\\n    e.append(0)\\n    e.append(i + 1)\\n    exams.append(e)\\nexams.sort()\\nnow, have, f, ans, c = 0, [], True, [], 0\\nfor i in range(1, n + 1):\\n    while now < m and exams[now][0] == i:\\n        have.append(exams[now][1:])\\n        now += 1\\n        have.sort()\\n    if c < len(have) and have[c][0] == i:\\n        if have[c][1] == have[c][2]:\\n            ans.append(m + 1)\\n            c += 1\\n        else:\\n            f = False\\n            break\\n    else:\\n        j = 0\\n        while j < len(have) and have[j][1] == have[j][2]:\\n            j += 1\\n        if j == len(have):\\n            ans.append(0)\\n        else:\\n            ans.append(have[j][3])\\n            have[j][2] += 1\\nif f:\\n    for i in range(n):\\n        print(ans[i], end=' ')\\nelse:\\n    print(-1)\", \"n, m =[int(i) for i in input().split()]\\ns = [0] * m\\nd = [0] * m\\nc = [0] * m\\nfor i in range(m):\\n\\ts[i], d[i], c[i] = [int(j) - 1 for j in input().split()]\\n\\tc[i] += 1\\n\\tif d[i] - s[i] < c[i]:\\n\\t\\tprint(-1)\\n\\t\\tquit()\\n\\nans = [0] * n\\nfor i in d:\\n\\tans[i] = m + 1\\n\\nexam = []\\nfor i in range(n):\\n\\texam.append([])\\n\\tfor j in range(m):\\n\\t\\tif s[j] <= i < d[j]:\\n\\t\\t\\texam[i].append(j)\\n\\nfor i in range(n):\\n\\tif ans[i] == 0:\\n\\t\\tday_min = n + 1\\n\\t\\tfor j in exam[i]:\\n\\t\\t\\tif (d[j] < day_min) and (c[j] > 0):\\n\\t\\t\\t\\tday_min = d[j]\\n\\t\\t\\t\\texam_min = j\\n\\t\\tif day_min != n + 1:\\n\\t\\t\\tans[i] = exam_min + 1\\n\\t\\t\\tc[exam_min] -= 1\\n\\telse:\\n\\t\\tif c[d.index(i)] != 0:\\n\\t\\t\\tprint(-1)\\n\\t\\t\\tquit()\\n\\nfor i in range(n):\\n\\tif i != n - 1:\\n\\t\\tprint(ans[i], end = \\\" \\\")\\n\\telse:\\n\\t\\tprint(ans[i])\\n\\n\\n\", \"(n, m) = list(map(int, input().split()))\\n\\narray = [0] * (n + 1)\\nlst = []\\nfor x in range(m):\\n    (s, d, c) = list(map(int, input().split()))\\n    lst.append((d, s, c, x + 1))\\n\\nlst.sort()\\ni = 0\\nflag = True\\nfor (d, s, c, p) in lst:\\n    x = s\\n    while c > 0 and x < d:\\n        if array[x] == 0:\\n            array[x] = p\\n            c -= 1\\n        x += 1\\n    if c != 0:\\n        flag = False\\n        break\\n    else:\\n        array[d] = m + 1\\n\\nif flag:\\n    print(*array[1:])\\nelse:\\n    print(-1)\\n\", \"import bisect\\nn,m=list(map(int,input().split()))\\na=[]\\nb=[]\\nfor i in range(m):\\n    s,d,c=list(map(int,input().split()))\\n    if c>d-s+1:\\n        print(-1)\\n        quit()\\n    l=bisect.bisect_left(b,d)\\n    a.insert(l,[s,d,c,i+1])\\n    b.insert(l,d)\\nds=list('0' for i in range(n))\\nfor i in range(m):\\n    s,d,c,mi=a[i]\\n    c0=0\\n    for j in range(s,d):\\n        if ds[j-1]=='0':\\n            ds[j-1]=str(mi)\\n            c0+=1\\n        if c0>=c:\\n            break\\n    if c0<c:\\n        print(-1)\\n        quit()\\n    ds[d-1]=str(m+1)\\nprint(' '.join(ds))\\n\", \"[n, m] = [int(x) for x in input().split()]\\nI = 0\\nS = 1\\nD = 2\\nC = 3\\nexses = [[0, 0, 0, 0]]\\npops = [0] * (n+1)\\ni = 1\\nwhile i <= m:\\n  [s, d, c] = [int(x) for x in input().split()]\\n  exses.append([i, s, d, c])\\n  pops[d] = i\\n  i += 1\\n\\ni = 1\\nresult = [0] * (n+1)\\nfail = False\\nwhile i <=n:\\n  if pops[i] != 0 and exses[pops[i]][C] == 0:\\n    result[i] = m+1\\n  elif pops[i] != 0 and exses[pops[i]][C] > 0:\\n    fail = True\\n    break\\n  else:\\n    ex = None\\n    min = n+1\\n    for e in exses:\\n      if e[D] > i and e[S] <= i and e[D] < min and e[C] > 0:\\n        min = e[D]\\n        ex = e\\n    if ex == None:\\n      result[i] = 0\\n    else:\\n      result[i] = ex[I]\\n      ex[C] -= 1\\n  i += 1\\n\\nif fail:\\n  print(-1)\\nelse:\\n  for x in result[1:]:\\n    print(x, end=' ')\\n\", \"def solve(n, m, ss, dd, cc):\\n\\t# day: i ( 1 -> n)\\n\\t# exam: j (0 -> m - 1)\\n\\t# date : d (1 -> n)\\n\\t# start: s (1 -> n)\\n\\t#\\n\\n\\tdate = [-1] * (n + 1)\\n\\tfor j, d in enumerate(dd):\\n\\t\\tdate[d] = j\\t\\t# mark exam date for i-th exam\\n\\t# print(date)\\n\\tstart = [[] for _ in range(n + 1)]\\n\\tfor j, d in enumerate(ss):\\n\\t\\tstart[d].append(j)\\n\\t# print(start)\\n\\tpreps = []\\n\\tfor i in range(1, n + 1): # for each day in n days\\n\\t\\tif start[i]: # a start date\\n\\t\\t\\tpreps += start[i] # add to the list of preparation\\n\\t\\t# print(date)\\n\\t\\tu = date[i]\\n\\n\\t\\t# print(i, u, start[i], end=' ')\\n\\t\\tif u >= 0: # an exam date 0 -> m - 1\\n\\t\\t\\tj = u # j-th exam\\n\\t\\t\\tif cc[j] > 0: # failed to prepare\\n\\t\\t\\t\\t# print('failed ', j + 1)\\n\\t\\t\\t\\treturn -1\\n\\t\\t\\tdate[i] = m + 1 # take the exam\\n\\t\\telse:\\n\\t\\t\\t# print(preps, end=' ')\\n\\t\\t\\tif not preps: # no subject to prepare\\n\\t\\t\\t\\tdate[i] = 0\\n\\t\\t\\telse: # prepare for subject closest to the exam date\\n\\t\\t\\t\\tmin_d = min(dd[j] for j in preps)\\n\\t\\t\\t\\tfor j in preps:\\n\\t\\t\\t\\t\\tif dd[j] == min_d: break\\n\\t\\t\\t\\tdate[i] = j + 1 # prepare for j-th exam\\n\\t\\t\\t\\tcc[j] -= 1\\n\\t\\t\\t\\tif cc[j] == 0:\\n\\t\\t\\t\\t\\tpreps.remove(j)\\n\\t\\t# print(date[i])\\n\\n\\treturn date[1:]\\n\\n\\n\\n\\n\\ndef main():\\n\\tn, m = [int(_) for _ in input().split()]\\n\\n\\ts = []\\n\\td = []\\n\\tc = []\\n\\tfor i in range(m):\\n\\t\\ts_, d_, c_ = [int(_) for _ in input().split()]\\n\\n\\t\\ts.append(s_)\\n\\t\\td.append(d_)\\n\\t\\tc.append(c_)\\n\\n\\n\\n\\n\\tplan = solve(n, m, s, d, c)\\n\\tif isinstance(plan, list):\\n\\t\\tprint(' '.join(map(str, plan)))\\n\\telse:\\n\\t\\tprint(-1)\\n\\n\\n\\n\\ndef __starting_point():\\n\\tmain()\\n\\n__starting_point()\", \"import heapq\\nn,m = [int(s) for s in input().split()]\\nq0,q1 = [],[]\\nans = [0]*n\\nfor i in range(m):\\n    si, di, ci = [int(s) for s in input().split()]\\n    si -= 1\\n    di -= 1\\n    ans[di] = m+1\\n    heapq.heappush(q0, (si, di, ci, i))\\n\\nfor currday in range(n):\\n    while len(q0) and q0[0][0] <= currday:\\n        si,di,ci,i = heapq.heappop(q0)\\n        heapq.heappush(q1, (di,si,ci,i))\\n    if len(q1) and ans[currday] == 0:\\n        if currday > q1[0][0]:\\n            break\\n        ans[currday] = q1[0][3]+1\\n        if q1[0][2] == 1:\\n            heapq.heappop(q1)\\n        else:\\n            q1[0] = (q1[0][0], q1[0][1], q1[0][2]-1, q1[0][3])\\n\\nif len(q1) == 0 and len(q0) == 0:\\n    print(*ans)\\nelse:\\n    print(-1)\", \"#!/usr/bin/env python3\\nfrom sys import stdin, stdout\\n\\ndef rint():\\n    return list(map(int, stdin.readline().split()))\\n#lines = stdin.readlines()\\n\\nn, m = rint()\\n\\ns = [0 for i in range(m)]\\nd = [0 for i in range(m)]\\nc = [0 for i in range(m)]\\n\\n\\nfor i in range(m):\\n    s[i], d[i], c[i] = rint()\\n\\ns_in_day = [set() for i in range(n+1)]\\nfor i in range(m):\\n    day = s[i]\\n    s_in_day[day].add(i)\\n\\nd_in_day = [-1 for i in range(n+1)]\\nfor i in range(m):\\n    day = d[i]\\n    d_in_day[day] = i\\n\\n\\ndi_sorted = [0 for i in range(m)]\\ndi_sorted.sort(key=lambda x: d[i])\\n\\nans = [0 for i in range(n+1)]\\n\\ncandi_exam = set()\\nfor day in range(1, n+1):\\n    for exam in s_in_day[day]:\\n        candi_exam.add(exam)\\n    if d_in_day[day] != -1:\\n        exam = d_in_day[day]\\n        if c[exam] != 0:\\n            print(-1)\\n            return\\n        ans[day] = m+1\\n        if exam in candi_exam:\\n            candi_exam.remove(exam)\\n        continue\\n    \\n    if len(candi_exam) == 0:\\n        ans[day] = 0\\n        continue\\n    min_d_day = 101\\n    busy_exam = 0\\n    for exam in candi_exam:\\n        if d[exam] < min_d_day:\\n            busy_exam = exam\\n            min_d_day = d[exam]\\n    \\n    ans[day] = busy_exam + 1\\n    c[busy_exam] -= 1\\n    if c[busy_exam] == 0:\\n        candi_exam.remove(busy_exam)\\nfor i in range(m):\\n    if c[i] != 0:\\n        print(-1)\\n        return\\nprint(*ans[1:])\\n    \\n\\n        \\n\\n\", \"aa = input()\\nn, m = [int(s) for s in aa.split(' ')]\\n\\nexams = []\\nres = [0] * n\\n\\nfor i in range(m):\\n    aa = input()\\n    s,d,c = [int(s) for s in aa.split(' ')]\\n    el = {'s':s-1, 'd':d-1, 'c':c}\\n    exams.append(el)\\n    res[d - 1] = m + 1\\n\\nfor i in range(n-1, -1,-1):\\n    if res[i] > 0: #exam\\n        continue\\n    exam_num = -1\\n    min_zapas = n + 1\\n    for j in range(m):\\n        if (exams[j]['s'] <= i) and (i < exams[j]['d']) and (exams[j]['c'] > 0):\\n            zapas = i - exams[j]['s'] - exams[j]['c']\\n            if zapas < min_zapas:\\n                min_zapas = zapas\\n                exam_num = j\\n            if zapas < 0:\\n                break\\n    if exam_num == -1:\\n        continue\\n    \\n    res[i] = exam_num + 1\\n    exams[exam_num]['c'] = exams[exam_num]['c'] - 1\\n    \\npossible = True\\n\\nfor i in range(m):\\n    if exams[i]['c'] > 0:\\n        possible = False\\n        break\\n\\nif possible:\\n    print(\\\" \\\".join([str(x) for x in res]))\\nelse:\\n    print(-1)\", \"R = lambda: list(map(int, input().split()))\\n\\nn, m= R()\\na = []\\nfor i in range(m):\\n    s, d, c = R()\\n    a.append([d, s, c, i+1])\\na.sort()\\nr = [0] * (n+1)\\nfor i in range(m): r[a[i][0]] = m + 1\\nfor i in range(m):\\n    for j in range(a[i][1], a[i][0]):\\n        if a[i][2]==0: break\\n        elif r[j]==0:\\n            r[j] = a[i][3]\\n            a[i][2] -= 1\\n    if a[i][2]: print((-1)); return\\nprint(*r[1:])\\n\", \"from collections import namedtuple\\n\\nExam = namedtuple(\\\"Exam\\\", \\\"id s d c\\\")\\n\\n\\ndef get_exam(day, exams, prepared):\\n    result = None\\n\\n    for exam in exams:\\n        if exam.s <= day and prepared[exam.id] < exam.c and (result is None or exam.d < result.d):\\n            result = exam\\n\\n    return result\\n\\n\\nn, m = list(map(int, input().split()))\\nexams = []\\nprepared = [0] * (m + 1)\\nschedule = [0] * (n + 1)\\n\\nfor i in range(m):\\n    s, d, c = list(map(int, input().split()))\\n    exams.append(Exam(i + 1, s, d, c))\\n    schedule[d] = -1\\n\\nfor day in range(1, n + 1):\\n    if schedule[day] == -1:\\n        print(-1)\\n        return\\n\\n    if schedule[day] == m + 1:\\n        continue\\n\\n    exam = get_exam(day, exams, prepared)\\n\\n    if exam is None:\\n        continue\\n\\n    prepared[exam.id] += 1\\n    schedule[day] = exam.id\\n\\n    if prepared[exam.id] == exam.c:\\n        schedule[exam.d] = m + 1\\n\\nprint(' '.join(map(str, schedule[1:])))\\n\", \"a = input().split(\\\" \\\")\\na = [int(e) for e in a]\\n\\nisdc = []\\nfor i in range(a[1]):\\n    l = input().split(\\\" \\\")\\n    l = [int(e) for e in l]\\n    isdc.append([i+1, l[0]-1, l[1]-1, l[2]])\\n\\nl = [0] * a[0]\\nfor e in isdc:\\n    l[e[2]] = len(isdc) + 1\\n\\nisdc = sorted(isdc, key=lambda one: one[2])\\n\\nfor exam in isdc:\\n    day = exam[1]\\n    while day < exam[2]:\\n        if exam[3] == 0:\\n            break\\n        if l[day] == 0:\\n            l[day] = exam[0]\\n            exam[3] -= 1\\n\\n        day += 1\\n\\n    if exam[3] != 0:\\n        print(-1)\\n        return\\n\\nfor e in l:\\n    print(e, end=\\\" \\\")\\n\", \"import heapq\\n\\n\\n\\n\\nn, m = map(int, input().split())\\nans = [0]*n\\nary = []\\ndp = [[0]*n for i in range(n)]\\n# print(dp)\\ntmp =0\\n\\nwhile tmp < m:\\n    s, d, c = map(int, input().split())\\n    s -= 1; d -= 1\\n    ans[d] = m + 1\\n    ary.append((s, d, c + 1, tmp))\\n    # print('sdc', s,d,c)\\n    dp[s][d] = c + 1\\n    # print('dp', dp[s][d])\\n    tmp += 1\\n\\n\\n# print(dp)\\n\\n\\nd = 2\\nwhile d< n:\\n    l = 0\\n    while l+d < n:\\n        r = l+d\\n\\n        dp[l][r] += dp[l+1][r] + dp[l][r-1] - dp[l+1][r-1]\\n        # print('lr', l, r ,dp[l][r], dp[l + 1][r], dp[l][r - 1], dp[l + 1][r - 1])\\n        # if dp[l][r] > d:\\n        #     print(-1)\\n        #     quit(0)\\n        l += 1\\n    d+=1\\n\\nl = 0\\npos = 0\\nsary = sorted(ary)\\n# print(sary)\\nque = []\\n\\nwhile l<n:\\n    while pos<m and sary[pos][0] == l:\\n        heapq.heappush(que, [sary[pos][1], sary[pos][2] , sary[pos][3]])\\n        pos += 1\\n    if ans[l] > 0:\\n        l += 1\\n        continue\\n    if que.__len__() == 0:\\n        # ans[l] = 0\\n        l += 1\\n        continue\\n    head = heapq.heappop(que)\\n    # print('head',l, head)\\n    if head[1] + l - 1 > head[0]:\\n        print(-1)\\n        quit(0)\\n\\n\\n    head[1] -= 1\\n    ans[l] = head[2] + 1\\n    if head[1] > 1:\\n        heapq.heappush(que, head)\\n    l += 1\\n\\nif que.__len__() >0 or pos < m:\\n    print(-1)\\nelse:\\n    print(*ans)\", \"import heapq\\n\\n\\n\\n\\nn, m = map(int, input().split())\\nans = [0]*n\\nary = []\\ndp = [[0]*n for i in range(n)]\\n# print(dp)\\ntmp =0\\n\\nwhile tmp < m:\\n    s, d, c = map(int, input().split())\\n    s -= 1; d -= 1\\n    ans[d] = m + 1\\n    ary.append((s, d, c + 1, tmp))\\n    # print('sdc', s,d,c)\\n    dp[s][d] = c\\n    # print('dp', dp[s][d])\\n    tmp += 1\\n\\n\\n# print(dp)\\n\\n\\nd = 2\\nwhile d< n:\\n    l = 0\\n    while l+d < n:\\n        r = l+d\\n\\n        dp[l][r] += dp[l+1][r] + dp[l][r-1] - dp[l+1][r-1]\\n        # print('lr', l, r ,dp[l][r], dp[l + 1][r], dp[l][r - 1], dp[l + 1][r - 1])\\n        if dp[l][r] > d:\\n            print(-1)\\n            quit(0)\\n        l += 1\\n    d+=1\\n\\nl = 0\\npos = 0\\nsary = sorted(ary)\\n# print(sary)\\nque = []\\n\\nwhile l<n:\\n    while pos<m and sary[pos][0] == l:\\n        heapq.heappush(que, [sary[pos][1], sary[pos][2] , sary[pos][3]])\\n        pos += 1\\n    if ans[l] > 0:\\n        l += 1\\n        continue\\n    if que.__len__() == 0:\\n        # ans[l] = 0\\n        l += 1\\n        continue\\n    head = heapq.heappop(que)\\n    # print('head',l, head)\\n    if head[1] + l - 1 > head[0]:\\n        print(-1)\\n        quit(0)\\n\\n\\n    head[1] -= 1\\n    ans[l] = head[2] + 1\\n    if head[1] > 1:\\n        heapq.heappush(que, head)\\n    l += 1\\n\\nif que.__len__() >0 or pos < m:\\n    print(-1)\\nelse:\\n    print(*ans)\", \"n,m =map(int,input().split())\\nl = list()\\nout = [0] * n\\nfor i in range(m):\\n    s1,d1,c1 = map(int,input().split())\\n    l.append((s1,d1,c1,i))\\nl.sort(key=lambda x:x[1])\\ncan = True\\nfor j in l:\\n    out[j[1] - 1] = m + 1\\nfor i in l:\\n    c = i[2]\\n    for t in range(i[0],i[1]):\\n        if out[t - 1] == 0 and c > 0:\\n            out[t - 1] = i[3] + 1\\n            c -= 1\\n        if c == 0:\\n            break\\n    if c != 0:\\n        print(-1)\\n        can = False\\n        break\\n\\nif can is True:\\n    print(\\\" \\\".join(map(str,out)))\", \"rd = lambda: list(map(int, input().split()))\\nn, m = rd()\\na = sorted(([*rd()] + [i + 1] for i in range(m)), key=lambda x: x[1])\\nr = [0] * n\\nfor x in a:\\n    r[x[1] - 1] = m + 1\\n    for i in range(x[0] - 1, x[1] - 1):\\n        if not r[i]:\\n            r[i] = x[3]\\n            x[2] -= 1\\n            if not x[2]:\\n                break\\n    if x[2]:\\n        print(-1)\\n        return\\nprint(*r)\\n\", \"# from itertools import accumulate\\n# from bisect import bisect_left\\n# from collections import OrderedDict\\n\\nI = lambda: list(map(int, input().split()))\\n\\nn, m = I()\\ndates = [0 for i in range(n + 1)]\\ndata = []\\nfor i in range(m):\\n    d = I() + [i + 1]\\n    if dates[d[1]]:\\n        print(-1)\\n        return\\n    dates[d[1]] = m + 1\\n    data.append(d)\\ndata.sort(key = lambda x: x[1])\\nfor s, d, c, idx in data:\\n    x = 0\\n    for i in range(s, d):\\n        if x == c:\\n            break\\n        if not dates[i]:\\n            dates[i] = idx\\n            x += 1\\n    if x != c:\\n        print(-1)\\n        return\\nprint(*dates[1:])\"]", "input_output": "{\n  \"inputs\": [\n    \"5 2\\n1 3 1\\n1 5 1\\n\",\n    \"3 2\\n1 3 1\\n1 2 1\\n\",\n    \"10 3\\n4 7 2\\n1 10 3\\n8 9 1\\n\",\n    \"2 1\\n1 2 1\\n\",\n    \"3 1\\n1 2 2\\n\",\n    \"3 1\\n1 3 2\\n\",\n    \"100 1\\n1 100 99\\n\",\n    \"100 1\\n1 100 100\\n\",\n    \"100 1\\n1 100 98\\n\",\n    \"100 2\\n1 100 49\\n1 99 49\\n\",\n    \"10 2\\n3 7 4\\n6 10 1\\n\",\n    \"10 4\\n2 5 1\\n1 4 2\\n4 7 1\\n7 10 2\\n\",\n    \"20 5\\n6 16 3\\n4 14 4\\n3 13 1\\n1 11 1\\n10 20 4\\n\",\n    \"30 7\\n1 4 1\\n22 25 1\\n25 28 2\\n9 12 1\\n13 16 1\\n11 14 1\\n14 17 1\\n\",\n    \"50 14\\n42 44 2\\n38 40 1\\n6 8 2\\n37 39 1\\n33 35 1\\n17 19 2\\n12 14 2\\n2 4 1\\n9 11 2\\n1 3 1\\n32 34 1\\n24 26 1\\n44 46 1\\n48 50 1\\n\",\n    \"50 7\\n45 50 4\\n26 31 5\\n35 40 3\\n38 43 1\\n39 44 3\\n3 8 2\\n1 6 1\\n\",\n    \"50 15\\n41 46 5\\n35 40 5\\n27 32 3\\n10 15 2\\n1 6 3\\n20 25 1\\n11 16 1\\n9 14 1\\n13 18 2\\n18 23 3\\n2 7 2\\n25 30 1\\n29 34 1\\n43 48 1\\n45 50 1\\n\",\n    \"90 30\\n1 5 1\\n57 61 3\\n13 17 1\\n60 64 1\\n73 77 2\\n5 9 2\\n16 20 3\\n29 33 4\\n83 87 3\\n63 67 2\\n35 39 4\\n18 22 1\\n42 46 4\\n46 50 2\\n48 52 2\\n23 27 1\\n82 86 1\\n77 81 3\\n67 71 2\\n22 26 2\\n37 41 1\\n6 10 1\\n50 54 1\\n8 12 1\\n86 90 1\\n68 72 1\\n11 15 1\\n72 76 1\\n62 66 1\\n52 56 1\\n\",\n    \"100 38\\n41 43 1\\n53 55 2\\n91 93 2\\n47 49 2\\n77 79 2\\n5 7 2\\n2 4 2\\n28 30 1\\n79 81 1\\n42 44 1\\n27 29 1\\n95 97 2\\n58 60 1\\n57 59 1\\n61 63 2\\n33 35 2\\n22 24 1\\n44 46 1\\n10 12 2\\n13 15 1\\n97 99 1\\n37 39 2\\n18 20 1\\n50 52 2\\n21 23 1\\n68 70 2\\n83 85 1\\n71 73 2\\n65 67 1\\n64 66 1\\n15 17 1\\n7 9 1\\n88 90 2\\n30 32 1\\n74 76 1\\n24 26 1\\n85 87 1\\n82 84 1\\n\",\n    \"100 43\\n76 77 1\\n24 25 1\\n2 3 1\\n85 86 1\\n49 50 1\\n15 16 1\\n30 31 1\\n78 79 1\\n54 55 1\\n58 59 1\\n17 18 1\\n67 68 1\\n21 22 1\\n80 81 1\\n35 36 1\\n8 9 1\\n83 84 1\\n44 45 1\\n62 63 1\\n64 65 1\\n72 73 1\\n27 28 1\\n56 57 1\\n12 13 1\\n40 41 1\\n32 33 1\\n52 53 1\\n70 71 1\\n97 98 1\\n37 38 1\\n87 88 1\\n46 47 1\\n89 90 1\\n4 5 1\\n94 95 1\\n60 61 1\\n99 100 1\\n10 11 1\\n74 75 1\\n6 7 1\\n91 92 1\\n19 20 1\\n42 43 1\\n\",\n    \"100 35\\n52 55 1\\n55 58 1\\n69 72 1\\n32 35 1\\n9 12 3\\n68 71 1\\n78 81 3\\n51 54 1\\n56 59 1\\n63 66 3\\n4 7 2\\n12 15 2\\n74 77 1\\n87 90 3\\n72 75 1\\n93 96 2\\n39 42 2\\n15 18 1\\n92 95 1\\n23 26 3\\n83 86 2\\n28 31 2\\n58 61 1\\n47 50 1\\n46 49 2\\n31 34 1\\n82 85 1\\n96 99 2\\n38 41 1\\n41 44 1\\n5 8 1\\n34 37 1\\n19 22 3\\n27 30 1\\n67 70 1\\n\",\n    \"100 4\\n73 83 4\\n79 89 8\\n12 22 6\\n23 33 9\\n\",\n    \"100 2\\n39 43 1\\n82 86 3\\n\",\n    \"100 36\\n2 5 2\\n35 38 1\\n55 58 2\\n40 43 3\\n73 76 2\\n30 33 3\\n87 90 3\\n93 96 1\\n97 100 1\\n42 45 1\\n44 47 1\\n66 69 3\\n95 98 1\\n12 15 3\\n47 50 1\\n72 75 1\\n57 60 2\\n1 4 1\\n8 11 3\\n15 18 1\\n22 25 2\\n76 79 2\\n82 85 1\\n91 94 2\\n83 86 2\\n33 36 1\\n62 65 3\\n26 29 3\\n18 21 1\\n36 39 1\\n68 71 1\\n50 53 1\\n51 54 1\\n4 7 1\\n17 20 1\\n78 81 1\\n\",\n    \"100 37\\n49 51 2\\n79 81 2\\n46 48 2\\n71 73 2\\n31 33 2\\n42 44 1\\n17 19 2\\n64 66 2\\n24 26 1\\n8 10 2\\n38 40 1\\n1 3 2\\n75 77 2\\n52 54 2\\n11 13 2\\n87 89 1\\n98 100 2\\n60 62 1\\n56 58 2\\n39 41 1\\n92 94 1\\n13 15 1\\n67 69 2\\n4 6 2\\n19 21 1\\n91 93 1\\n86 88 1\\n43 45 1\\n25 27 1\\n94 96 1\\n81 83 1\\n35 37 1\\n34 36 1\\n61 63 1\\n21 23 1\\n83 85 1\\n27 29 1\\n\",\n    \"50 16\\n42 44 2\\n18 20 2\\n10 12 1\\n9 11 2\\n25 27 1\\n45 47 1\\n12 14 1\\n29 31 2\\n4 6 1\\n46 48 1\\n32 34 2\\n34 36 1\\n48 50 1\\n21 23 1\\n15 17 2\\n24 26 1\\n\",\n    \"90 29\\n1 5 1\\n56 60 2\\n31 35 4\\n86 90 2\\n25 29 4\\n58 62 2\\n73 77 2\\n12 16 2\\n65 69 1\\n16 20 3\\n42 46 4\\n62 66 2\\n2 6 2\\n77 81 1\\n80 84 1\\n48 52 4\\n81 85 2\\n68 72 1\\n57 61 1\\n75 79 1\\n35 39 2\\n37 41 1\\n18 22 1\\n4 8 2\\n67 71 1\\n85 89 1\\n20 24 1\\n10 14 2\\n51 55 2\\n\",\n    \"100 6\\n3 43 40\\n46 86 24\\n38 78 5\\n51 91 8\\n59 99 12\\n60 100 2\\n\",\n    \"100 36\\n2 5 2\\n35 38 1\\n55 58 2\\n40 43 3\\n73 76 2\\n30 33 3\\n87 90 3\\n93 96 1\\n97 100 1\\n42 45 1\\n44 47 1\\n66 69 3\\n95 98 1\\n12 15 3\\n47 50 1\\n72 75 1\\n57 60 2\\n1 4 1\\n8 11 3\\n15 18 1\\n22 25 2\\n76 79 2\\n82 85 1\\n91 94 2\\n83 86 2\\n33 36 1\\n62 65 3\\n26 29 3\\n18 21 1\\n36 39 1\\n68 71 1\\n50 53 2\\n51 54 1\\n4 7 1\\n17 20 1\\n78 81 1\\n\",\n    \"100 37\\n49 51 2\\n79 81 2\\n46 48 2\\n71 73 2\\n31 33 3\\n42 44 1\\n17 19 2\\n64 66 2\\n24 26 1\\n8 10 2\\n38 40 1\\n1 3 2\\n75 77 2\\n52 54 2\\n11 13 2\\n87 89 1\\n98 100 2\\n60 62 1\\n56 58 2\\n39 41 1\\n92 94 1\\n13 15 1\\n67 69 2\\n4 6 2\\n19 21 1\\n91 93 1\\n86 88 1\\n43 45 1\\n25 27 1\\n94 96 1\\n81 83 1\\n35 37 1\\n34 36 1\\n61 63 1\\n21 23 1\\n83 85 1\\n27 29 1\\n\",\n    \"90 30\\n1 5 1\\n57 61 3\\n13 17 1\\n60 64 1\\n73 77 2\\n5 9 2\\n16 20 3\\n29 33 5\\n83 87 3\\n63 67 2\\n35 39 4\\n18 22 1\\n42 46 4\\n46 50 2\\n48 52 2\\n23 27 1\\n82 86 1\\n77 81 3\\n67 71 2\\n22 26 2\\n37 41 1\\n6 10 1\\n50 54 1\\n8 12 1\\n86 90 1\\n68 72 1\\n11 15 1\\n72 76 1\\n62 66 1\\n52 56 1\\n\",\n    \"100 38\\n41 43 1\\n53 55 2\\n91 93 2\\n47 49 2\\n77 79 2\\n5 7 2\\n2 4 2\\n28 30 1\\n79 81 1\\n42 44 1\\n27 29 1\\n95 97 2\\n58 60 1\\n57 59 1\\n61 63 2\\n33 35 2\\n22 24 1\\n44 46 1\\n10 12 2\\n13 15 1\\n97 99 1\\n37 39 3\\n18 20 1\\n50 52 2\\n21 23 1\\n68 70 2\\n83 85 1\\n71 73 2\\n65 67 1\\n64 66 1\\n15 17 1\\n7 9 1\\n88 90 2\\n30 32 1\\n74 76 1\\n24 26 1\\n85 87 1\\n82 84 1\\n\",\n    \"100 43\\n76 77 1\\n24 25 1\\n2 3 1\\n85 86 1\\n49 50 1\\n15 16 1\\n30 31 1\\n78 79 2\\n54 55 1\\n58 59 1\\n17 18 1\\n67 68 1\\n21 22 1\\n80 81 1\\n35 36 1\\n8 9 1\\n83 84 1\\n44 45 1\\n62 63 1\\n64 65 1\\n72 73 1\\n27 28 1\\n56 57 1\\n12 13 1\\n40 41 1\\n32 33 1\\n52 53 1\\n70 71 1\\n97 98 1\\n37 38 1\\n87 88 1\\n46 47 1\\n89 90 1\\n4 5 1\\n94 95 1\\n60 61 1\\n99 100 1\\n10 11 1\\n74 75 1\\n6 7 1\\n91 92 1\\n19 20 1\\n42 43 1\\n\",\n    \"100 35\\n52 55 1\\n55 58 1\\n69 72 1\\n32 35 1\\n9 12 3\\n68 71 1\\n78 81 3\\n51 54 1\\n56 59 1\\n63 66 3\\n4 7 2\\n12 15 2\\n74 77 1\\n87 90 3\\n72 75 1\\n93 96 2\\n39 42 2\\n15 18 1\\n92 95 1\\n23 26 4\\n83 86 2\\n28 31 2\\n58 61 1\\n47 50 1\\n46 49 2\\n31 34 1\\n82 85 1\\n96 99 2\\n38 41 1\\n41 44 1\\n5 8 1\\n34 37 1\\n19 22 3\\n27 30 1\\n67 70 1\\n\",\n    \"97 22\\n10 17 6\\n24 31 6\\n79 86 7\\n60 67 6\\n42 49 5\\n67 74 5\\n34 41 4\\n70 77 3\\n51 58 5\\n82 89 2\\n89 96 5\\n14 21 2\\n40 47 1\\n1 8 2\\n23 30 1\\n59 66 1\\n50 57 2\\n26 33 1\\n15 22 2\\n90 97 1\\n32 39 1\\n2 9 4\\n\",\n    \"12 11\\n1 2 1\\n2 3 2\\n3 4 3\\n4 5 4\\n5 6 5\\n6 7 6\\n7 8 7\\n8 9 8\\n9 10 9\\n10 11 10\\n11 12 1\\n\",\n    \"6 2\\n1 6 3\\n1 2 1\\n\",\n    \"88 1\\n1 2 1\\n\",\n    \"4 2\\n1 4 1\\n1 2 1\\n\",\n    \"100 2\\n1 100 30\\n1 20 1\\n\",\n    \"88 1\\n1 3 1\\n\",\n    \"6 2\\n1 5 2\\n2 3 1\\n\",\n    \"7 2\\n1 7 3\\n2 3 1\\n\",\n    \"8 2\\n3 8 2\\n4 5 1\\n\",\n    \"10 2\\n1 10 7\\n2 3 1\\n\",\n    \"5 2\\n1 5 2\\n2 3 1\\n\",\n    \"10 2\\n1 10 5\\n2 3 1\\n\",\n    \"10 2\\n1 10 4\\n2 4 2\\n\",\n    \"10 2\\n1 10 6\\n3 7 1\\n\",\n    \"10 3\\n4 8 2\\n1 10 3\\n5 6 1\\n\",\n    \"20 5\\n4 14 4\\n3 13 1\\n1 11 1\\n10 20 4\\n6 16 3\\n\",\n    \"73 2\\n33 35 2\\n12 63 44\\n\",\n    \"86 5\\n66 74 1\\n29 33 3\\n13 78 38\\n20 34 2\\n72 85 1\\n\",\n    \"9 4\\n3 7 1\\n6 9 1\\n2 3 1\\n1 8 2\\n\",\n    \"10 2\\n1 10 5\\n2 4 1\\n\",\n    \"10 4\\n1 10 2\\n1 4 2\\n2 5 1\\n7 8 1\\n\",\n    \"10 2\\n1 10 7\\n3 7 1\\n\",\n    \"96 37\\n9 43 23\\n60 66 4\\n7 15 1\\n3 86 4\\n30 65 14\\n36 38 1\\n28 36 8\\n68 80 4\\n7 22 5\\n17 68 1\\n7 18 1\\n12 47 2\\n4 6 2\\n5 11 3\\n41 55 10\\n7 45 22\\n6 67 16\\n12 50 18\\n64 70 2\\n21 48 26\\n2 17 6\\n14 44 10\\n63 84 18\\n14 19 5\\n34 92 56\\n51 56 2\\n13 20 5\\n62 74 2\\n1 3 1\\n6 46 17\\n58 62 4\\n10 27 16\\n13 37 16\\n21 23 1\\n48 69 13\\n67 82 13\\n17 51 18\\n\",\n    \"31 3\\n2 3 1\\n1 12 4\\n13 15 1\\n\",\n    \"7 2\\n2 6 4\\n3 4 1\\n\",\n    \"20 2\\n3 4 1\\n2 7 3\\n\",\n    \"100 5\\n15 53 23\\n16 85 32\\n59 93 3\\n54 57 1\\n13 40 11\\n\",\n    \"100 5\\n24 57 8\\n28 72 15\\n20 75 49\\n27 67 7\\n68 100 21\\n\",\n    \"11 2\\n1 11 5\\n4 8 4\\n\",\n    \"29 5\\n5 10 3\\n15 22 2\\n18 27 4\\n16 20 4\\n7 11 1\\n\",\n    \"28 4\\n4 23 11\\n11 12 1\\n2 4 1\\n16 24 1\\n\",\n    \"90 8\\n7 10 2\\n27 28 1\\n18 20 2\\n12 48 2\\n37 84 27\\n29 32 2\\n37 73 16\\n3 40 14\\n\",\n    \"61 2\\n12 41 24\\n20 29 2\\n\",\n    \"27 8\\n7 22 2\\n3 5 1\\n24 26 1\\n1 14 1\\n4 23 8\\n10 12 1\\n16 18 1\\n5 6 1\\n\",\n    \"88 8\\n1 5 2\\n29 50 7\\n36 42 6\\n72 81 2\\n12 19 4\\n65 73 2\\n15 80 29\\n4 43 16\\n\",\n    \"34 17\\n1 2 1\\n6 12 4\\n22 23 1\\n5 6 1\\n8 30 9\\n2 7 2\\n22 26 3\\n3 34 31\\n1 19 9\\n4 11 7\\n2 5 1\\n4 9 3\\n8 14 4\\n2 22 14\\n3 8 5\\n32 33 1\\n18 31 10\\n\",\n    \"9 2\\n3 7 2\\n1 9 5\\n\",\n    \"85 6\\n4 63 17\\n1 47 2\\n25 26 1\\n1 8 1\\n24 78 44\\n39 79 4\\n\",\n    \"85 5\\n3 44 9\\n77 85 7\\n3 27 8\\n5 42 4\\n4 7 1\\n\",\n    \"50 5\\n7 23 7\\n4 12 4\\n7 46 14\\n15 32 8\\n16 24 2\\n\",\n    \"6 3\\n1 5 1\\n1 6 1\\n1 2 1\\n\",\n    \"100 3\\n17 21 3\\n1 66 38\\n8 22 2\\n\"\n  ],\n  \"outputs\": [\n    \"1 2 3 0 3 \\n\",\n    \"-1\\n\",\n    \"2 2 2 1 1 0 4 3 4 4 \\n\",\n    \"1 2 \\n\",\n    \"-1\\n\",\n    \"1 1 2 \\n\",\n    \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \\n\",\n    \"-1\\n\",\n    \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 \\n\",\n    \"2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 \\n\",\n    \"0 0 1 1 1 1 3 2 0 3 \\n\",\n    \"2 2 1 5 5 3 5 4 4 5 \\n\",\n    \"4 0 3 2 2 2 2 1 1 1 6 5 6 6 5 6 5 5 0 6 \\n\",\n    \"1 0 0 8 0 0 0 0 4 0 6 8 5 8 7 8 8 0 0 0 0 2 0 0 8 3 3 8 0 0 \\n\",\n    \"10 8 15 15 0 3 3 15 9 9 15 7 7 15 0 0 6 6 15 0 0 0 0 12 0 15 0 0 0 0 0 11 5 15 15 0 4 2 15 15 0 1 1 15 13 15 0 14 0 15 \\n\",\n    \"7 0 6 6 0 8 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 8 0 0 0 3 3 3 4 5 8 5 5 8 8 1 1 1 1 0 8 \\n\",\n    \"5 5 5 11 11 16 16 0 8 4 4 7 9 16 16 16 9 16 10 10 10 6 16 0 16 12 3 3 3 16 13 16 0 16 2 2 2 2 2 16 1 1 1 1 1 16 14 16 15 16 \\n\",\n    \"1 0 0 0 31 6 6 22 31 31 24 31 27 3 31 7 31 7 7 31 12 31 20 20 16 31 31 0 8 8 8 8 31 0 11 11 11 11 31 21 31 13 13 13 13 31 14 14 15 31 15 31 23 31 30 31 2 2 2 4 31 29 10 31 10 31 31 19 19 26 31 31 28 5 5 31 31 18 18 18 31 17 9 9 9 31 31 25 0 31 \\n\",\n    \"0 7 7 39 6 6 39 32 39 19 19 39 20 0 39 31 39 23 0 39 25 17 39 39 36 39 11 8 39 39 34 39 16 16 39 0 22 22 39 0 1 10 39 39 18 39 4 4 39 24 24 39 2 2 39 0 14 13 39 39 15 15 39 30 29 39 39 26 26 39 28 28 39 35 0 39 5 5 39 9 39 38 27 39 39 37 39 33 33 39 3 3 39 0 12 12 39 21 39 0 \\n\",\n    \"0 3 44 34 44 40 44 16 44 38 44 24 44 0 6 44 11 44 42 44 13 44 0 2 44 0 22 44 0 7 44 26 44 0 15 44 30 44 0 25 44 43 44 18 44 32 44 0 5 44 0 27 44 9 44 23 44 10 44 36 44 19 44 20 44 0 12 44 0 28 44 21 44 39 44 1 44 8 44 14 44 0 17 44 4 44 31 44 33 44 41 44 0 35 44 0 29 44 37 44 \\n\",\n    \"0 0 0 11 11 31 36 36 5 5 5 36 12 12 36 18 0 36 33 33 33 36 20 20 20 36 34 22 22 36 36 26 4 36 36 32 36 29 17 17 36 36 30 36 0 25 25 24 36 36 8 1 0 36 36 2 9 36 36 23 36 0 10 10 10 36 35 6 3 36 36 36 15 13 36 0 36 7 7 7 36 27 21 21 36 36 14 14 14 36 0 19 16 16 36 36 28 28 36 0 \\n\",\n    \"0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 0 0 0 0 5 4 4 4 4 4 4 4 4 4 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 2 2 2 2 5 2 2 2 2 0 5 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"18 1 1 37 37 34 37 19 19 19 37 14 14 14 37 20 35 37 29 37 37 21 21 0 37 28 28 28 37 6 6 6 37 26 2 37 30 37 37 4 4 4 37 10 37 11 37 15 0 37 32 33 37 37 3 3 17 37 17 37 0 27 27 27 37 12 12 12 37 31 37 16 5 5 37 37 22 22 37 36 37 23 25 25 37 37 7 7 7 37 24 24 8 37 13 37 9 37 0 37 \\n\",\n    \"12 12 38 24 24 38 0 10 10 38 15 15 38 22 38 0 7 7 38 25 38 35 38 9 29 38 38 37 38 0 5 5 38 33 32 38 38 11 20 38 38 6 28 38 38 3 3 38 1 1 38 14 14 38 0 19 19 38 0 18 34 38 38 8 8 38 23 23 38 0 4 4 38 0 13 13 38 0 2 2 38 31 38 36 38 27 16 38 38 0 26 21 38 38 30 38 0 17 17 38 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 7 4 4 4 5 5 5 5 7 5 5 5 5 7 5 5 5 5 6 6 0 7 7 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"14 14 22 22 22 22 0 23 23 1 1 1 1 1 1 12 23 12 19 19 23 23 15 2 2 2 2 2 2 23 23 18 23 21 7 7 7 7 23 13 23 5 5 5 5 5 23 0 23 17 17 9 9 9 9 9 23 23 16 4 4 4 4 4 4 23 23 6 6 6 6 6 8 23 8 8 23 0 3 3 3 3 3 3 3 23 10 10 23 11 11 11 11 11 20 23 23 \\n\",\n    \"-1\\n\",\n    \"2 3 1 1 1 3 \\n\",\n    \"1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"2 3 1 3 \\n\",\n    \"2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 \\n\",\n    \"1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"1 2 3 1 3 0 \\n\",\n    \"1 2 3 1 1 0 3 \\n\",\n    \"0 0 1 2 3 1 0 3 \\n\",\n    \"1 2 3 1 1 1 1 1 1 3 \\n\",\n    \"1 2 3 1 3 \\n\",\n    \"1 2 3 1 1 1 1 0 0 3 \\n\",\n    \"1 2 2 3 1 1 1 0 0 3 \\n\",\n    \"1 1 2 1 1 1 3 1 0 3 \\n\",\n    \"2 2 2 1 3 4 1 4 0 4 \\n\",\n    \"3 0 2 1 1 1 1 5 5 5 6 4 6 6 4 6 4 4 0 6 \\n\",\n    \"0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 4 4 3 3 3 3 3 3 3 2 2 2 3 6 6 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 1 0 0 0 0 0 5 0 6 0 0 0 6 0 0 0 0 0 0 6 0 \\n\",\n    \"4 3 5 1 4 2 5 5 5 \\n\",\n    \"1 2 1 3 1 1 1 0 0 3 \\n\",\n    \"2 2 3 5 5 1 4 5 1 5 \\n\",\n    \"1 1 2 1 1 1 3 1 1 3 \\n\",\n    \"-1\\n\",\n    \"2 1 4 2 2 2 0 0 0 0 0 4 3 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"-1\\n\",\n    \"0 2 1 3 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"0 0 0 0 0 0 0 0 0 0 0 0 5 5 5 5 5 5 5 5 5 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 2 2 2 2 2 6 4 2 2 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 6 3 0 0 0 0 0 0 6 0 0 0 0 0 0 0 \\n\",\n    \"-1\\n\",\n    \"1 1 1 2 2 2 2 3 1 1 3 \\n\",\n    \"0 0 0 0 1 1 1 5 0 6 6 0 0 0 2 4 4 4 4 6 2 6 3 3 3 3 6 0 0 \\n\",\n    \"0 3 0 5 1 1 1 1 1 1 2 5 1 1 1 1 1 4 0 0 0 0 5 5 0 0 0 0 \\n\",\n    \"0 0 8 8 8 8 1 1 8 9 8 8 8 8 8 8 8 3 3 9 8 8 4 4 0 0 2 9 6 6 0 9 0 0 0 0 7 7 7 9 7 7 7 7 7 7 7 9 7 7 7 7 7 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 9 5 5 5 5 5 5 5 5 5 0 9 0 0 0 0 0 0 \\n\",\n    \"0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\",\n    \"-1\\n\",\n    \"1 1 0 8 9 8 8 8 8 8 8 5 5 5 5 8 8 8 9 8 8 8 8 8 8 7 7 7 2 2 2 2 2 2 2 3 3 3 3 3 3 9 9 7 7 7 7 7 7 9 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6 6 7 7 7 7 7 7 9 4 4 0 0 0 0 9 9 0 0 0 0 0 0 0 \\n\",\n    \"-1\\n\",\n    \"2 2 1 1 2 2 3 2 3 \\n\",\n    \"4 2 2 1 1 1 1 7 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 5 3 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 6 6 6 6 0 0 7 7 0 0 0 0 0 0 \\n\",\n    \"0 0 3 5 3 3 6 3 3 3 3 3 4 4 4 4 1 1 1 1 1 1 1 1 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 0 6 \\n\",\n    \"0 0 0 2 2 2 2 1 1 1 1 6 1 1 1 5 5 4 4 4 4 4 6 6 4 4 4 3 3 3 3 6 3 3 3 3 3 3 3 3 3 3 0 0 0 6 0 0 0 0 \\n\",\n    \"3 4 1 2 4 4 \\n\",\n    \"2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 1 1 1 2 4 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/978/G", "starter_code": ""}
{"id": 4015, "question": "Polycarp plays \"Game 23\". Initially he has a number $n$ and his goal is to transform it to $m$. In one move, he can multiply $n$ by $2$ or multiply $n$ by $3$. He can perform any number of moves.\n\nPrint the number of moves needed to transform $n$ to $m$. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform $n$ to $m$ contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 5\\cdot10^8$).\n\n\n-----Output-----\n\nPrint the number of moves to transform $n$ to $m$, or -1 if there is no solution.\n\n\n-----Examples-----\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.", "solutions": "[\"n, m = map(int, input().split())\\nif m % n == 0:\\n    k = m // n\\n    res = 0\\n    while k % 2 == 0:\\n        k //= 2\\n        res += 1\\n    while k % 3 == 0:\\n        k //= 3\\n        res += 1\\n    if k > 1:\\n        print(-1)\\n    else:\\n        print(res)\\nelse:\\n    print(-1)\", \"n, m = map(int, input().split())\\nif m % n:\\n    print(-1)\\n    return\\nm //= n\\na = 0\\nwhile m % 2 == 0:\\n    m//=2\\n    a+=1\\nwhile m % 3 == 0:\\n    m//=3\\n    a+=1\\nif m==1:\\n    print(a)\\nelse:\\n    print(-1)\", \"def func(a,b):\\n  if b%a!=0:\\n    return -1\\n  else:\\n    store=b//a\\n    count=0\\n    while store%2==0:\\n      store//=2\\n      count+=1\\n    while store%3==0:\\n      store//=3\\n      count+=1\\n    if store==1:\\n      return count\\n    else:\\n      return -1\\ndef main():\\n  arr=input().split()\\n  print(func(int(arr[0]),int(arr[1])))\\nmain()\\n\", \"n, m = list(map(int, input().split()))\\nif m % n != 0:\\n    print(-1)\\nelse:\\n    x = m // n\\n    ans = 0\\n    while x % 2 == 0:\\n        ans += 1\\n        x //= 2\\n    while x % 3 == 0:\\n        ans += 1\\n        x //= 3\\n    if x != 1:\\n        print(-1)\\n    else:\\n        print(ans)\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\n\\nisdebug = False\\ntry :\\n    #raise ModuleNotFoundError\\n    import pylint\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\n    isdebug = True\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\ndef red_inout():\\n    inId = 0\\n    outId = 0\\n    if not isdebug:\\n        inId = 0\\n        outId = 0\\n    if inId>0:\\n        dprint('use input', inId)\\n        try:\\n            f = open('input'+ str(inId) + '.txt', 'r')\\n            sys.stdin = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid input file')\\n    if outId>0:\\n        dprint('use output', outId)\\n        try:\\n            f = open('stdout'+ str(outId) + '.txt', 'w')\\n            sys.stdout = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid output file')\\n            \\n        atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n\\nif isdebug and len(sys.argv) == 1:\\n    red_inout()\\n\\ndef getIntList():\\n    return list(map(int, input().split()))            \\n\\ndef solve(): \\n    pass\\n    \\nT_ = 1    \\n#T_, = getIntList()\\n\\nfor iii_ in range(T_):\\n    #solve()\\n    N, M  = getIntList()\\n    r = 0\\n    if M%N!=0:\\n        print(-1)\\n        break\\n    a = M//N\\n    while a%2==0:\\n        r+=1\\n        a//=2\\n    while a%3==0:\\n        r+=1\\n        a//=3\\n    if a!=1:\\n        print(-1)\\n    else:\\n        print(r)\\n\\n\", \"N,M=list(map(int,input().split()))\\nd = M/N\\nif not d.is_integer():\\n    print(-1)\\nelse:\\n    d = int(d)\\n    n = 0\\n    while d and d%2==0:\\n        n += 1\\n        d >>= 1\\n    while d and d%3==0:\\n        n += 1\\n        d //= 3\\n    if d == 1:\\n        print(n)\\n    else:\\n        print(-1)\\n\", \"from math import sqrt\\n\\n\\ndef factor(n):\\n    potentional_p = 3\\n    itog_list = []\\n    while n % 2 == 0:\\n        n = n // 2\\n        itog_list.append(2)\\n    while n - 1:\\n        if potentional_p > sqrt(n):\\n            itog_list.append(n)\\n            return itog_list\\n        while n % potentional_p == 0:\\n            n = n // potentional_p\\n            itog_list.append(potentional_p)\\n        potentional_p += 2\\n    return itog_list\\n\\n\\nn, m = map(int, input().split())\\nif m % n != 0:\\n    print(-1)\\n    return\\nz = m // n\\nF = factor(z)\\nif F == []:\\n    print(0)\\n    return\\nif (len(set(F)) == 2 and 2 in F and 3 in F) or (len(set(F)) == 1 and (2 in F or 3 in F)):\\\\\\n    print(len(F))\\nelse:\\n    print(-1)\", \"n, m = (list(map(int, input().split())))\\nif m % n != 0:\\n  print(-1)\\nelse:\\n  m //= n\\n  t = 0\\n  while m % 2 == 0:\\n    m //= 2\\n    t += 1\\n  while m % 3 == 0:\\n    t += 1\\n    m //= 3\\n  print(t if m == 1 else -1)\\n\", \"import sys\\nn, m = list(map(int,input().split()))\\nif (m%n):\\n\\tprint(-1)\\n\\treturn\\nu = m//n;\\ncnt = 0;\\nwhile (u % 2 == 0):\\n\\tu //=2\\n\\tcnt += 1\\nwhile (u % 3 == 0):\\n\\tu //=3\\n\\tcnt += 1\\nprint(cnt if u == 1 else -1)\\n\", \"n, m = list(map(int, input().split()))\\n\\nif m % n > 0:\\n    print(-1)\\nelse:\\n    res = 0\\n    a = m // n;\\n    while a % 2 == 0:\\n        a //= 2\\n        res += 1\\n    while a % 3 == 0:\\n        a //= 3\\n        res += 1\\n    if a == 1:\\n        print(res)\\n    else:\\n        print(-1)\\n\", \"def fact(k):\\n    a, b = 0, 0\\n    while k % 2 == 0:\\n        k //= 2\\n        a += 1\\n    while k % 3 == 0:\\n        k //= 3\\n        b += 1\\n    if k != 1:\\n        return -1\\n    return a + b\\n\\n\\nn, m = list(map(int, input().split()))\\nif n > m or m / n != m // n:\\n    print(-1)\\nelif n == m:\\n    print(0)\\nelse:\\n    print(fact(m // n))\\n\", \"n, m = map(int, input().split())\\n\\ntotal = 0\\n\\nif m%n!=0:\\n\\tprint(-1)\\n\\treturn\\n\\nv = m//n\\n\\nwhile v%2==0:\\n\\ttotal += 1\\n\\tv //= 2\\nwhile v%3==0:\\n\\ttotal += 1\\n\\tv //= 3\\nif v!=1:\\n\\tprint(-1)\\n\\treturn\\nprint(total)\", \"def mp():\\n    return map(int, input().split())\\n\\nn, m = mp()\\nif m % n != 0:\\n    print(-1)\\nelse:\\n    c = 0\\n    k = m // n\\n    while k % 2 == 0:\\n        k //= 2\\n        c += 1\\n    while k % 3 == 0:\\n        k //= 3\\n        c += 1\\n    if k == 1:\\n        print(c)\\n    else:\\n        print(-1)\", \"n,m = list(map(int,input().split()))\\nnum = m / n\\nflag = 1\\nans = 0\\nwhile num > 1:\\n    if num % 2 == 0:\\n        num //= 2\\n        ans += 1\\n        continue\\n    if num % 3 == 0:\\n        num //= 3\\n        ans += 1\\n        continue\\n    flag = 0\\n    break\\nif flag:\\n    print(ans)\\nelse:\\n    print(-1)\\n\", \"n, m = map(int, input().split())\\nx = m // n\\nif n * x < m:\\n    print(-1)\\nelse:\\n    k = 0\\n    while x % 3 == 0:\\n        x = x//3\\n        k += 1\\n    while x % 2 == 0:\\n        x = x // 2\\n        k += 1\\n    if x != 1:\\n        print(-1)\\n    else:\\n        print(k)\", \"ii = lambda: int(input())\\nmi = lambda: map(int, input().split())\\nli = lambda: list(mi())\\n\\nn, m = mi()\\nif m % n == 0:\\n    d = m // n\\n    c2 = c3 = 0\\n    while d % 2 == 0:\\n        c2 += 1\\n        d //= 2\\n    while d % 3 == 0:\\n        c3 += 1\\n        d //= 3\\n    print(c2 + c3 if d == 1 else -1)\\nelse:\\n    print(-1)\", \"n, m = list(map(int, input().split()))\\nres, d = -1, 0\\nif m % n == 0:\\n    res = 0\\n    d = m // n\\n    while d % 2 == 0:\\n        d, res = d//2, res + 1\\n    while d % 3 == 0:\\n        d, res = d//3, res + 1\\nif d == 1:\\n    print(res)\\nelse:\\n    print(-1)\\n\", \"a, b = list(map(int, input().split()))\\nc = b % a == 0\\nif c:\\n    z = 0\\n    x = b // a\\n    while x % 2 == 0:\\n        x //= 2\\n        z += 1\\n    while x % 3 == 0:\\n        x //= 3\\n        z += 1\\n    if x == 1:\\n        print(z)\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\\n\", \"import sys\\nn,m=list(map(int,input().split()))\\n\\nif m/n!=m//n:\\n    print(-1)\\n    return\\n\\nx=m//n\\nANS=0\\n\\nwhile x%2==0:\\n    x=x//2\\n    ANS+=1\\n\\nwhile x%3==0:\\n    x=x//3\\n    ANS+=1\\n\\nif x==1:\\n    print(ANS)\\nelse:\\n    print(-1)\\n\", \"a,b = list(map(int,input().split()))\\n\\nif b%a == 0:\\n    c = b//a\\n    moves = 0\\n    while c%2 == 0:\\n        c //= 2\\n        moves += 1\\n    while c%3 == 0:\\n        c //= 3\\n        moves += 1\\n    if c == 1:\\n        print(moves)\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\\n\", \"n, m = map(int, input().split())\\n\\nif m % n != 0:\\n    print(-1)\\nelse:\\n    x = m // n\\n    k = 0\\n    while x % 2 == 0:\\n        x //= 2\\n        k += 1\\n    while x % 3 == 0:\\n        x //= 3\\n        k += 1\\n    if x == 1:\\n        print(k)\\n    else:\\n        print(-1)\", \"n,m = map(int, input().strip().split())\\ncan = True\\nif m%n != 0:\\n    can = False\\nk = m/n\\nans = 0\\nwhile k%2 == 0:\\n    k = k/2\\n    ans += 1\\nwhile k%3 == 0:\\n    k = k/3\\n    ans += 1\\nif k != 1:\\n    can = False\\nif can:\\n    print (ans)\\nelse:\\n    print (-1)\", \"n,m=map(int,input().split())\\nans=0\\nif(m%n==0):\\n         m//=n\\nelse:\\n         m=1\\n         ans=-1\\nwhile(m!=1):\\n         if(m%2==0):\\n                  m//=2\\n                  ans+=1\\n         elif(m%3==0):\\n                  m//=3\\n                  ans+=1\\n         else:\\n                  ans=-1\\n                  break\\nprint(ans)\", \"n, m = map(int,input().split())\\nd = m // n\\nans = 0\\np = 1\\nwhile d % 3 == 0:\\n    ans += 1\\n    d //= 3\\n    p *= 3\\nwhile d % 2 == 0:\\n    ans += 1\\n    d //= 2\\n    p *= 2\\nif d != 1 or p*n != m:\\n    print(-1)\\nelse:\\n    print(ans)\", \"n,m=map(int,input().split())\\nif m%n!=0:\\n    print(-1)\\nelse:\\n    m//=n\\n    ans=0\\n    while m%2==0:\\n        m//=2\\n        ans+=1\\n    while m%3==0:\\n        m//=3\\n        ans+=1\\n    if m>1:\\n        print(-1)\\n    else:\\n        print(ans)\"]", "input_output": "{\n  \"inputs\": [\n    \"120 51840\\n\",\n    \"42 42\\n\",\n    \"48 72\\n\",\n    \"1 1\\n\",\n    \"1 2\\n\",\n    \"1 4\\n\",\n    \"1 5\\n\",\n    \"1 6\\n\",\n    \"3024 94058496\\n\",\n    \"1953125 500000000\\n\",\n    \"139999978 419999934\\n\",\n    \"1 223092870\\n\",\n    \"2 5\\n\",\n    \"289777775 341477104\\n\",\n    \"12 26\\n\",\n    \"4 9\\n\",\n    \"5 11\\n\",\n    \"3 83\\n\",\n    \"40 123\\n\",\n    \"3 10\\n\",\n    \"64 243\\n\",\n    \"2 7\\n\",\n    \"1 2048\\n\",\n    \"2 9\\n\",\n    \"120 51841\\n\",\n    \"1 512\\n\",\n    \"7 15\\n\",\n    \"10001 10001\\n\",\n    \"300000007 300000007\\n\",\n    \"5 7\\n\",\n    \"1001 1001\\n\",\n    \"120 1081\\n\",\n    \"2 19\\n\",\n    \"101 101\\n\",\n    \"1111 2223\\n\",\n    \"201 201\\n\",\n    \"202 202\\n\",\n    \"203 203\\n\",\n    \"303 303\\n\",\n    \"403 403\\n\",\n    \"23 97\\n\",\n    \"404 404\\n\",\n    \"405 405\\n\",\n    \"505 505\\n\",\n    \"3 9\\n\",\n    \"2 6\\n\",\n    \"11 67\\n\",\n    \"1234 2469\\n\",\n    \"1000 1000\\n\",\n    \"6 20\\n\",\n    \"9 24\\n\",\n    \"18782 37565\\n\",\n    \"1 22\\n\",\n    \"10 61\\n\",\n    \"1000 2001\\n\",\n    \"100000000 100000001\\n\",\n    \"4000 8001\\n\",\n    \"1 499999993\\n\",\n    \"1 50331648\\n\",\n    \"3 13\\n\",\n    \"10 24\\n\",\n    \"2 22\\n\",\n    \"6 29\\n\",\n    \"1 7\\n\",\n    \"6 21\\n\",\n    \"50 64800\\n\",\n    \"5 16\\n\",\n    \"2 18\\n\",\n    \"1 491280007\\n\",\n    \"4 16\\n\",\n    \"2 13\\n\",\n    \"1 262144\\n\",\n    \"1 16777216\\n\",\n    \"405691171 405691171\\n\",\n    \"5 12\\n\",\n    \"1 500000000\\n\",\n    \"1 362797056\\n\"\n  ],\n  \"outputs\": [\n    \"7\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"12\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"11\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"9\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"25\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"8\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"18\\n\",\n    \"24\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"22\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1141/A", "starter_code": ""}
{"id": 4016, "question": "You are given a string $t$ consisting of $n$ lowercase Latin letters and an integer number $k$.\n\nLet's define a substring of some string $s$ with indices from $l$ to $r$ as $s[l \\dots r]$.\n\nYour task is to construct such string $s$ of minimum possible length that there are exactly $k$ positions $i$ such that $s[i \\dots i + n - 1] = t$. In other words, your task is to construct such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\n\nIt is guaranteed that the answer is always unique.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 50$) \u2014 the length of the string $t$ and the number of substrings.\n\nThe second line of the input contains the string $t$ consisting of exactly $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\n\nIt is guaranteed that the answer is always unique.\n\n\n-----Examples-----\nInput\n3 4\naba\n\nOutput\nababababa\n\nInput\n3 2\ncat\n\nOutput\ncatcat", "solutions": "[\"'''input\\n3 4\\naba\\n'''\\nn, k = map(int, input().split())\\nt = input()\\nfor i in range(1, n):\\n\\tif t[i:] == t[:n-i]:\\n\\t\\tprint(t[:i] * k + t[i:])\\n\\t\\tbreak\\nelse:\\n\\tprint(t * k)\", \"n, k = map(int, input().split())\\nt = input()\\n\\ndouble = 0\\nfor i in range(1, n):\\n\\tif t[-i:] == t[:i]:\\n\\t\\tdouble = i\\n\\nprint(t + t[double:] * (k - 1))\", \"n, k = list(map(int,input().split()))\\ns = input()\\ni = 1\\nwhile i < len(s) and s[i:] != s[:n-i]:\\n    i += 1\\nt = s[:i]*k + s[i:]\\nprint(t)\\n\", \"n, k = map(int, input().split())\\ns = input()\\np = [0] * len(s)\\n\\nfor i in range(1, len(s)):\\n    p[i] = p[i - 1]\\n    while p[i] > 0 and s[p[i]] != s[i]:\\n        p[i] = p[p[i] - 1]\\n    if s[p[i]] == s[i]:\\n        p[i] += 1\\n\\nprint(s, end = '')\\nfor i in range(1, k):\\n    for j in range(p[-1], len(s)):\\n        print(s[j], end='')\\nprint()\\n\", \"n, k = map(int, input().split())\\ns = input()\\nmax_pref = 0\\n\\nfor i in range(1, n):\\n  if s[:i] == s[-i:]:\\n    max_pref = i\\n\\nans = s\\nfor i in range(k - 1):\\n  ans += s[max_pref:]\\n\\nprint(ans)\", \"n, k = list(map(int, input().split()))\\nt = input()\\n\\na = -1\\nfor i in range(1, n + 1):\\n    if t.startswith(t[i:]):\\n        a = i\\n        break\\n\\npre = t[:a]\\nans = pre * (k - 1) + t\\n\\nprint(ans)\\n\", \"n, k = list(map(int, input().strip().split()))\\nst = [i for i in input()]\\n\\np = n\\nfor i in range(1, n):\\n    if st[i:] == st[:n - i]:\\n        p = i\\n        break\\n\\nprint(''.join(st) + (''.join(st[n - p:])) * (k - 1))\\n\", \"n,m=list(map(int,input().split()))\\ns=input()\\nx=0\\nfor i in range(1,n):\\n    if s[i::]==s[0:n-i]:\\n        x=n-i\\n        break\\nans=s+s[x::]*(m-1)\\nprint(ans)\\n\", \"\\n\\ninp1 = input().split()\\nn = int(inp1[0])\\nk = int(inp1[1])\\n\\ns = input()\\n\\ndef isGood(l):\\n    if(l==0):\\n        return True\\n    s1 = s[0:l]\\n    s2 = s[n-l:n]\\n    return s1==s2\\n\\nmaxMatch = 0\\n\\nfor i in range(n-1,0,-1):\\n    if isGood(i):\\n        maxMatch = i\\n        break\\n\\nans = \\\"\\\"\\nfor i in range(k):\\n    if(i==0):\\n        ans+=s\\n    else:\\n        ans+=s[maxMatch:n]\\n\\nprint(ans)\\n\", \"s=input().split()\\nn=int(s[0])\\nk=int(s[1])\\ns=input()\\nif n==1:\\n    print(s*k)\\nelif k==1:\\n    print(s)\\nelse:\\n    flag=True\\n    for i in range(1,n):\\n        if s[:-i]==s[i:]:\\n            print(s+s[-i:]*(k-1))\\n            flag=False\\n            break\\n    if flag:\\n        print(s*k)\\n\", \"n,k=map(int,input().split())\\nt=input()\\nfor i in range(n-1):\\n    if t[i+1:n]==t[0:n-i-1]:\\n        print(t+(k-1)*t[n-i-1:n])\\n        break\\nelse:\\n    print(k*t)\", \"n, k = list(map(int, input().split()))\\nt = input()\\na = 0\\nfor i in range(1, n):\\n    if t[i:] == t[:-i]:\\n        a = i\\n        break\\n\\nif not a:\\n    print(t * k)\\nelse:\\n    print(t + t[n-a:]*(k-1))\\n\", \"n,k=list(map(int,input().split()))\\nt=input()\\n\\nfor i in range(n-1,-1,-1):\\n    if t[:i]==t[n-i:]:\\n        #print(t[:i],t[n-i:])\\n        break\\n\\n\\nx=t[i:]\\n\\nfor j in range(k-1):\\n    t=t+x\\n\\n#print(i)\\nprint(t)\\n\", \"n, k = list(map(int,input().split()))\\ns = input()\\n\\nres = n\\nfor i in range(1, n):\\n    if s.startswith(s[i:]):\\n        res = i\\n        break\\noverlap = n - res\\n\\nprint(s + (k-1) * s[overlap:])\", \"n, k = list(map(int, input().split()))\\nt = list(input())\\nfor i in range(1, n + 1):\\n    if t[i:] == t[:n - i]:\\n        s = t[:i] * k\\n        s += t[i:]\\n        break\\nprint(''.join(s))\\n\", \"\\nn, k = list(map(int, input().split()))\\nstring = input()\\n\\nres = None\\nfor i in range(1, n):\\n    if string.startswith(string[i:]):\\n        res = string[:i] * k + string[i:]\\n        break\\n\\nif not res:\\n    print(string * k)\\nelse:\\n    print(res)\\n\\n\", \"n, k = map(int, input().split())\\nt = input()\\nP = [0] * n\\nfor i in range(1, n):\\n    j = P[i - 1]\\n    while t[j] != t[i] and j > 0:\\n        j = P[j - 1]\\n    if t[i] == t[j]:\\n        j += 1\\n    P[i] = j\\n\\nans = t[:(n - P[n - 1])] * k\\nif P[n - 1] > 0:\\n    ans += t[(n - P[n - 1]):]\\nprint(ans)\", \"n,m=map(int,input().strip().split())\\nr=input()\\nans=\\\"\\\"\\nans1=\\\"\\\"\\nfor i in range(n-1):\\n    if r[:i+1]==r[n-1-i:]:\\n        ans=r[:i+1]\\nj=len(ans)\\nans1=r+(m-1)*r[j:]\\nprint(ans1)\", \"from collections import defaultdict,deque\\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\\nsys.setrecursionlimit(10**8)\\nINF = float('inf')\\nmod = 10**9+7\\neps = 10**-7\\ndef inpl(): return list(map(int, input().split()))\\ndef inpl_s(): return list(input().split())\\n\\nn,k = inpl()\\nS = input()\\n\\nfor i in reversed(list(range(n))):\\n\\tif S[:i] == S[n-i:]:\\n\\t\\tbreak\\n\\nans = S\\nfor _ in range(k-1):\\n\\tans += S[i:]\\n\\nprint(ans)\\n\", \"3\\n\\nn, k = [int(x) for x in input().split()]\\n\\nt = input()\\nmax_prefix = ''\\n\\nfor i in range(1, len(t)):\\n    l = t[-i:]\\n    # print(str(i) + \\\" : \\\" + l)\\n    if(t.startswith(l)):\\n        max_prefix = l\\n\\n# print(\\\"Max prefix :- \\\" + max_prefix)\\n\\ns = ''\\n\\nif len(max_prefix) == 0:\\n    for i in range(k):\\n        s = s + t\\nelse:\\n    p = t[:n-len(max_prefix)]\\n    for i in range(k-1):\\n        s = s + p\\n    s = s + t\\n\\nprint(s)\\n\", \"n, k = map(int, input().split())\\ns = input()\\nx = n\\nfor i in range(1, n):\\n\\n    if s[:n - i] == s[i:]:\\n        x = i\\n        break\\nans = s\\nfor i in range(k - 1):\\n    ans += s[n - x:]\\nprint(ans)\", \"\\nN, K = list(map(int, input().split()))\\nT = input()\\n\\ndef findAns(N, T):\\n    for i in range(N-1):\\n        if T[i+1:] == T[:N-1-i]:\\n            return T[N-1-i:]\\n    return T\\n\\nans = findAns(N, T)\\n\\nprint(T + ans*(K-1))\\n    \\n\", \"n, k = map(int, input().split())\\nt = input()\\ncycle = n\\nfor i in range(1, n):\\n    if t[i:] == t[:n - i]:\\n        cycle = i\\n        break\\nans = t[:cycle] * k + t[cycle:]\\nprint(ans)\", \"def counter(s, t): ## O(n**2) potentially oops\\n\\n    how_many = 0\\n\\n    for i in range(0, len(s)-len(t)+1):\\n\\n        ## print(i, i+len(t))\\n\\n        if s[i:i+len(t)] == t:\\n            how_many += 1\\n\\n    return how_many\\n\\nwhile True:\\n    \\n    inp = input().split()\\n\\n    n = int(inp[0])\\n    k = int(inp[1])\\n\\n    s = input()\\n\\n    returning = s\\n\\n    for i in range(1, n+1):\\n        if counter(returning+s[-i:], s) > counter(returning, s): ## (returning + s[-i:]).count(s) > returning.count(s):\\n            addition = s[-i:]\\n            break\\n\\n    returning = s + (k-1)*addition\\n\\n##    while counter(returning, s) < k: ## returning.count(s) < n:\\n##\\n##        for i in range(1, n+1):\\n##\\n##            if counter(returning+s[-i:], s) > counter(returning, s): ## (returning + s[-i:]).count(s) > returning.count(s):\\n##\\n##                returning += s[-i:]\\n##                break\\n\\n    print(returning)\\n\\n    break\\n\", \"n, k = map(int, input().split())\\nt = input()\\ni = n - 1\\nwhile i > 0 and t[:i] != t[-i:]:\\n    i -= 1\\nans = t\\nfor g in range(k - 1):\\n    ans += t[-n+i:]\\nprint(ans)\"]", "input_output": "{\"inputs\": [\"3 4\\naba\\n\", \"3 2\\ncat\\n\", \"1 1\\na\\n\", \"1 50\\nq\\n\", \"20 3\\nsfrpmsfrpmsfrpmsfrpm\\n\", \"47 1\\njjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\\n\", \"25 24\\nkyzdckyzdckyzdckyzdckyzdc\\n\", \"4 25\\nlclc\\n\", \"5 34\\nabcab\\n\", \"8 3\\nabcaabca\\n\", \"4 4\\naaaa\\n\", \"9 2\\ncccababbc\\n\", \"3 6\\naaa\\n\", \"3 5\\naaa\\n\", \"24 20\\nbaacaabccacbcbccccbbcabb\\n\", \"6 2\\nabcaba\\n\", \"6 3\\naabbaa\\n\", \"6 3\\nabaaba\\n\", \"3 4\\naaa\\n\", \"4 3\\nabaa\\n\", \"8 2\\ncaacdcaa\\n\", \"6 3\\nabcaba\\n\", \"8 4\\ncababbcc\\n\", \"4 2\\nabac\\n\", \"4 2\\nabaa\\n\", \"11 2\\naaabaacdaaa\\n\", \"7 2\\nabcabca\\n\", \"18 9\\naabaabcbbabaaccbac\\n\", \"9 2\\nababbaaba\\n\", \"5 4\\naabaa\\n\", \"4 5\\nadaa\\n\", \"19 22\\ncabacbbbaabccabaaca\\n\", \"2 4\\naa\\n\", \"5 2\\nzxxzz\\n\", \"2 2\\noo\\n\", \"10 2\\nababaababa\\n\", \"2 2\\naa\\n\", \"6 2\\nabbaba\\n\", \"11 2\\ncaaacddcaaa\\n\", \"4 2\\nabba\\n\", \"5 3\\naaaba\\n\", \"4 3\\naaaa\\n\", \"5 2\\nabaca\\n\", \"5 4\\naaaaa\\n\", \"4 2\\nxxxb\\n\", \"4 5\\nabaa\\n\", \"5 3\\naaaaa\\n\", \"7 2\\nabcabcc\\n\", \"8 4\\nbabbabab\\n\", \"4 2\\naaab\\n\", \"3 1\\naab\\n\", \"3 2\\naab\\n\", \"7 4\\naaaabba\\n\", \"9 2\\naabaaaaba\\n\", \"4 2\\naaba\\n\", \"3 2\\nabb\\n\", \"3 2\\naaa\\n\", \"9 2\\nbaabbaabb\\n\", \"9 4\\nbbaaabbab\\n\", \"11 3\\nabracadabra\\n\", \"2 1\\naa\\n\", \"6 4\\ncccacc\\n\", \"6 12\\nhmkkhh\\n\", \"3 1\\nabb\\n\", \"2 2\\nab\\n\", \"15 27\\nzteltxyxqqwgztz\\n\", \"9 3\\naaaabcaaa\\n\", \"3 1\\naba\\n\", \"4 2\\naabb\\n\", \"9 2\\nbabbabbab\\n\", \"5 3\\nbbcbb\\n\", \"3 3\\naaa\\n\", \"4 2\\nakaa\\n\", \"5 2\\naaaba\\n\", \"5 5\\nabbab\\n\"], \"outputs\": [\"ababababa\\n\", \"catcat\\n\", \"a\\n\", \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\\n\", \"sfrpmsfrpmsfrpmsfrpmsfrpmsfrpm\\n\", \"jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\\n\", \"kyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdc\\n\", \"lclclclclclclclclclclclclclclclclclclclclclclclclclc\\n\", \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab\\n\", \"abcaabcaabcaabca\\n\", \"aaaaaaa\\n\", \"cccababbcccababbc\\n\", \"aaaaaaaa\\n\", \"aaaaaaa\\n\", \"baacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabb\\n\", \"abcababcaba\\n\", \"aabbaabbaabbaa\\n\", \"abaabaabaaba\\n\", \"aaaaaa\\n\", \"abaabaabaa\\n\", \"caacdcaacdcaa\\n\", \"abcababcababcaba\\n\", \"cababbccababbccababbccababbcc\\n\", \"abacabac\\n\", \"abaabaa\\n\", \"aaabaacdaaabaacdaaa\\n\", \"abcabcabca\\n\", \"aabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbac\\n\", \"ababbaababbaaba\\n\", \"aabaabaabaabaa\\n\", \"adaadaadaadaadaa\\n\", \"cabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaaca\\n\", \"aaaaa\\n\", \"zxxzzxxzz\\n\", \"ooo\\n\", \"ababaababaababa\\n\", \"aaa\\n\", \"abbababbaba\\n\", \"caaacddcaaacddcaaa\\n\", \"abbabba\\n\", \"aaabaaabaaaba\\n\", \"aaaaaa\\n\", \"abacabaca\\n\", \"aaaaaaaa\\n\", \"xxxbxxxb\\n\", \"abaabaabaabaabaa\\n\", \"aaaaaaa\\n\", \"abcabccabcabcc\\n\", \"babbababbababbababbabab\\n\", \"aaabaaab\\n\", \"aab\\n\", \"aabaab\\n\", \"aaaabbaaaabbaaaabbaaaabba\\n\", \"aabaaaabaaaaba\\n\", \"aabaaba\\n\", \"abbabb\\n\", \"aaaa\\n\", \"baabbaabbaabb\\n\", \"bbaaabbabbaaabbabbaaabbabbaaabbab\\n\", \"abracadabracadabracadabra\\n\", \"aa\\n\", \"cccacccacccacccacc\\n\", \"hmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhh\\n\", \"abb\\n\", \"abab\\n\", \"zteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztz\\n\", \"aaaabcaaaabcaaaabcaaa\\n\", \"aba\\n\", \"aabbaabb\\n\", \"babbabbabbab\\n\", \"bbcbbcbbcbb\\n\", \"aaaaa\\n\", \"akaakaa\\n\", \"aaabaaaba\\n\", \"abbabbabbabbabbab\\n\"]}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1029/A", "starter_code": ""}
{"id": 4017, "question": "Let's call an array good if there is an element in the array that equals to the sum of all other elements. For example, the array $a=[1, 3, 3, 7]$ is good because there is the element $a_4=7$ which equals to the sum $1 + 3 + 3$.\n\nYou are given an array $a$ consisting of $n$ integers. Your task is to print all indices $j$ of this array such that after removing the $j$-th element from the array it will be good (let's call such indices nice).\n\nFor example, if $a=[8, 3, 5, 2]$, the nice indices are $1$ and $4$:   if you remove $a_1$, the array will look like $[3, 5, 2]$ and it is good;  if you remove $a_4$, the array will look like $[8, 3, 5]$ and it is good. \n\nYou have to consider all removals independently, i. e. remove the element, check if the resulting array is good, and return the element into the array.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nIn the first line print one integer $k$ \u2014 the number of indices $j$ of the array $a$ such that after removing the $j$-th element from the array it will be good (i.e. print the number of the nice indices).\n\nIn the second line print $k$ distinct integers $j_1, j_2, \\dots, j_k$ in any order \u2014 nice indices of the array $a$.\n\nIf there are no such indices in the array $a$, just print $0$ in the first line and leave the second line empty or do not print it at all.\n\n\n-----Examples-----\nInput\n5\n2 5 1 2 2\n\nOutput\n3\n4 1 5\nInput\n4\n8 3 5 2\n\nOutput\n2\n1 4 \n\nInput\n5\n2 1 2 4 3\n\nOutput\n0\n\n\n\n\n-----Note-----\n\nIn the first example you can remove any element with the value $2$ so the array will look like $[5, 1, 2, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 1 + 2 + 2$).\n\nIn the second example you can remove $8$ so the array will look like $[3, 5, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 3 + 2$). You can also remove $2$ so the array will look like $[8, 3, 5]$. The sum of this array is $16$ and there is an element equals to the sum of remaining elements ($8 = 3 + 5$).\n\nIn the third example you cannot make the given array good by removing exactly one element.", "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\nc = [ 0 for i in range(1000001) ]\\ns = sum(a)\\nans = []\\nfor i in a: c[i] += 1\\nfor i in range(n):\\n    s -= a[i]\\n    c[a[i]] -= 1\\n    if s % 2 == 0 and s // 2 <= 1000000 and c[s // 2] > 0:\\n        ans.append(i)\\n    s += a[i]\\n    c[a[i]] += 1\\nprint(len(ans))\\nfor i in ans:\\n    print(i + 1, end=' ')\\n\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, = getIntList()\\n#print(N)\\n\\nza = getIntList()\\n\\nss = sum(za)\\n\\ncc = collections.Counter(za)\\n\\nre = []\\nfor i in range(N):\\n    if (ss- za[i])%2==1: continue\\n    t = (ss-za[i])//2\\n    g = 1\\n    if t== za[i]:\\n        g+=1\\n    if cc[t]>=g:\\n        re.append(str(i+1))\\nprint(len(re))\\nprint(' '.join(re))\\n    \\n\\n\\n\\n\\n\\n\", \"n = int(input())\\na = [int(e) for e in input().split()]\\nans = []\\nsm = 0\\nst = dict()\\nfor i in a:\\n    st[i * 2] = st.get(i * 2, 0) + 1\\n    sm += i\\nfor i, j in enumerate(a):\\n    t = sm - j\\n    if t == 2 * j and st.get(t, 0) <= 1:\\n        continue\\n    if st.get(t, 0) > 0:\\n        ans.append(i + 1)\\nprint(len(ans))\\nprint(' '.join(str(e) for e in ans))\\n\", \"# your code goes here\\nn = int(input())\\n\\na = list(map(int,input().split()))\\n\\nsort_a = sorted(a)\\n\\nmax_fi = sort_a[-1]\\nmax_se = sort_a[-2]\\n\\nsum_a = sum(a)\\nans = 0\\nans_a = []\\nfor i in range(0,n):\\n\\tif a[i] != max_fi:\\n\\t\\tif sum_a - max_fi - a[i] == max_fi:\\n\\t\\t\\tans += 1\\n\\t\\t\\tans_a.append(i+1)\\n\\telse:\\n\\t\\tif sum_a - max_se - a[i] == max_se:\\n\\t\\t\\tans += 1\\n\\t\\t\\tans_a.append(i+1)\\n\\nprint(ans)\\nif ans > 0:\\n\\tprint(' '.join([str(n) for n in ans_a]))\", \"n = int(input())\\nl = list(map(int,input().split()))\\nr = []\\ns = 0\\nfor i in range(n):\\n\\ts+=l[i]\\nm = {}\\nfor i in range(1000001):\\n    m[i] = 0\\nfor i in range(n):\\n\\tm[l[i]] +=1\\nfor i in range(n):\\n    cur = s-l[i]\\t\\n    if cur//2 > 1e6:\\n        continue\\n    if cur%2==0:\\n        if cur//2==l[i]:\\n            if(m[cur//2]>=2):\\n                r.append(i)\\n        else:\\n            if(m[cur//2]>0):\\n                r.append(i)\\nprint(len(r))\\nfor i in r:\\n    print(i+1, end=' ')\", \"from operator import itemgetter\\n#int(input())\\n#map(int,input().split())\\n#[list(map(int,input().split())) for i in range(q)]\\n#print(\\\"YES\\\" * ans + \\\"NO\\\" * (1-ans))\\nn =  int(input())\\nai = list(map(int,input().split()))\\nai2 = [[ai[i],i+1] for i in range(n)]\\nai2.sort(key = itemgetter(0))\\nans = []\\nindex = n-1\\nindex2 = 0\\nnum = sum(ai)\\nwhile index2 < n and index > -1:\\n    temp = (num - ai2[index2][0]) / 2\\n    while index > -1 and temp < ai2[index][0]:\\n        index-= 1\\n    \\n    if temp == ai2[index][0]:\\n        if index == index2:\\n            if temp == ai2[index-1][0]:\\n                ans += [ai2[index2][1]]\\n        else:\\n            ans += [ai2[index2][1]]\\n    index2 += 1\\nprint(len(ans))\\nfor i in ans:\\n    print(i,end=\\\" \\\")\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\ns = sum(l)\\nmax1, max2 = sorted(l, reverse=True)[:2]\\n\\npretty_indexes = []\\nfor i, ll in enumerate(l, start=1):\\n    if (s - ll) == 2 * (max1 if ll != max1 else max2):\\n        pretty_indexes.append(str(i))\\nprint(len(pretty_indexes))\\nprint(\\\" \\\".join(pretty_indexes))\\n\", \"gcd = lambda a, b: gcd(b, a % b) if b else a\\n\\n\\ndef main():\\n    n = int(input())\\n    arr = list(map(int, input().split()))\\n    summ = sum(arr)\\n    ind=[]\\n    fm, sm = arr[0], -1\\n    ind_fm = 0\\n    for i in range(len(arr)):\\n        if arr[i] > fm:\\n            fm = arr[i]\\n            ind_fm = i\\n    for i in range(len(arr)):\\n        if arr[i] > sm and i != ind_fm:\\n            sm = arr[i]\\n    for i in range(len(arr)):\\n        if i != ind_fm and summ - arr[i] - fm == fm:\\n            ind.append(i + 1)\\n        if i == ind_fm and summ - arr[i] - sm == sm:\\n            ind.append(i + 1)\\n\\n    print(len(ind))\\n    print(*ind)\\n\\n\\n\\n\\n\\n\\nmain()\", \"n = int(input())\\na = list(map(int, input().split()))\\ns = sum(a)\\nanswer = []\\nmaxi = max(a)\\nposMax = a.index(maxi)\\nfor i in range(n):\\n    if a[i] == maxi and i == posMax:\\n        tempMax = max(a[:i]+a[i+1:])\\n        if s-a[i]-tempMax == tempMax:\\n            answer.append(i+1)\\n    else:\\n        if s-a[i]-maxi == maxi:\\n            answer.append(i+1)\\nprint(len(answer))\\nprint(*answer)\", \"# -*- coding: utf-8 -*-\\n\\nimport math\\nimport collections\\nimport bisect\\nimport heapq\\nimport time\\nimport itertools\\nimport sys\\n\\n\\\"\\\"\\\"\\ncreated by shhuan at 2018/11/16 22:49\\n\\n\\\"\\\"\\\"\\n\\n\\nN = int(input())\\n\\nA = [int(x) for x in input().split()]\\n\\ntotal = sum(A)\\nvals = collections.Counter(A)\\nmxVal = max(A)\\nans = []\\n\\nif vals[mxVal] > 1:\\n    for i, v in enumerate(A):\\n        rest = total - v\\n        if rest-mxVal == mxVal:\\n            ans.append(i+1)\\nelse:\\n    for i, v in enumerate(A):\\n        rest = total - v\\n        if v == mxVal:\\n            second = max(max(A[:i] or [0]), max(A[i+1:] or [0]))\\n            if rest - second == second:\\n                ans.append(i+1)\\n        else:\\n            if rest - mxVal == mxVal:\\n                ans.append(i+1)\\n\\nif ans:\\n    print(len(ans))\\n    print(' '.join(map(str, ans)))\\nelse:\\n    print(0)\", \"from collections import Counter as C\\nn = int(input())\\nl = [*map(int, input().split())]\\n\\nc = C(l)\\ns = sum(l)\\nres = []\\n\\n# print(c)\\n\\nfor i, e in enumerate(l):\\n\\n    if c.get((s - e)/2, 0) > int((s - e)/2 == e):\\n        res.append(str(i + 1))\\n\\n\\nprint(len(res))\\nprint(' '.join(res))\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nb = sorted(a)\\ns = sum(b[:-1])\\nf = s - b[-1]\\nr = set()\\nif (f > 0 and not(b.count(f) == 1 and b[-1] == f)):\\n    for i in range(n):\\n        if a[i] == f:\\n            r.add(i+1)\\nif sum(b[:-2]) == b[-2]:\\n    for i in range(n):\\n        if a[i] == b[-1]:\\n            r.add(i+1)\\nprint(len(r))\\nr = list(r)\\nprint(\\\" \\\".join(str(i) for i in r))\", \"from collections import Counter\\n\\n_ = input()\\n\\na = list(map(int, input().split()))\\n\\nc = Counter(a)\\n\\ns = sum(a)\\n\\nr = []\\nfor i, e in enumerate(a, 1):\\n    if (s - e) % 2 == 0 and (s - e) / 2 in c and ((s - e) / 2 != e or c[e] > 1):\\n        r.append(i)\\n\\nprint(len(r))\\n\\nif len(r) != 0:\\n    print(*r)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ns = sum(a)\\nans = []\\nma, se = 0, 0\\nfor i in range(n):\\n    if ma < a[i]:\\n        se = ma\\n        ma = a[i]\\n    elif ma == a[i]:\\n        se = a[i]\\n    elif se < a[i]:\\n        se = a[i]\\n\\nfor i in range(n):\\n    s -= a[i]\\n    if a[i] == ma:\\n        if s == se * 2:\\n            ans.append(i + 1)\\n        s += a[i]\\n        continue\\n\\n    if s == ma * 2:\\n        ans.append(i + 1)\\n    s += a[i]\\n\\nprint(len(ans))\\nprint(\\\" \\\".join(map(str, ans)))\", \"n = int(input())\\nA = list(map(int, input().split()))\\ns = sum(A)\\ns1 = s - max(A)\\n\\nA = [(A[i], i + 1) for i in range(n)]\\nA.sort()\\n\\nres = []\\nfor i in range(n - 1):\\n    if s1 - A[i][0] == A[-1][0]:\\n        res.append(A[i][1])\\nif s1 - A[-2][0] == A[-2][0]:\\n    res.append(A[-1][1])\\nprint(len(res))\\nfor i in range(len(res)):\\n    print(res[i], end=' ')\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\n\\nsumma = 0\\nd = dict()\\nans = set()\\n\\nfor i in range(len(A)):\\n    elem = A[i]\\n    summa += elem\\n    \\n    try:\\n        d[elem].add(i)\\n    except:\\n        d[elem] = set()\\n        d[elem].add(i)\\n\\nfor i in range(len(A)):\\n    elem = A[i]\\n    \\n    if summa - elem <= elem:\\n        continue\\n    \\n    x = summa - (elem * 2)\\n    if x in d.keys():\\n        s = d[x]\\n        \\n        for j in s:\\n            if j != i:\\n                ans.add(j)\\n\\nprint(len(ans))\\nif len(ans) != 0:\\n    for i in ans:\\n        print(i + 1, end=' ')\", \"3.5\\n\\nn = int(input())\\nA = [int(s) for s in input().split(\\\" \\\") if s != \\\"\\\"]\\nB = [(x, i) for i, x in enumerate(A)]\\n\\nB.sort()\\n_sum = sum(A)\\nL = []\\n\\nfor i, (x, j) in enumerate(B):\\n    __sum = _sum - x\\n    if i == len(A)-1:\\n        _max = B[-2][0]\\n    else:\\n        _max = B[-1][0]\\n\\n    __sum -= _max\\n\\n    if __sum == _max:\\n        L.append(j+1)\\n\\nprint(len(L))\\n\\nif len(L) != 0:\\n    for i in range(0, len(L)-1):\\n        print(L[i], end=\\\" \\\")\\n\\n    print(L[-1])\\n\", \"import math\\nn=int(input())\\ndef fun(itm):\\n    return itm[0]\\ndef sm(l):\\n    s=0\\n    for i in l:\\n        s+=i[0]\\n    return s\\nl1=list(map(int,input().split()))\\nfor i in range(n):\\n    l1[i]=[l1[i],i]\\nans=[]\\nl=sorted(l1,key=fun)\\ns=sm(l) - l[n-1][0]\\nfor i in range(n-1):\\n    if(s-l[i][0]==l[n-1][0]):\\n        ans.append(l[i][1]+1)\\nif(s-l[n-2][0]==l[n-2][0]):\\n    ans.append(l[n-1][1]+1)\\nprint(len(ans))\\nfor i in ans:\\n    print(i,end=\\\" \\\")\", \"n = int(input())\\na = sorted(((value, i) for i, value in enumerate(map(int, input().split()))), reverse=True)\\n\\nall_sum = sum(value for value, _ in a)\\n\\nresults = []\\nfor i in range(n):\\n    index = 0 if i > 0 else 1\\n    if all_sum - a[i][0] == 2 * a[index][0]:\\n        results.append(a[i][1] + 1)\\n\\nprint(len(results))\\nif results:\\n    print(*results, sep=' ')\\n\", \"import sys\\n\\ninput = sys.stdin.readline\\n\\nn = int(input())\\na = list(map(int, input().split()))\\n\\ncount = {}\\n\\nsum = 0\\nfor i in range(n):\\n    if a[i] not in count.keys():\\n        count[a[i]] = 0\\n    count[a[i]] += 1\\n\\n    sum += a[i]\\n\\nans = []\\n\\nfor i in range(n):\\n    sub = sum - a[i]\\n    if sub % 2 == 1:\\n        continue\\n    sub = int(sub/2)\\n    if sub in count.keys() and sub == a[i]:\\n        if count[sub] > 1:\\n            ans.append(str(i+1))\\n    elif sub in count.keys() and count[sub] >= 1:\\n        ans.append(str(i+1))\\n\\nprint(len(ans))\\nprint(\\\" \\\".join(ans))\", \"\\nfrom  collections import defaultdict\\n\\nn = int(input())\\na = list(map(int, input().split()))\\nmp = defaultdict(list)\\naddition = sum(a)\\nans = []\\nfor i in range(n):\\n    mp[a[i]].append(i)\\nindex = 0\\n# print(mp)\\nfor i in a:\\n    temp = addition\\n    temp -= i\\n    # print(\\\"add \\\",temp )\\n    if temp %2 == 1:\\n        index += 1\\n        continue\\n    temp //= 2\\n    # print(\\\"now temp \\\",temp)\\n\\n    if temp in mp and len(mp[temp]) > 1:\\n\\n        ans.append(index+1)\\n\\n    if i in mp and len(mp[temp]) == 1:\\n        # print(\\\"here\\\")\\n        if mp[temp][0] != index:\\n            ans.append(index+1)\\n            # print(\\\"appended\\\")\\n    index += 1\\nprint(len(ans))\\nif len(ans) == 0:\\n    return\\nans = list(map(str, ans))\\nprint(' '.join(ans))\\n\\n\\n\\n\\n\\n\", \"I=lambda:map(int,input().split())\\nn=int(input())\\na=list(I())\\nc=[]\\nmaxx=0\\nsmax=0\\nfor i in range(n):\\n    if maxx<a[i]:\\n        smax=maxx\\n        maxx=a[i]\\n    elif smax<a[i]:\\n        smax=a[i]\\ns=sum(a)\\nfor i in range(n):\\n    if maxx!=a[i]:\\n        if 2*maxx==(s-a[i]):\\n            c.append(i+1)\\n    else:\\n        if s-a[i]==2*smax:\\n            c.append(i+1)\\nprint(len(c))\\nprint(*c)\", \"import math\\nimport bisect\\nimport itertools\\nimport sys\\nmod=10**9 +7\\n'''fact=[1]*1001\\nifact=[1]*1001\\nfor i in range(1,1001):\\n    fact[i]=((fact[i-1])*i)%mod\\n    ifact[i]=((ifact[i-1])*pow(i,mod-2,mod))%mod\\ndef ncr(n,r):\\n    return (((fact[n]*ifact[n-r])%mod)*ifact[r])%mod\\ndef npr(n,r):\\n    return (((fact[n]*ifact[n-r])%mod))\\n    '''\\n\\n\\ndef mindiff(a):\\n    b=a[:]\\n    b.sort()\\n    m=10000000000\\n    for i in range(len(b)-1):\\n        if b[i+1]-b[i]<m:\\n            m=b[i+1]-b[i]\\n    return m\\n    \\ndef lcm(a,b):\\n    return a*b//math.gcd(a,b)\\n\\n    \\ndef merge(a,b):\\n    i=0;j=0\\n    c=0\\n    ans=[]\\n    while i<len(a) and j<len(b):\\n        if a[i]<b[j]:\\n            ans.append(a[i])\\n            i+=1\\n        else:\\n            ans.append(b[j])\\n            c+=len(a)-i\\n            j+=1\\n    ans+=a[i:]\\n    ans+=b[j:]\\n    return ans,c\\ndef mergesort(a):\\n    if len(a)==1:\\n        return a,0\\n    mid=len(a)//2   \\n    left,left_inversion=mergesort(a[:mid])\\n    right,right_inversion=mergesort(a[mid:])\\n    m,c=merge(left,right)\\n    c+=(left_inversion+right_inversion)\\n    return m,c\\n    \\ndef is_prime(num):\\n    if num == 2: return True\\n    if num == 3: return True\\n    if num%2 == 0: return False\\n    if num%3 == 0: return False\\n    t = 5\\n    a = 2\\n    while t <= int(math.sqrt(num)):\\n        if num%t == 0: return False\\n        t += a\\n        a = 6 - a\\n    return True\\n    \\n  \\ndef ceil(a,b):\\n    if a%b==0:\\n        return a//b\\n    else:\\n        return (a//b + 1)\\n\\ndef binsearch(arr,b,low,high):\\n    if low==high:\\n        return low\\n    if arr[math.ceil((low+high)/2)]<b:\\n        return binsearch(arr,b,low,math.ceil((low+high)/2) -1 )\\n    else:\\n        return binsearch(arr,b,math.ceil((low+high)/2),high)\\ndef ncr1(n,r):\\n    s=1\\n    for i in range(min(n-r,r)):\\n        s*=(n-i)\\n        s%=mod\\n        s*=pow(i+1,mod-2,mod)\\n        s%=mod\\n    return s\\n    \\ndef calc(n,m,r):\\n    s=0\\n    for i in range(0,r+1,2):\\n        s+=ncr1(n,i)*ncr1(m,i)\\n        s%=mod\\n    return s    \\n        \\n        \\n\\n#/////////////////////////////////////////////////////////////////////////////////////////////////\\nn=int(input())\\n\\na=list(map(int,input().split()))\\ns=sum(a)\\nb=[];count=0;c=[]\\nfor i in range(n):\\n    b.append(s-a[i])\\nma=min(a);sm=min(a)\\nfor i in range(n):\\n    if ma<a[i]:\\n        sm=ma\\n        ma=a[i]\\n    elif sm< a[i]:\\n        sm=a[i]\\nfor i in range(n):\\n    if a[i]==ma:\\n        if b[i]/2==sm:\\n            count+=1\\n            c.append(i+1)\\n    else:\\n        #print(b[i])\\n        if b[i]/2==ma:\\n            count+=1\\n            c.append(i+1)\\n#print(b)\\n#print(ma,sm)            \\nif count==0:\\n    print(count);return\\nprint(count)    \\nprint(*c)\\n\\n        \\n    \\n    \", \"def main():\\n    count=int(input())\\n    arr=input().split(\\\" \\\")\\n    store=[]\\n    tot=0\\n    biggest=0\\n    second_biggest=0\\n    index_biggest=0\\n    index_second_biggest=0\\n    for x in range(count):\\n        test=int(arr[x])\\n        store.append(test)\\n        tot+=test\\n        if test>=biggest:\\n            biggest,second_biggest=test,biggest\\n            index_biggest,index_second_biggest=x,index_biggest\\n        elif test>second_biggest:\\n            second_biggest=test\\n            index_second_biggest=x\\n    number=0\\n    string=\\\"\\\"\\n    for x in range(count):\\n        if store[x]==biggest:\\n            if tot-store[x]==2*second_biggest:\\n                number+=1\\n                string+=str(x+1)+\\\" \\\"\\n        else:\\n            if tot-store[x]==2*biggest:\\n                number+=1\\n                string+=str(x+1)+\\\" \\\"\\n    print(number)\\n    print(string)\\nmain()\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"5\\n2 5 1 2 2\\n\",\n    \"4\\n8 3 5 2\\n\",\n    \"5\\n2 1 2 4 3\\n\",\n    \"2\\n4 5\\n\",\n    \"2\\n2 2\\n\",\n    \"3\\n4 4 4\\n\",\n    \"2\\n1 1\\n\",\n    \"3\\n8 1 8\\n\",\n    \"3\\n1 1 1\\n\",\n    \"3\\n5 5 5\\n\",\n    \"4\\n2 2 4 4\\n\",\n    \"5\\n5 5 1 2 2\\n\",\n    \"4\\n2 1000000 1000000 14\\n\",\n    \"3\\n3 3 3\\n\",\n    \"5\\n1 2 2 5 5\\n\",\n    \"3\\n1 2 5\\n\",\n    \"4\\n3 3 2 1\\n\",\n    \"4\\n1 2 3 4\\n\",\n    \"4\\n4 4 2 2\\n\",\n    \"3\\n2 2 2\\n\",\n    \"5\\n1 2 3 4 6\\n\",\n    \"6\\n4 1 1 1 1 4\\n\",\n    \"3\\n1 3 1\\n\",\n    \"4\\n4 4 8 8\\n\",\n    \"4\\n2 2 4 8\\n\",\n    \"5\\n5 5 2 2 1\\n\",\n    \"6\\n4 4 1 1 1 1\\n\",\n    \"2\\n1 5\\n\",\n    \"4\\n8 8 4 4\\n\",\n    \"3\\n5 1 5\\n\",\n    \"5\\n1 9 4 10 4\\n\",\n    \"3\\n4 5 4\\n\",\n    \"3\\n8 8 8\\n\",\n    \"4\\n1 1 2 2\\n\",\n    \"4\\n5 7 7 2\\n\",\n    \"3\\n3 9 12\\n\",\n    \"6\\n1 1 1 5 8 8\\n\",\n    \"5\\n1 1 1 3 3\\n\",\n    \"3\\n1 2 1\\n\",\n    \"4\\n3 3 3 3\\n\",\n    \"5\\n8 8 5 1 2\\n\",\n    \"5\\n1 1 2 4 4\\n\",\n    \"6\\n2 2 2 2 8 8\\n\",\n    \"3\\n2 2 4\\n\",\n    \"3\\n2 3 3\\n\",\n    \"4\\n1 1 2 4\\n\",\n    \"3\\n4 2 2\\n\",\n    \"5\\n1 7 4 12 12\\n\",\n    \"4\\n1 1 1 2\\n\",\n    \"4\\n1 2 3 5\\n\",\n    \"2\\n1 2\\n\",\n    \"6\\n16 4 4 4 4 16\\n\",\n    \"4\\n500000 500000 1000000 1000000\\n\",\n    \"3\\n3 1 3\\n\",\n    \"4\\n2 3 5 10\\n\",\n    \"2\\n5 1\\n\",\n    \"5\\n6 6 1 2 3\\n\",\n    \"4\\n3 2 5 5\\n\",\n    \"5\\n4 6 7 8 18\\n\",\n    \"5\\n7 7 1 3 3\\n\",\n    \"4\\n2 3 1 3\\n\",\n    \"2\\n1000000 1\\n\",\n    \"7\\n5 5 1 1 1 1 1\\n\",\n    \"4\\n2 7 7 5\\n\",\n    \"5\\n5 1 2 3 1\\n\",\n    \"7\\n1 2 3 4 5 6 7\\n\",\n    \"4\\n2 3 5 8\\n\",\n    \"5\\n1 1 1 3 7\\n\",\n    \"3\\n1 2 3\\n\",\n    \"6\\n1 3 5 8 16 33\\n\",\n    \"6\\n4 7 1 1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n1 4 5 \\n\",\n    \"2\\n1 4 \\n\",\n    \"0\\n\\n\",\n    \"0\\n\\n\",\n    \"0\\n\\n\",\n    \"3\\n1 2 3 \\n\",\n    \"0\\n\\n\",\n    \"1\\n2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n3 4 \\n\",\n    \"2\\n1 2 \\n\",\n    \"0\\n\\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n4 5 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n2 4 \\n\",\n    \"2\\n1 2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"1\\n4 \\n\",\n    \"2\\n1 6 \\n\",\n    \"1\\n2 \\n\",\n    \"2\\n3 4 \\n\",\n    \"1\\n4 \\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n1 2 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 2 \\n\",\n    \"1\\n2 \\n\",\n    \"1\\n4 \\n\",\n    \"1\\n2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n3 4 \\n\",\n    \"2\\n2 3 \\n\",\n    \"0\\n\\n\",\n    \"2\\n5 6 \\n\",\n    \"2\\n4 5 \\n\",\n    \"1\\n2 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n4 5 \\n\",\n    \"2\\n5 6 \\n\",\n    \"1\\n3 \\n\",\n    \"1\\n1 \\n\",\n    \"1\\n4 \\n\",\n    \"1\\n1 \\n\",\n    \"2\\n4 5 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n1 4 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 6 \\n\",\n    \"2\\n3 4 \\n\",\n    \"1\\n2 \\n\",\n    \"1\\n4 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n3 4 \\n\",\n    \"1\\n3 \\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n2 4 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n2 3 \\n\",\n    \"1\\n3 \\n\",\n    \"0\\n\\n\",\n    \"2\\n1 4 \\n\",\n    \"1\\n5 \\n\",\n    \"0\\n\\n\",\n    \"0\\n\\n\",\n    \"5\\n2 3 4 5 6 \\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1077/C", "starter_code": ""}
{"id": 4018, "question": "The only difference between the easy and the hard versions is constraints.\n\nA subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \"abaca\" the following strings are subsequences: \"abaca\", \"aba\", \"aaa\", \"a\" and \"\" (empty string). But the following strings are not subsequences: \"aabaca\", \"cb\" and \"bcaa\".\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\n\nYour task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 100, 1 \\le k \\le 10^{12}$) \u2014 the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n\n\n-----Examples-----\nInput\n4 5\nasdf\n\nOutput\n4\n\nInput\n5 6\naaaaa\n\nOutput\n15\n\nInput\n5 7\naaaaa\n\nOutput\n-1\n\nInput\n10 100\najihiushda\n\nOutput\n233\n\n\n\n-----Note-----\n\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.", "solutions": "[\"def sol(a,k):\\n    n=len(a)\\n    if(k==0):return 1\\n    if(k==1):\\n        v=set()\\n        for x in a:\\n            v.add(x)\\n        return len(v)\\n    if(n<k or n<1 or k<1):\\n        return 0\\n    if(n==k):\\n        return 1\\n    sz=max(3000,n)\\n    v1=[0]*sz\\n    v2=[0]*sz\\n    v3=[0]*sz\\n    v2[n-1]=1\\n    v3[a[n-1]-1]=1\\n    for i in range(n-2,-1,-1):\\n        if(i<0):break\\n        v2[i]=v2[i+1]\\n        if(v3[a[i]-1]==0):\\n            v2[i]+=1\\n            v3[a[i]-1]=1\\n    for j in range(1,k):\\n        v3=[0]*sz\\n        v1[n-1]=0\\n        for i in range(n-2,-1,-1):\\n            v1[i]=v1[i+1]\\n            v1[i]=v1[i]+v2[i+1]\\n            v1[i] = v1[i] - v3[a[i] - 1]\\n            v3[a[i] - 1] = v2[i + 1]\\n        v2=v1.copy()\\n    return v1[0]\\nn,k=list(map(int,input().split()))\\ns=input()\\nar=[]\\nfor x in s:\\n    ar.append(ord(x))\\nans=0\\ncur=n\\nwhile cur>=0:\\n    mx=min(k,sol(ar,cur))\\n    k-=mx\\n    ans+=(n-cur)*mx\\n    cur-=1\\nif(k!=0):\\n    print(-1)\\nelse:\\n    print(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,W=list(map(int,input().split()))\\ns=input().strip()\\n\\nNEXTLIST=[[n]*26 for i in range(n+1)]\\n\\nfor i in range(n-1,-1,-1):\\n    for j in range(26):\\n        NEXTLIST[i][j]=NEXTLIST[i+1][j]\\n    NEXTLIST[i][ord(s[i])-97]=i\\n\\nDP=[[0]*(n+1) for i in range(n+1)]\\n\\nDP[0][0]=1\\n\\nfor i in range(n):\\n    for j in range(26):\\n        if NEXTLIST[i][j]!=n:\\n            for k in range(n):\\n                DP[NEXTLIST[i][j]+1][k+1]+=DP[i][k]\\n\\n#print(DP)\\n\\nHLIST=[0]*(n+1)\\n\\nfor i in range(n+1):\\n    for j in range(n+1):\\n        HLIST[j]+=DP[i][j]\\n\\n#print(HLIST)\\n\\nANS=0\\nfor i in range(n,-1,-1):\\n    #print(i,W)\\n    if W>HLIST[i]:\\n        ANS+=(n-i)*HLIST[i]\\n        W-=HLIST[i]\\n    else:\\n        ANS+=W*(n-i)\\n        print(ANS)\\n        return\\n\\nelse:\\n    print(-1)\\n\", \"# @author \\n\\nimport sys\\n\\nclass HSubsequencesHardVersion:\\n    def solve(self):\\n        n, k = [int(_) for _ in input().split()]\\n        s = input()\\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\\n        dp[0][0] = 1\\n        last = {key: -1 for key in (chr(x) for x in range(ord('a'), ord('z') + 1))}\\n        for i in range(1, n + 1):\\n            dp[i][0] = 1\\n            for j in range(1, i + 1):\\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] - (dp[last[s[i - 1]]][j - 1] if last[s[i - 1]] != -1 else 0)\\n            last[s[i - 1]] = i - 1\\n\\n        ans = 0\\n        tot = 0\\n        for sz in range(n, -1, -1):\\n            ans += min(k - tot, dp[n][sz]) * (n - sz)\\n            tot = min(k, tot + dp[n][sz])\\n            if tot == k:\\n                break\\n\\n        if tot >= k:\\n            print(ans)\\n        else:\\n            print(-1)\\n\\nsolver = HSubsequencesHardVersion()\\ninput = sys.stdin.readline\\n\\nsolver.solve()\\n\", \"import sys\\nimport itertools\\n\\ninputs = sys.stdin.read().split()\\nlen_string = int(inputs[0])\\ndesired_size = int(inputs[1])\\nstring = inputs[2]\\n\\ndef val_of_letter(char): return ord(char)-ord(\\\"a\\\")\\n\\nnum_subsequences = [1]\\nnum_subsequences_so_far = [0]*len_string\\nlast_num_subsequences_so_far = [0]*len_string\\nnum_subsequences_for_this_letter_so_far = [0]*26\\n\\nlast_num_subsequences_so_far[len_string-1] = 1;\\nnum_subsequences_for_this_letter_so_far[val_of_letter(string[-1])] = 1;\\n\\nfor i in range(len_string-2, -1, -1):\\n    last_num_subsequences_so_far[i] = \\\\\\n        last_num_subsequences_so_far[i+1]\\n    if num_subsequences_for_this_letter_so_far[val_of_letter(string[i])] == 0:\\n         last_num_subsequences_so_far[i] += 1\\n         num_subsequences_for_this_letter_so_far[val_of_letter(string[i])] = 1\\nnum_subsequences.append(last_num_subsequences_so_far[0])\\n\\nfor length in range(2, len_string+1):\\n    for i in range(26): num_subsequences_for_this_letter_so_far[i] = 0\\n    \\n    num_subsequences_so_far[len_string-1] = 0\\n    for i in range(len_string-2, -1, -1):\\n        num_subsequences_so_far[i] = \\\\\\n            num_subsequences_so_far[i+1] + \\\\\\n            last_num_subsequences_so_far[i+1] - \\\\\\n            num_subsequences_for_this_letter_so_far[val_of_letter(string[i])]\\n        # print(length, i, num_subsequences_so_far[i], num_subsequences_so_far[i+1], last_num_subsequences_so_far[i+1], num_subsequences_for_this_letter_so_far[val_of_letter(string[i])])\\n        num_subsequences_for_this_letter_so_far[val_of_letter(string[i])] = \\\\\\n            last_num_subsequences_so_far[i+1]\\n    # print()\\n    \\n    num_subsequences.append(num_subsequences_so_far[0])\\n    for i in range(len_string):\\n         last_num_subsequences_so_far[i] = num_subsequences_so_far[i]\\n\\n# print(num_subsequences)\\nsize = 0\\ncost = 0\\nfor i in range(len_string, -1, -1):\\n    cur_size = num_subsequences[i]\\n    if size+cur_size >= desired_size:\\n        cost += (desired_size-size)*(len_string-i)\\n        size = desired_size\\n        break\\n    cost += cur_size*(len_string-i)\\n    size += cur_size\\n\\nif size >= desired_size: sys.stdout.write(str(cost)+\\\"\\\\n\\\")\\nelse: sys.stdout.write(\\\"-1\\\\n\\\")\\n\", \"line1 = input().split(' ')\\nn = int(line1[0])\\nk = int(line1[1])\\ns = list(input())\\n\\ndp = [101*[0] for i in range(101)]\\nlast = 26*[-1]\\n\\nfor i in range(n+1):\\n    dp[0][i] = 1\\n\\nfor l in range(1, n+1):\\n    dp[l][0] = 0\\n    for c in range(26):\\n        last[c] = -1\\n    for i in range(1, n+1):\\n        dp[l][i] = dp[l-1][i-1] + dp[l][i-1]\\n        if last[ord(s[i-1])-ord('a')] != -1:\\n            dp[l][i] -= dp[l-1][last[ord(s[i-1])-ord('a')]-1]\\n        last[ord(s[i-1])-ord('a')] = i\\n\\ni = 0\\nres = 0\\nwhile i <= n and k >= 0:\\n    c = min(k, dp[n-i][n])\\n    k -= c\\n    res += c * i\\n    i += 1\\nif k > 0:\\n    print(-1)\\nelse:\\n    print(res)\\n\", \"n, tt = list(map(int, input().split()))\\ns = input()\\n\\ndp = [[0]*(n + 1) for i in range(n+1)]\\n\\nfor c in range(n+1):\\n\\tdp[0][c] = 1\\n\\nlast = [-1]*26\\n\\nfor c in range(1, n + 1):\\n\\tk = ord(s[c-1]) - ord('a')\\n\\tfor r in range(1, n+1):\\n\\t\\tdp[r][c] = dp[r][c-1] + dp[r-1][c-1]\\n\\tif last[k] == -1:\\n\\t\\tlast[k] = c - 1\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tp = last[k]\\n\\t\\tfor r in range(1, n+1):\\n\\t\\t\\tdp[r][c] = dp[r][c] - dp[r-1][p]\\n\\t\\tlast[k] = c-1\\n\\nsu, ans, t = 0, 0, 0\\nfor r in range(n+1):\\n\\tsu = su + dp[r][n]\\nif su < tt:\\n\\tans = -1\\nelse:\\n\\tfor i in range(n, -1, -1):\\n\\t\\tr = min(tt, dp[i][n])\\n\\t\\tans += t*r\\n\\t\\ttt -= r\\n\\t\\tt += 1\\n\\nprint(ans) \\n\", \"[n, k] = [int(i) for i in input().split()]\\ns = input()\\ncntsz = [0 for i in range(105)]\\ndp = [[0 for i in range(105)] for j in range(105)]\\nlst = [0 for i in range(105)]\\nprv = [0 for i in range(26)]\\nn = len(s)\\ns = '%' + s\\nfor i in range(n + 1):\\n  dp[i][0]=1\\nfor i in range(1, n + 1):\\n\\tlst[i] = prv[ord(s[i])-ord('a')]\\n\\tprv[ord(s[i]) - ord('a')] = i\\nfor sz in range(1, n + 1):\\n\\tfor i in range(1, n + 1):\\n\\t\\tdp[i][sz] += dp[i - 1][sz]\\n\\t\\tdp[i][sz] += dp[i - 1][sz - 1]\\n\\t\\tif lst[i] != 0:\\n\\t\\t\\t dp[i][sz] -= dp[lst[i]-1][sz-1]\\nfor sz in range(1, n + 1):\\n\\tfor i in range(1, n + 1):\\n\\t\\tcntsz[sz] += dp[i][sz]\\n\\t\\tcntsz[sz] -= dp[i - 1][sz]\\ncntsz[0] += 1\\ndone = 0\\nans = 0\\nfor i in range(n, -1, -1):\\n    if done + cntsz[i] >= k:\\n       ans += (n - i) * (k - done)\\n       done = k\\n       break\\n    done += cntsz[i]\\n    ans += cntsz[i] * (n - i)\\nif done < k:\\n    print(-1)\\nelse:\\n    print(ans)\", \"n, k = list(map(int, input().split()))\\ns = \\\"$\\\" + input()\\n\\ncnt = [[0]*(n+1) for i in range(n+1)]\\n\\ncnt[0][0] = 1\\n\\nfor l in range(1, n+1):\\n\\tfor i in range(l, n+1):\\n\\t\\tused = [False] * 26\\n\\t\\tfor j in range(i, n+1):\\n\\t\\t\\tx = ord(s[j]) - ord('a')\\n\\t\\t\\tif not used[x]:\\n\\t\\t\\t\\tcnt[l][j] += cnt[l-1][i-1]\\n\\t\\t\\t\\tused[x] = True\\n\\nans = 0\\nfor l in range(n, -1, -1):\\n\\ts = sum(cnt[l])\\n\\tif s < k:\\n\\t\\tans += (n-l) * s\\n\\t\\tk -= s\\n\\telse:\\n\\t\\tans += (n-l) * k\\n\\t\\tk = 0\\n\\t\\tbreak\\n\\nif k > 0: ans = -1\\n\\nprint(ans)\\n\", \"n, k = map(int, input().split())\\ns = \\\"$\\\" + input()\\n\\ncnt = [[0]*(n+1) for i in range(n+1)]\\n\\ncnt[0][0] = 1\\n\\nfor l in range(1, n+1):\\n\\tfor i in range(l, n+1):\\n\\t\\tused = [False] * 26\\n\\t\\tfor j in range(i, n+1):\\n\\t\\t\\tx = ord(s[j]) - ord('a')\\n\\t\\t\\tif not used[x]:\\n\\t\\t\\t\\tcnt[l][j] += cnt[l-1][i-1]\\n\\t\\t\\t\\tused[x] = True\\n\\nans = 0\\nfor l in range(n, -1, -1):\\n\\ts = sum(cnt[l])\\n\\tif s < k:\\n\\t\\tans += (n-l) * s\\n\\t\\tk -= s\\n\\telse:\\n\\t\\tans += (n-l) * k\\n\\t\\tk = 0\\n\\t\\tbreak\\n\\nif k > 0: ans = -1\\n\\nprint(ans)\", \"n, k = list(map(int, input().split(' ')))\\ns = input()\\ndp = [[0] * (n + 1) for _ in range(n + 1)]\\ndp[0][0] = 1\\nfor l in range(0, n):\\n    for i in range(l, n + 1):\\n        used = [False] * 26\\n        for j in range(i + 1, n + 1):\\n            ch = ord(s[j - 1]) - ord('a')\\n            if not used[ch]:\\n                dp[l + 1][j] += dp[l][i]\\n                used[ch] = True\\ntotal = 0\\nfor l in range(n, -1, -1):\\n    sums = sum(dp[l])\\n    if sums >= k:\\n        total += (n - l) * k\\n        k = 0\\n        break\\n    total += (n - l) * sums\\n    k -= sums\\nif k > 0:\\n    total = -1\\nprint(total)\\n\", \"n,k=map(int,input().split())\\ns=input()\\ns=[ord(c)-ord('a') for c in s]\\ndp=[[[0]*26 for i in range(n+1)]for i in range(n)]\\ndp[0][1][s[0]]=1\\nsm=None\\n\\nfor i in range(1,n):\\n    c=s[i]\\n    for cc in range(26):\\n        dp[i][1][cc]=dp[i-1][1][cc]\\n    dp[i][1][c]=1\\n    for j in reversed(range(2,n+1)):\\n        for cc in range(26):\\n            if cc!=c:\\n                dp[i][j][cc]=dp[i-1][j][cc]\\n            else:\\n                tm=0\\n                for t in range(26):\\n                    tm+=dp[i-1][j-1][t]\\n                dp[i][j][cc]=tm\\n# print(dp[-1][-1])\\ndef get(x):\\n    if x==0:\\n        return 1\\n    ans=0\\n    for i in range(26):\\n        ans+=dp[-1][x][i]\\n    return ans\\ncnt=0\\ncost=0\\nfor re in reversed(range(n+1)):\\n    x=get(re)\\n    if x+cnt>=k:\\n        cost+=(n-re)*(k-cnt)\\n        cnt=k\\n        break\\n    else:\\n        cost+=(n-re)*x\\n        cnt+=x\\nif cnt<k:\\n    print(-1)\\nelse:\\n    print(cost)\", \"n,k=map(int,input().split())\\ns=input()\\ns=[ord(c)-ord('a') for c in s]\\ndp=[[[0]*26 for i in range(n+1)]for i in range(n)]\\ndp[0][1][s[0]]=1\\nsm=None\\n\\nfor i in range(1,n):\\n    c=s[i]\\n    for cc in range(26):\\n        dp[i][1][cc]=dp[i-1][1][cc]\\n    dp[i][1][c]=1\\n    for j in reversed(range(2,n+1)):\\n        for cc in range(26):\\n            if cc!=c:\\n                dp[i][j][cc]=dp[i-1][j][cc]\\n            else:\\n                tm=0\\n                for t in range(26):\\n                    tm+=dp[i-1][j-1][t]\\n                dp[i][j][cc]=tm\\n# print(dp[-1][-1])\\ndef get(x):\\n    if x==0:\\n        return 1\\n    ans=0\\n    for i in range(26):\\n        ans+=dp[-1][x][i]\\n    return ans\\ncnt=0\\ncost=0\\nfor re in reversed(range(n+1)):\\n    x=get(re)\\n    if x+cnt>=k:\\n        cost+=(n-re)*(k-cnt)\\n        cnt=k\\n        break\\n    else:\\n        cost+=(n-re)*x\\n        cnt+=x\\nif cnt<k:\\n    print(-1)\\nelse:\\n    print(cost)\", \"n, K = list(map(int, input().split()))\\ns = input()\\nmax_n = 104\\ndp = [[0] * max_n for i in range(max_n)] \\ns = \\\"$\\\" + s;\\nfor i in range(n + 1):\\n  dp[0][i] = 1;\\n\\nfor ln in range(1, n + 1):\\n  for j in range(1, n + 1):\\n    dp[ln][j] = dp[ln][j - 1] + dp[ln - 1][j - 1];\\n    for k in range(j - 1, 0, -1):\\n      if s[k] == s[j]:\\n        dp[ln][j] -= dp[ln - 1][k - 1];\\n        break;\\nans = 0;\\nfor ln in range(n, -1, -1):\\n  cnt = dp[ln][n];\\n  if (cnt < K):\\n    ans += (cnt * (n - ln));\\n    K -= cnt;\\n  else:\\n    ans += (K * (n - ln));\\n    K = 0;\\n    break;\\nif (K != 0):\\n  print(-1)\\nelse:\\n  print(ans)\\n\\n\", \"def super_solve(n, k, s):\\n\\tlast = []\\n\\tfor i in range (0, 256):\\n\\t\\tlast.append(0)\\n\\tdp = []\\n\\tfor i in range (0, 105):\\n\\t\\ttmp = []\\n\\t\\tfor j in range (0, 105):\\n\\t\\t\\ttmp.append(0)\\n\\t\\tdp.append( tmp )\\n\\t\\n\\tnow = []\\n\\tfor i in range (0, 105):\\n\\t\\ttmp = []\\n\\t\\tfor j in range (0, 105):\\n\\t\\t\\ttmp.append(0)\\n\\t\\tnow.append( tmp )\\n\\n\\tdp[0][0] = 1\\n\\tnow[0][0] = 1\\n\\tfor i in range (1, n + 1):\\n\\t\\tc = ord(s[i])\\n\\t\\tfor j in range (0, n + 1):\\n\\t\\t\\tdp[i][j] += dp[i-1][j]\\n\\t\\tfor j in range (1, n + 1):\\n\\t\\t\\tdp[i][j] += dp[i-1][j-1]\\n\\t\\tif last[c] > 0:\\n\\t\\t\\tfor j in range (1, n + 1):\\n\\t\\t\\t\\tdp[i][j] -= dp[ last[c] - 1 ][j - 1]\\n\\t\\tfor j in range (0, n + 1):\\n\\t\\t\\tnow[i][j] = dp[i][j] - dp[i-1][j]\\n\\t\\tlast[c] = i\\n\\n\\n\\n\\tcost = 0\\n\\tbaki = k\\n\\tj = n\\n\\twhile( j >= 0 ):\\n\\t\\tfor i in range (0, n + 1):\\n\\t\\t\\tcur = now[i][j]\\n\\t\\t\\tmy = min(baki, cur)\\n\\t\\t\\tcost += my * j\\n\\t\\t\\tbaki -= my\\n\\t\\tj -= 1\\n\\n\\tret = k * n - cost\\n\\tif baki > 0:\\n\\t\\tret = -1\\n\\treturn ret\\n\\ndef main():\\n\\tline = input()\\n\\tline = line.split(' ')\\n\\tn = int(line[0])\\n\\tk = int(line[1])\\n\\ttmp = input()\\n\\ts = []\\n\\ts.append(0)\\n\\tfor i in range (0, n):\\n\\t\\ts.append( tmp[i] )\\n\\tret = super_solve(n, k, s)\\n\\tprint (ret)\\n\\n\\ndef __starting_point():\\n  main()\\n__starting_point()\", \"n, d = list(map(int,input().split()))\\ns = input()\\nt = [[-1 for i in range(n + 1)] for j in range(n + 1)]\\nfor i in range(1, n + 1):\\n\\tfor j in range(i, n + 1):\\n\\t\\tif j == i:\\n\\t\\t\\tt[i][j] = 1\\n\\t\\telse:\\n\\t\\t\\tt[i][j] = 0\\njes = [0] * 300\\nfor i in range(1, n + 1):\\n\\tjes[ord(s[i - 1])] = 1\\n\\tt[i][1] = sum(jes)\\nfor j in range(2, n + 1):\\n\\tind = [-1] * 300\\n\\tind[ord(s[j - 1])] = j - 1\\n\\t#obliczamy t[j + 1][j], t[j + 2][j], ...\\n\\tfor i in range(j + 1, n + 1):\\n\\t\\tif ind[ord(s[i - 1])] == -1:\\n\\t\\t\\tt[i][j] = t[i - 1][j] + t[i-1][j-1] \\n\\t\\telse:\\n\\t\\t\\tt[i][j] = t[i - 1][j] + t[i - 1][j - 1] - t[ind[ord(s[i-1])]][j - 1]\\n\\t\\tind[ord(s[i - 1])] = i - 1\\n#t[n][1], t[n][2], ..., t[n][n]\\nrozne = [t[n][i] for i in range(1, n + 1)]\\nrozne.reverse()\\nroz = rozne + [1]\\ndupa = 0\\nwyn = 0\\nfor i in range(n + 1):\\n\\tif dupa < d:\\n\\t\\tk = min(roz[i], (d-dupa))\\n\\t\\tdupa += k\\n\\t\\twyn += k * i\\n\\telse:\\n\\t\\tbreak\\nif dupa >= d:\\n\\tprint(wyn)\\nelse:\\n\\tprint(-1)\\n\", \"n, kk = list(map(int, input().split()))\\ns = '@'+input()\\ndp = [[0] * (n+1) for i in range(n+1)]\\ndp[0][0] = 1\\nfor i in range(1, n+1):\\n    for j in range(i, n+1):\\n        tag = [True]*26\\n        for k in range(j, n+1):\\n            idx = ord(s[k])-ord('a')\\n            if tag[idx]:\\n                dp[i][k] += dp[i-1][j-1]\\n                tag[idx] = False\\nans = 0\\n# print(dp)\\nfor i in range(n, -1, -1):\\n    # print(ans,k,i)\\n    tmp = sum(dp[i])\\n    if kk > tmp:\\n        kk -= tmp\\n        ans += (n-i)*tmp\\n    else:\\n        ans += kk*(n-i)\\n        kk = 0\\n        break\\nif kk > 0:\\n    ans = -1\\nprint(ans)\\n\", \"n,setsize=list(map(int,input().split()))\\ns=input()\\ncount = [[0 for j in range(n+1)] for i in range(n+1)]\\nfor i in range(n):\\n\\tj = i-1\\n\\twhile(j>=0):\\n\\t\\tfor k in range(1,n):\\n\\t\\t\\tcount[i][k+1] += count[j][k]\\n\\t\\tif(s[j]==s[i]):\\n\\t\\t\\tbreak\\n\\t\\tj-=1\\n\\tif(j==-1):\\n\\t\\tcount[i][1]+=1\\n# print(count)\\ncost = 0\\ncount[0][0]=1\\nfor l in range(n,-1,-1):\\n\\tif(setsize==0):\\n\\t\\tbreak\\n\\tct = 0\\n\\tlocalcost = n - l\\n\\tfor i in range(n):\\n\\t\\tct += count[i][l]\\n\\tminct = min(setsize,ct)\\n\\tsetsize-=minct\\n\\t# print(\\\"for k=\\\",setsize,\\\"l=\\\",l,\\\";minct=\\\",minct,\\\";localcost=\\\",localcost)\\n\\tcost += (minct*localcost)\\nif(setsize==0):\\n\\tprint(cost)\\nelse:\\n\\tprint(-1)\", \"from sys import stdout, stdin\\n\\nn, kk = list(map(int, stdin.readline().split()))\\ns = stdin.readline().strip()\\ns += \\\"$\\\"\\nn = n+1\\n\\ndp = [[0 for i in range(n)] for j in range(n)]\\np = 10**15+5\\nfor i in range(n):\\n    dp[i][0] = 1\\nfor end in range(n):\\n    for length in range(1, n):\\n        seen = []\\n        ans = 0\\n        for k in range(end-1, -1, -1):\\n            if s[k] not in seen:\\n                seen.append(s[k])\\n                ans += dp[k][length-1]\\n                ans %= p\\n        dp[end][length] = ans\\n\\ntotals = [dp[n-1][length] for length in range(n)]\\n#print(totals)\\n\\nans = 0\\nidx = n-1\\nwhile idx >= 0 and kk > 0:\\n    ans += min(totals[idx], kk)*(n-1-idx)\\n    kk -= totals[idx]\\n    idx -= 1\\n\\nif kk <= 0:\\n    stdout.write(str(ans) +\\\"\\\\n\\\")\\nelse:\\n    print(-1)\\n\\n\", \"from string import ascii_lowercase\\n\\nn, k = map(int, input().split())\\ns = input()\\n\\ntodo = [1] + ([0] * n)\\ndp = {letter: [0] * (n + 1) for letter in ascii_lowercase}\\nfor letter in s:\\n    prev = dp[letter]\\n    dp[letter] = [0] + todo[:n]\\n    todo = [a - b + c for a, b, c in zip(todo, prev, dp[letter])]\\n\\nanswer = 0\\nfor cost, amt in enumerate(todo[::-1]):\\n    if k > amt:\\n        k -= amt\\n        answer += amt * cost\\n    else:\\n        answer += k * cost\\n        k = 0\\n        break\\nprint(-1 if k else answer)\", \"import sys\\ninput = sys.stdin.readline\\nimport bisect\\nn,k=map(int,input().split())\\ns=input()\\nNext=[[float(\\\"inf\\\")]*(26) for _ in range(n+1)]\\nfor i in reversed(range(n)):\\n  for j in range(26):\\n    Next[i][j]=Next[i+1][j]\\n  Next[i][ord(s[i])-97]=i\\nDP=[[0]*(n+1) for _ in range(n+1)]\\nDP[0][0]=1\\nfor i in range(n):\\n  for j in range(26):\\n    nxt=Next[i][j]\\n    for l in range(n):\\n      if nxt<float(\\\"inf\\\"):\\n        DP[nxt+1][l+1]+=DP[i][l]\\nAns=[0]*(n+1)\\nfor i in range(n+1):\\n  for j in range(n+1):\\n    Ans[n-j]+=DP[i][j]\\nAns2=[0]\\nfor i in range(n+1):\\n  Ans2.append(Ans2[-1]+Ans[i])\\nif Ans2[-1]<k:\\n  print(-1)\\nelse:\\n  ind=bisect.bisect_left(Ans2,k)\\n  ans,num=0,0\\n  for i in range(ind-1):\\n    ans+=i*Ans[i]\\n    num+=Ans[i]\\n  ans+=(ind-1)*(k-num)\\n  print(ans)\", \"n, k = map(int, input().split())\\ns = input()\\ndp = [[0] * 102 for i in range(102)]\\ndp1 = [[0] * 102  for i in range(30)]\\n\\nfor i in range(0, n + 1):\\n    dp[i][0] = 1\\nfor i in range(1, n + 1):\\n    nm = ord(s[i - 1]) - ord('a')\\n    for le in range(1, i + 1):\\n        dp[i][le] = dp[i - 1][le] + dp[i - 1][le - 1]\\n        dp[i][le] -= dp1[nm][le]\\n    for le in range(1, i + 1):\\n        dp1[nm][le] += (dp[i][le] - dp[i - 1][le])\\n        \\n    \\nans = 0\\nfor le in range(n, -1, -1):\\n    if k == 0:\\n        break\\n    x = min(dp[n][le], k)\\n    ans += (n - le) * x\\n    k -= x\\nif k != 0:\\n    print(-1)\\nelse:\\n    print(ans)\", \"import math\\nn, k = map(int, input().split())\\n# print(n, k)\\ndp = [[0]*102 for i in range(102)]\\n# print(len(dp))\\ns = input()\\nlast = [-1] * 26\\nfor i in range(0, 101):\\n    dp[i][0] = 1\\n\\nfor i in range(1, n+1):\\n\\tfor j in range(1, n+1):\\n\\t\\tch = s[i-1]\\n\\t\\tdp[i][j] = dp[i-1][j-1] + dp[i-1][j]\\n\\t\\tsub = last[ord(ch)-ord('a')]\\n\\t\\tif sub == -1:\\n\\t\\t\\tcontinue\\n\\t\\tsub -= 1\\n\\t\\tdp[i][j] -= dp[sub][j-1]\\n\\tlast[ord(ch)-ord('a')] = i\\n\\nans = int(0)\\n\\nfor i in range(n, -1, -1):# Need to consider empty subsequence too\\n    if dp[n][i] >= k:\\n        # print(i, k)\\n        ans += (k) * (n - i)\\n        k = 0\\n    elif (k > 0):\\n        k -= dp[n][i]\\n        ans += (n - i) * dp[n][i]\\n    else:\\n        break\\nif k > 0:\\n    ans = -1\\nprint(ans)\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n# File              : H.py\\n# Author            : JCHRYS <jchrys@me.com>\\n# Date              : 30.08.2019\\n# Last Modified Date: 30.08.2019\\n# Last Modified By  : JCHRYS <jchrys@me.com>\\nclass const:\\n    size = 26; # size of lowercase alphabet\\n\\nn, k = list(map(int, input().split()));\\ns = input();\\n\\nmaxpos = [[-1 for _ in range(const.size)] for _ in range(n)];\\n\\nfor i in range(n):\\n    for j in range(const.size):\\n        if i > 0:\\n            maxpos[i][j] = maxpos[i - 1][j]\\n    maxpos[i][ord(s[i]) - ord('a')] = i\\n\\n#print(*[row for row in maxpos], sep=\\\"\\\\n\\\")\\ndp = [[0 for _ in range(n + 1)] for _ in range(n)];\\n\\nfor i in range(n):\\n    dp[i][1] = 1\\n\\nfor length in range(2, n):\\n    for endswith in range(1, n):\\n        for before in range(const.size):\\n            if maxpos[endswith - 1][before] != -1:\\n                dp[endswith][length] = dp[endswith][length] + dp[maxpos[endswith - 1][before]][length - 1];\\n\\n\\n#print(*[row for row in dp], sep=\\\"\\\\n\\\")\\nk -= 1;\\nans = 0;\\nfor length in range(n-1, 0, -1):\\n    temp = 0;\\n    for i in range(const.size):\\n        if (maxpos[n-1][i] != -1):\\n            temp += dp[maxpos[n-1][i]][length];\\n    \\n    if temp >= k:\\n        ans += k * (n - length);\\n        k = 0;\\n        break;\\n    else:\\n        k -= temp;\\n        ans += temp * (n-length);\\n  \\n\\nif (k == 1):\\n    ans += n;\\n    k-=1\\n\\nif k > 0:\\n    print(-1)\\n    return\\nprint(ans)\\n\\n\\n\\n\\n\", \"def subsequences_of_length(s):\\n    n = len(s)\\n\\n    alphabet = \\\"abcdefghijklmnopqrstuvwxyz\\\"\\n    to_int = {}\\n    for i, char in enumerate(alphabet):\\n        to_int[char] = i\\n\\n    next_i = [[n] * len(alphabet) for i in range(n + 1)]\\n    for i in reversed(range(n)):\\n        for j, char in enumerate(alphabet):\\n            next_i[i][j] = next_i[i+1][j]\\n        next_i[i][to_int[s[i]]] = i\\n\\n    dp = [[0] * (n + 1) for i in range(n + 1)]\\n    dp[0][0] = 1\\n    for i in range(n):\\n        for k in range(n):\\n            for j in range(26):\\n                if next_i[i][j] >= n:\\n                    continue\\n                dp[k+1][next_i[i][j] + 1] += dp[k][i]\\n\\n    ans = [sum(dp[i]) for i in range(n + 1)]\\n    return ans\\n\\n\\nn, k = map(int, input().split())\\ns = input()\\nans_len = subsequences_of_length(s)\\n\\nans_cnt = 0\\nans = 0\\nfor length in reversed(range(len(ans_len))):\\n    cnt = ans_len[length]\\n    if ans_cnt + cnt <= k:\\n        ans_cnt += cnt\\n        ans += cnt * (n - length)\\n    else:\\n        ans += (k - ans_cnt) * (n - length)\\n        ans_cnt = k\\nif ans_cnt != k:\\n    print(-1)\\nelse:\\n    print(ans)\", \"n, k = list(map(int, input().split()))\\ns = input()\\nlast = [[-1 for i in range(26)] for j in range(n)]\\nfor i in range(n):\\n    for j in range(26):\\n        if i != 0:\\n            last[i][j] = last[i-1][j]\\n    last[i][ord(s[i])-ord('a')] = i\\ndp = [[0 for i in range(n+1)] for j in range(n)]\\nfor i in range(n):\\n    dp[i][1] = 1\\nfor len in range(2, n+1):\\n    for i in range(1, n):\\n        for j in range(26):\\n            if last[i-1][j] != -1:\\n                dp[i][len] += dp[last[i-1][j]][len-1]\\nans = 0\\nfor len in range(n, 0, -1):\\n    cnt = 0\\n    for j in range(26):\\n        if last[n-1][j] != -1:\\n            cnt += dp[last[n-1][j]][len]\\n    if cnt >= k:\\n        ans += k*(n-len)\\n        k = 0\\n        break\\n    else:\\n        ans += cnt*(n-len)\\n        k -= cnt\\nif k == 1:\\n    ans += n\\n    k = 0\\nif k > 0:\\n    print(-1)\\nelse:\\n    print(ans)\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"4 5\\nasdf\\n\",\n    \"5 6\\naaaaa\\n\",\n    \"5 7\\naaaaa\\n\",\n    \"10 100\\najihiushda\\n\",\n    \"1 2\\nu\\n\",\n    \"1 5\\nw\\n\",\n    \"1 10\\ns\\n\",\n    \"1 25\\no\\n\",\n    \"1 50\\ns\\n\",\n    \"1 100\\np\\n\",\n    \"5 2\\nufdpx\\n\",\n    \"5 5\\nwnxcc\\n\",\n    \"5 10\\nbzitq\\n\",\n    \"5 25\\nwjsel\\n\",\n    \"5 50\\nbhhaj\\n\",\n    \"5 100\\nnvyoj\\n\",\n    \"10 2\\nmllbxoykle\\n\",\n    \"10 5\\nnrdmcxnnbb\\n\",\n    \"10 10\\nhittmcsvmo\\n\",\n    \"10 25\\nbpehfvamul\\n\",\n    \"10 50\\nfpsafelqno\\n\",\n    \"10 100\\nwfykkiubdk\\n\",\n    \"25 2\\nvwxvqvouhtbprdhrhlhotyqjp\\n\",\n    \"25 5\\nxcrhvdevynotmxzxqafeijadl\\n\",\n    \"25 10\\nquomusasazkywxnfvfjimiytg\\n\",\n    \"25 25\\nmdxynjiiivwifvaspplpkoffc\\n\",\n    \"25 50\\nqbntoutmcylbrtfzauvxmqvyn\\n\",\n    \"25 100\\niasrasqpntslqjkefyzbklmtr\\n\",\n    \"50 2\\nvjrvahvokiudpiocpvoqsqhukavyrckhcbctrbprqxizcofrfr\\n\",\n    \"50 5\\nxplfeoiobchekdeiwkmgkbunixgcyzngznoicllobsqbpkbwnp\\n\",\n    \"50 10\\ndnovfytvosvwbeykfnkkebgonntfqapbuphspjsclowovrgrae\\n\",\n    \"50 25\\naxxjyqblymjgkciyzwnochociulhtdsabhrdtfldmtugmlsbwu\\n\",\n    \"50 50\\ndxldyzmsrrwzwaofkcxwehgvtrsximxgdqrhjthkgfucrjdvwl\\n\",\n    \"50 100\\nbybehmveefoqvsronaztdwjzhfspmoszgibthctsamgixqailz\\n\",\n    \"100 2\\nzqdvwjzmgfmgngaxzgvuuukxyfzecafuflxpkvemenkorwhmnsxuoxsatlymyjugwjmutfxcksnwhxrwruyqbouyflxhwqhflczz\\n\",\n    \"100 5\\nayvharmmxcxhibqfixtjmhurxchhkvhubxjcveajrkssbsbrxpijxolrtmvanzyybzbdpgzocicakipmkpxhcjtegksbvabfghpf\\n\",\n    \"100 10\\nmaorgdrrnhytzrswsuomkdkdrqyqmwcdekbkgymqaqnacrbbbvwqzcqsdboztxygqjxsqwhjnftiguhemxhvvrnjwpdvbjexhlqt\\n\",\n    \"100 25\\nihxdcuahvemeipfkmdqqiktqnyrsrxfdmclwmvgretjsulnlxlvcuvjxxvnmrhjlerhvrzfdvxehnvgslrjzvbscfehtsxvvcabq\\n\",\n    \"100 50\\nmhnzadklojbuumkrxjayikjhwuxihgkinllackcavhjpxlydxcgcxjdloyicqkfwulytkpiflkrsdjseynwohymlehmtgswjfxzp\\n\",\n    \"100 100\\noaxflkpcwimoiocbudbxgzvekmengbumbcumwxjjcdtqzlijdqoelpevcqfiommjgioxaxdrhbyoszifgxjfprraisgzpxrjhyln\\n\",\n    \"100 1\\nyyojtyktazyfegvnnsexxiosqxdlpdwlyojsghpvjpavnvjvttbylqcdabyhleltltzalmgoelxdalcbjejsjxnfebzsxusnujdy\\n\",\n    \"7 100\\nasdfgha\\n\",\n    \"7 100\\nasdagha\\n\",\n    \"7 100\\nasafgsa\\n\",\n    \"7 86\\ndjfjfdj\\n\",\n    \"7 87\\ndjfjfdj\\n\",\n    \"6 50\\nfdjfjd\\n\",\n    \"6 49\\nfdjfjd\\n\",\n    \"6 51\\nfdjfjd\\n\",\n    \"10 1023\\nhsjztkorpv\\n\",\n    \"10 992\\nlzgbtqybar\\n\",\n    \"10 889\\nltwnwdluhx\\n\",\n    \"20 688037\\nttwnmquescldhxwdzxdi\\n\",\n    \"20 1019648\\nalhmijcknryfkeurtcqk\\n\",\n    \"20 999409\\nbfxajupatylfrczbfsgi\\n\",\n    \"30 363904895\\nfwhadwbsskiitjkuwupbrsobdttmqz\\n\",\n    \"30 642235040\\nqxkzwaiqbtffqogfkznyjfcshyjoao\\n\",\n    \"30 656341937\\nqrzlwlvhfatfwmlpvndtgrxyphfjnn\\n\",\n    \"40 550188209247\\nsxspwbifsqgndvxlrrdxwyvwygtvyiusxiyjgnuz\\n\",\n    \"40 313915447382\\nfjljjtmxouncvyrsawkkflkzarwolwkuznyqtnnk\\n\",\n    \"40 739620532705\\nfdawkecoubadbyxcmkahawfhiapgvwvdhjklxaec\\n\",\n    \"100 1000\\nojlksfclwvhxhyhddsosbkwxgpbhnvdgtvvcvrajpiimqsqlxicqyehwsiqcbzqzdxsfbtlldefawclzezvbpwiomvkneibmwtfw\\n\",\n    \"100 10000\\nxxprqtlnkqpurdilqdjnnmpsloumhbxymxmzplcwuyfexardpwodnhhkktipqcfwudbivaehhmqexffzgkpztmwrpzzzoudypoqe\\n\",\n    \"100 1000000\\npjsakcxuoyyivmfmzuqafyqvcmvmjqitckfnixurgmdshuejptqvrwomnalijputhnylyqesycwjvxflneuwyecyiaxwahlougoa\\n\",\n    \"100 1000000000\\ngaoxttalzmmhfhjphaftcwnnhjotuyxcnzlhqoynmcfhhmpzumichrghshdmbtjxmkwegnajkbtfhglkhnapizhltzxgfhyxyvfc\\n\",\n    \"100 1000000000000\\ndjgykfqaywhkhpocyxcpvbiiouyielmighclnuopadzuvrirbecucwnzwahahagvfstbxxaednajfauscxwttiglbbxtomnnalcl\\n\",\n    \"40 1000000000000\\nazipixmkcmxyzsyxerzggtjbfknpebgtwggrhyuu\\n\",\n    \"50 1000000000000\\nfltdysjwwsfhuklxnzfesrnmvdinquktuaaqduxyacvdsgxshy\\n\",\n    \"45 1000000000000\\nsakuacuunmcmnrqewlpukirumntsygulpywneaaipboho\\n\",\n    \"41 1000000000000\\nxfubvojhogeggntkezhpbigfqbdkdnzxueylitqxr\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"15\\n\",\n    \"-1\\n\",\n    \"233\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"13\\n\",\n    \"52\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"38\\n\",\n    \"88\\n\",\n    \"242\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"27\\n\",\n    \"73\\n\",\n    \"173\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"24\\n\",\n    \"49\\n\",\n    \"149\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"24\\n\",\n    \"49\\n\",\n    \"101\\n\",\n    \"0\\n\",\n    \"299\\n\",\n    \"309\\n\",\n    \"319\\n\",\n    \"273\\n\",\n    \"-1\\n\",\n    \"139\\n\",\n    \"133\\n\",\n    \"-1\\n\",\n    \"5110\\n\",\n    \"4912\\n\",\n    \"-1\\n\",\n    \"6756991\\n\",\n    \"10129664\\n\",\n    \"-1\\n\",\n    \"5380084386\\n\",\n    \"9468426224\\n\",\n    \"-1\\n\",\n    \"10734053749240\\n\",\n    \"6160842348859\\n\",\n    \"-1\\n\",\n    \"1902\\n\",\n    \"25621\\n\",\n    \"3833346\\n\",\n    \"5936118201\\n\",\n    \"8854753825335\\n\",\n    \"-1\\n\",\n    \"13601148116701\\n\",\n    \"15850182637674\\n\",\n    \"19636604785323\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1183/H", "starter_code": ""}
{"id": 4019, "question": "You are given an undirected unweighted connected graph consisting of $n$ vertices and $m$ edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nYour task is to find any spanning tree of this graph such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees). Recall that the degree of a vertex is the number of edges incident to it.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $D$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2}), 1 \\le D < n$) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively.\n\nThe following $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \\ne u_i$ is satisfied.\n\n\n-----Output-----\n\nIf there is no spanning tree satisfying the condition from the problem statement, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line and then print $n-1$ lines describing the edges of a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge $(v, u)$ is considered the same as the edge $(u, v)$).\n\nIf there are multiple possible answers, print any of them.\n\n\n-----Examples-----\nInput\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n2 1\n2 3\n3 4\n\nInput\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 3\n4 1\n\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe picture corresponding to the first and second examples: [Image]\n\nThe picture corresponding to the third example: [Image]", "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nn,m,D=list(map(int,input().split()))\\nE=[list(map(int,input().split())) for i in range(m)]\\n\\n\\nEDGELIST=[[] for i in range(n+1)]\\n\\nfor x,y in E:\\n    EDGELIST[x].append(y)\\n    EDGELIST[y].append(x)\\n\\nGroup=[i for i in range(n+1)]\\n\\ndef find(x):\\n    while Group[x] != x:\\n        x=Group[x]\\n    return x\\n\\ndef Union(x,y):\\n    if find(x) != find(y):\\n        Group[find(y)]=Group[find(x)]=min(find(y),find(x))\\n\\nONE=EDGELIST[1]\\n\\nfor x,y in E:\\n    if x==1 or y==1:\\n        continue\\n    Union(x,y)\\n\\nONEU=[find(e) for e in ONE]\\n\\nif len(set(ONEU))>D or D>len(ONE):\\n    print(\\\"NO\\\")\\n    return\\nelse:\\n    print(\\\"YES\\\")\\n\\nUSED=set()\\nANS=[]\\nfrom collections import deque\\nQUE=deque()\\ncheck=[0]*(n+1)\\ncheck[1]=1\\n\\nfor j in range(len(ONE)):\\n    if find(ONE[j]) in USED:\\n        continue\\n    else:\\n        ANS.append([1,ONE[j]])\\n        QUE.append(ONE[j])\\n        USED.add(find(ONE[j]))\\n        check[ONE[j]]=1\\n        D-=1\\n\\nj=0\\nfor i in range(D):\\n    while check[ONE[j]]==1:\\n        j+=1\\n    ANS.append([1,ONE[j]])\\n    QUE.append(ONE[j])\\n    check[ONE[j]]=1\\n    \\n\\nwhile QUE:\\n    x=QUE.popleft()\\n    check[x]=1\\n\\n    for to in EDGELIST[x]:\\n        if check[to]==0:\\n            ANS.append([x,to])\\n            QUE.append(to)\\n            check[to]=1\\n        \\n#print(ANS)\\nfor x,y in ANS:\\n    print(x,y)\\n\\n\\n    \\n    \\n    \\n\", \"'''input\\n7 10 2\\n7 1\\n1 3\\n5 2\\n6 1\\n6 5\\n3 7\\n5 7\\n1 2\\n5 1\\n1 4\\n'''\\nimport sys\\nfrom collections import defaultdict as dd\\nimport heapq\\nmod=10**9+7\\n\\ndef ri(flag=0):\\n\\tif flag==0:\\n\\t\\treturn [int(i) for i in sys.stdin.readline().split()]\\n\\telse:\\n\\t\\treturn int(sys.stdin.readline())\\n\\n\\nn,m,d=ri()\\n\\nt=dd(list)\\n\\nr=[0 for i in range(n+1)]\\nvis=[0 for i in range(n+1)]\\n\\n\\nfor i in range(m):\\n\\tu,v=ri()\\n\\tt[u].append(v)\\n\\tt[v].append(u)\\n\\nfor i in range(n+1):\\n\\tr[i]=len(t[i])\\n\\nfinal=[]\\n\\ndef bfs(sor):\\n\\ts=[sor]\\n\\tvis[sor]=1\\n\\twhile s:\\n\\t\\tk=s.pop(-1)\\n\\t\\tfor i in t[k]:\\n\\t\\t\\tif vis[i]==0:\\n\\t\\t\\t\\tvis[i]=1\\n\\t\\t\\t\\ts.append(i)\\n\\t\\t\\t\\t#final.append((k,i))\\n\\n\\n\\ndef bfs2(sor):\\n\\t\\n\\ts=[sor]\\n\\tvis[sor]=1\\n\\twhile s:\\n\\t\\tk=s.pop(-1)\\n\\t\\tfor i in t[k]:\\n\\t\\t\\tif vis[i]==0:\\n\\t\\t\\t\\tvis[i]=1\\n\\t\\t\\t\\ts.append(i)\\n\\t\\t\\t\\tfinal.append((k,i))\\n\\nnow=[]\\n\\nfor i in t[1]:\\n\\tnow.append(i)\\n\\nlk=0\\n\\ngo=dd(int)\\nvis[1]=1\\n\\nfor i in range(len(t[1])):\\n\\tif vis[t[1][i]]==0:\\n\\t\\tbfs(t[1][i])\\n\\t\\tgo[t[1][i]]=1\\n\\t\\tlk+=1\\n\\n\\nif lk<=d:\\n\\ttemp=t[1][:]\\n\\tt[1]=[]\\n\\tfor i in go:\\n\\t\\tt[1].append(i)\\n\\t\\tt[i].append(1)\\n\\t\\td-=1\\n\\n\\tfor i in temp:\\n\\t\\tif go[i]==1:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tif d!=0:\\n\\t\\t\\t\\tt[1].append(i)\\n\\t\\t\\t\\tt[i].append(1)\\n\\t\\t\\t\\td-=1\\n\\tif d!=0:\\n\\t\\tprint(\\\"NO\\\")\\n\\telse:\\n\\t\\tvis=[0 for i in range(n+1)]\\n\\t\\tbfs2(1)\\n\\t\\t#print(vis,t)\\n\\t\\tif sum(vis)==n:\\n\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\t\\tfor i in final:\\n\\t\\t\\t\\tprint(*i)\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"NO\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\\n\\n\", \"from collections import deque\\nn, m, d = map(int, input().split())\\ng = [[] for i in range(n + 1)]\\nfor i in range(m):\\n    u, v = map(int, input().split())\\n    g[u].append(v)\\n    g[v].append(u)\\n\\ndef bfs(init, c, p=False):\\n    nonlocal color\\n    q = deque(init)\\n    while len(q) > 0:\\n        u = q.popleft()\\n        for v in g[u]:\\n            if color[v] < 0:\\n                if p:\\n                    print(u, v)\\n                q.append(v)\\n                color[v] = c\\n\\ncolor = [-1 for i in range(n + 1)]\\ncolor[1] = 0\\n\\nc = 0\\nfor x in g[1]:\\n    if color[x] < 0:\\n        color[x] = c\\n        bfs([x], c)\\n        c += 1\\n\\nif len(g[1]) < d or d < c:\\n    print('NO')\\nelse: \\n    is_kid = [False for x in g[1]]\\n    kids = []\\n    \\n    picked = [False for i in range(c)]\\n    for i in range(len(g[1])):\\n        x = g[1][i]\\n        if not picked[color[x]]:\\n            is_kid[i] = True\\n            kids.append(x)\\n            picked[color[x]] = True\\n\\n    extra = d - c\\n    for i in range(len(g[1])):\\n        x = g[1][i]\\n        if extra == 0:\\n            break\\n        if not is_kid[i]:\\n            is_kid[i] = True\\n            kids.append(x)\\n            extra -= 1\\n\\n    color = [-1 for i in range(n + 1)]\\n    color[1] = 0\\n\\n    print('YES')\\n    for x in kids:\\n        print(1, x)\\n        color[x] = 0\\n\\n    bfs(kids, 0, True)\", \"import sys\\n\\nroot = 0\\nn, m, D = map(int, input().split())\\ng = [[] for _ in range(n)]\\nfor _ in range(m):\\n    u, v = map(int, input().split())\\n    g[u-1].append(v-1)\\n    g[v-1].append(u-1)\\n\\nif len(g[root]) < D:\\n    print('NO')\\n    return\\n\\nuf = [-1 for _ in range(n)]\\n\\ndef find(uf, u):\\n    if uf[u] < 0:\\n        return u\\n    else:\\n        ans = find(uf, uf[u])\\n        uf[u] = ans\\n        return ans\\n\\ndef merge(uf, u, v):\\n    pu = find(uf, u)\\n    pv = find(uf, v)\\n    if pu == pv:\\n        return\\n    if uf[pu] > uf[pv]:\\n        pu, pv = pv, pu\\n    uf[pu] += uf[pv]\\n    uf[pv] = pu\\n\\nans = []\\nin_tree = {}\\nfor v in g[root]:\\n    merge(uf, root, v)\\nfor i in range(n):\\n    for v in g[i]:\\n        if find(uf, i) != find(uf, v):\\n            merge(uf, i, v)\\n            ans.append((i+1, v+1))\\n            in_tree[(min(i, v), max(i, v))] = True\\n\\nchildren = [[] for _ in range(n)]\\npar = [-1 for _ in range(n)]\\n\\ndef dfs(s, super_p):\\n    st = [(s, root)]\\n    while len(st) > 0:\\n        u, p = st.pop()\\n        children[super_p].append(u)\\n        merge(par, u, super_p)\\n        for v in g[u]:\\n            if v != p and (min(u, v), max(u, v)) in in_tree:\\n                st.append((v, u))\\n\\nfor v in g[root]:\\n    dfs(v, v)\\n\\nsz = len(g[root])\\nfor i in range(len(g[root])):\\n    found = False\\n    u = g[root][i]\\n    if sz > D:\\n        for v in children[u]:\\n            for w in g[v]:\\n                if not found and w != root and find(par, w) != find(par, v) and (min(v, w), max(v, w)) not in in_tree:\\n                    sz -= 1\\n                    found = True\\n                    merge(par, v, w)\\n                    ans.append((v+1, w+1))\\n                    in_tree[(min(v, w), max(v, w))] = True\\n    if not found:\\n        ans.append((root+1, u+1))\\n\\nif sz != D:\\n    print('NO')\\nelse:\\n    print('YES')\\n    print('\\\\n'.join(map(lambda x: '{} {}'.format(x[0], x[1]), ans)))\", \"def dfs(s):\\n\\tstk,cnt=[],[]\\n\\tstk.append(s)\\n\\tcnt.append(0)\\n\\twhile (len(stk)>0):\\n\\t\\ts=stk[-1]\\n\\t\\tll=cnt[-1]\\n\\t\\tvisit[s]=1\\n\\t\\tflag=1\\n\\t\\tfor j in range(ll,len(adj[s]),1):\\n\\t\\t\\tif visit[adj[s][j]]==0:\\n\\t\\t\\t\\tcnt[-1]=j+1\\n\\t\\t\\t\\tstk.append(adj[s][j])\\n\\t\\t\\t\\tcnt.append(0)\\n\\t\\t\\t\\tflag=0\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag:\\n\\t\\t\\tstk.pop()\\n\\t\\t\\tcnt.pop()\\n\\nn,m,d=map(int,input().split())\\nadj=[0]*(n+1)\\nfor i in range(n+1):\\n\\tadj[i]=[]\\nfor i in range(m):\\n\\tx,y=map(int,input().split())\\n\\tadj[x].append(y)\\n\\tadj[y].append(x)\\nvisit=[0]*(n+1)\\nvisit[1]=1\\nans=[0]*m\\nct=0\\nmark=[0]*(n+1)\\nmark[1]=1\\nfor l in range(len(adj[1])):\\n\\ti=adj[1][l]\\n\\tif visit[i]==0:\\n\\t\\tdfs(i)\\n\\t\\tans[ct]=[1,i]\\n\\t\\tmark[i]=1\\n\\t\\tct+=1\\nif ct>d:\\n\\tprint(\\\"NO\\\")\\n\\treturn\\nif ct<d:\\n\\tfor i in range(len(adj[1])):\\n\\t\\tif mark[adj[1][i]]==0:\\n\\t\\t\\tans[ct]=[1,adj[1][i]]\\n\\t\\t\\tmark[adj[1][i]]=1\\n\\t\\t\\tct+=1\\n\\t\\tif ct==d:\\n\\t\\t\\tbreak\\n\\tif ct<d:\\n\\t\\tprint(\\\"NO\\\")\\n\\t\\treturn\\ni=0\\nwhile (i<ct):\\n\\tk=ans[i][1]\\n\\tif visit[k]:\\n\\t\\t# print(k,adj[k])\\n\\t\\tfor j in range(len(adj[k])):\\n\\t\\t\\tif mark[adj[k][j]]==0:\\n\\t\\t\\t\\tmark[adj[k][j]]=1\\n\\t\\t\\t\\tans[ct]=[k,adj[k][j]]\\n\\t\\t\\t\\tct+=1\\n\\t\\tvisit[k]=0\\n\\ti+=1\\nprint(\\\"YES\\\")\\nfor i in range(ct):\\n\\tprint(*ans[i])\", \"n, m, d = list(map(int, input().split()))\\n\\ng = [[] for _ in range(n + 1)]\\n\\nhaveOne = [False] * (n + 1)\\n\\nfor i in range(m):\\n\\tu, v = list(map(int, input().split()))\\n\\tg[u].append(v)\\n\\tg[v].append(u)\\n\\tif u == 1:\\n\\t\\thaveOne[v] = True\\n\\tif v == 1:\\n\\t\\thaveOne[u] = True\\n\\t\\ncount = 0\\ngroup = [-1] * (n + 1)\\nselectedOne = []\\n\\nfor i in range(2, n+1):\\n\\tif group[i] == -1:\\n\\t\\t# bfs\\n\\t\\tgroup[i] = count\\n\\t\\tuseOne = False\\n\\t\\tif haveOne[i]:\\n\\t\\t\\tselectedOne.append(i)\\n\\t\\t\\tuseOne = True\\n\\t\\tif count >= d:\\n\\t\\t\\tcount += 1\\n\\t\\t\\tbreak\\n\\t\\tincount = count + 1\\n\\t\\tqu = []\\n\\t\\tqu += g[i]\\n\\n\\t\\t\\n\\t\\twhile len(qu) > 0:\\n\\t\\t\\tc = qu.pop()\\n\\t\\t\\tif c != 1 and group[c] == -1:\\n\\t\\t\\t\\tif haveOne[c] and not(useOne):\\n\\t\\t\\t\\t\\tselectedOne.append(c)\\n\\t\\t\\t\\t\\tuseOne = True\\n\\t\\t\\t\\tgroup[c] = count\\n\\t\\t\\t\\tqu += g[c]\\n\\t\\tcount += 1\\n\\nif count > d or d > len(g[1]):\\n\\tprint('NO')\\nelse:\\n\\tdiffOne = list(set(g[1]) - set(selectedOne))\\n\\tdiffOne = selectedOne + diffOne\\n\\tg[1] = diffOne[:d]\\n\\tvisited = [False] * (n + 1)\\n\\tqVisit = [1]\\n\\tvisited[1] = True\\n\\t\\n\\tprint('YES')\\n\\twhile len(qVisit) > 0:\\n\\t\\ti = qVisit.pop()\\n\\t\\tfor j in g[i]:\\n\\t\\t\\tif not(visited[j]):\\n\\t\\t\\t\\tprint(i, j)\\n\\t\\t\\t\\tvisited[j] = True\\n\\t\\t\\t\\tqVisit.append(j)\\n\", \"[n, m, d] = list(map(int, input().split()))\\ng = {}\\nfor i in range(n):\\n    g[i+1] = set()\\nfor i in range(m):\\n    [v, u] = list(map(int, input().split()))\\n    g[u].add(v)\\n    g[v].add(u)\\nseen = set()\\ncomps = set()\\nfor node in g[1]:\\n    if node in seen:\\n        continue\\n    comps.add(node)\\n    seen.add(node)\\n    q = [node]\\n    while len(q) > 0:\\n        v = q.pop()\\n        for to in g[v]:\\n            if to in seen or to == 1:\\n                continue\\n            q.append(to)\\n            seen.add(to)\\nif d > len(g[1]) or d < len(comps):\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n    rem = 0\\n    rem2 = []\\n    for i in g[1]:\\n        if len(g[1]) - rem == d:\\n            break\\n        if i not in comps:\\n            rem2.append(i)\\n            rem += 1\\n    for i in rem2:\\n        g[1].discard(i)\\n    seen.clear()\\n    q = [1]\\n    while len(q) > 0:\\n        v = q.pop()\\n        discard = []\\n        for to in g[v]:\\n            if to in seen or to == 1:\\n                continue\\n            q.append(to)\\n            seen.add(to)\\n            print(v, \\\" \\\", to)\\n\\n\\n\", \"[n, m, d] = list(map(int, input().split()))\\ng = {}\\nfor i in range(n):\\n    g[i+1] = set()\\nfor i in range(m):\\n    [v, u] = list(map(int, input().split()))\\n    g[u].add(v)\\n    g[v].add(u)\\nseen = set()\\ncomps = set()\\nfor node in g[1]:\\n    if node in seen:\\n        continue\\n    comps.add(node)\\n    seen.add(node)\\n    q = [node]\\n    while len(q) > 0:\\n        v = q.pop()\\n        for to in g[v]:\\n            if to in seen or to == 1:\\n                continue\\n            q.append(to)\\n            seen.add(to)\\nif d > len(g[1]) or d < len(comps):\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n    rem = 0\\n    rem2 = []\\n    for i in g[1]:\\n        if len(g[1]) - rem == d:\\n            break\\n        if i not in comps:\\n            rem2.append(i)\\n            rem += 1\\n    for i in rem2:\\n        g[1].discard(i)\\n    seen.clear()\\n    q = [1]\\n    while len(q) > 0:\\n        v = q.pop()\\n        discard = []\\n        for to in g[v]:\\n            if to in seen or to == 1:\\n                continue\\n            q.append(to)\\n            seen.add(to)\\n            print(v, \\\" \\\", to)\\n\\n\\n\", \"n, m, D = [int(x) for x in input().split(' ')]\\n\\nG = {}\\nfor u in range(1, n + 1):\\n  G[u] = set()\\nfor i in range(m):\\n  u, v = [int(x) for x in input().split(' ')]\\n  G[u].add(v)\\n  G[v].add(u)\\n\\nif len(G[1]) < D:\\n  print('NO')\\nelse:\\n\\n  visited = [1] + [0] * n\\n  comp = [0] * (n + 1)\\n  c_visited = [1] + [0] * n\\n\\n  a = 0\\n  for i in G[1]:\\n    if not visited[i]:\\n      a += 1 \\n      comp[i] = a\\n      visited[i] = 1\\n      q = [i]\\n      # bfs\\n      while len(q) > 0:\\n        u = q.pop(0)\\n        for v in G[u]:\\n          if v != 1 and not visited[v]:\\n            q.append(v)\\n            comp[v] = a\\n            visited[v] = 1\\n  if a > D:\\n    print('NO')\\n  else:\\n    print('YES')\\n    d = D\\n    visited[1] = 2\\n    queue = []\\n    n_edges = 0\\n    for v in G[1]:\\n      if not c_visited[comp[v]]:\\n        visited[v] = 2\\n        d -= 1\\n        c_visited[comp[v]] = 1\\n        n_edges += 1\\n        print(1, v)\\n        queue.append(v)\\n    if d:\\n      for v in G[1]:\\n        if visited[v] != 2:\\n          visited[v] = 2\\n          d -= 1\\n          print(1, v)\\n          n_edges += 1\\n          queue.append(v)\\n          if not d:\\n            break\\n    # bfs\\n    while len(queue) > 0 and n_edges < n -1:\\n      u = queue.pop(0)\\n      for v in G[u]:\\n        if visited[v] != 2:\\n          visited[v] = 2\\n          queue.append(v)\\n          n_edges += 1\\n          print(u, v)\\n\", \"'''input\\n7 10 2\\n7 1\\n1 3\\n5 2\\n6 1\\n6 5\\n3 7\\n5 7\\n1 2\\n5 1\\n1 4\\n'''\\nimport sys\\nfrom collections import defaultdict as dd\\nimport heapq\\nmod=10**9+7\\n\\ndef ri(flag=0):\\n\\tif flag==0:\\n\\t\\treturn [int(i) for i in sys.stdin.readline().split()]\\n\\telse:\\n\\t\\treturn int(sys.stdin.readline())\\n\\n\\nn,m,d=ri()\\n\\nt=dd(list)\\n\\nr=[0 for i in range(n+1)]\\nvis=[0 for i in range(n+1)]\\n\\n\\nfor i in range(m):\\n\\tu,v=ri()\\n\\tt[u].append(v)\\n\\tt[v].append(u)\\n\\nfor i in range(n+1):\\n\\tr[i]=len(t[i])\\n\\nfinal=[]\\n\\ndef bfs(sor):\\n\\ts=[sor]\\n\\tvis[sor]=1\\n\\twhile s:\\n\\t\\tk=s.pop(-1)\\n\\t\\tfor i in t[k]:\\n\\t\\t\\tif vis[i]==0:\\n\\t\\t\\t\\tvis[i]=1\\n\\t\\t\\t\\ts.append(i)\\n\\t\\t\\t\\t#final.append((k,i))\\n\\n\\n\\ndef bfs2(sor):\\n\\t\\n\\ts=[sor]\\n\\tvis[sor]=1\\n\\twhile s:\\n\\t\\tk=s.pop(-1)\\n\\t\\tfor i in t[k]:\\n\\t\\t\\tif vis[i]==0:\\n\\t\\t\\t\\tvis[i]=1\\n\\t\\t\\t\\ts.append(i)\\n\\t\\t\\t\\tfinal.append((k,i))\\n\\nnow=[]\\n\\nfor i in t[1]:\\n\\tnow.append(i)\\n\\nlk=0\\n\\ngo=dd(int)\\nvis[1]=1\\n\\nfor i in range(len(t[1])):\\n\\tif vis[t[1][i]]==0:\\n\\t\\tbfs(t[1][i])\\n\\t\\tgo[t[1][i]]=1\\n\\t\\tlk+=1\\n\\n\\nif lk<=d:\\n\\ttemp=t[1][:]\\n\\tt[1]=[]\\n\\tfor i in go:\\n\\t\\tt[1].append(i)\\n\\t\\tt[i].append(1)\\n\\t\\td-=1\\n\\n\\tfor i in temp:\\n\\t\\tif go[i]==1:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tif d!=0:\\n\\t\\t\\t\\tt[1].append(i)\\n\\t\\t\\t\\tt[i].append(1)\\n\\t\\t\\t\\td-=1\\n\\tif d!=0:\\n\\t\\tprint(\\\"NO\\\")\\n\\telse:\\n\\t\\tvis=[0 for i in range(n+1)]\\n\\t\\tbfs2(1)\\n\\t\\t#print(vis,t)\\n\\t\\tif sum(vis)==n:\\n\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\t\\tfor i in final:\\n\\t\\t\\t\\tprint(*i)\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"NO\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"import sys\\nfrom collections import Counter, defaultdict\\ndef i_ints():\\n    return map(int, sys.stdin.readline().split())\\n\\nn, m, D = i_ints()\\nE = defaultdict(set)\\nfor i in range(m):\\n    u, v = i_ints()\\n    E[u].add(v)\\n    E[v].add(u)\\n    \\n    \\ndef append_edge(u, v):\\n    E[u].discard(v)\\n    E[v].discard(u)\\n    t.add(u)\\n    t.add(v)\\n    te.append((u, v))\\n    \\ndef complete_tree(u):\\n    nonlocal too_much\\n    todo = {u}\\n    while todo:\\n        u = todo.pop()\\n        for v in list(E[u]):\\n            if v not in t:\\n                if v not in starts:\\n                    append_edge(u, v)\\n                    todo.add(v)\\n                else:\\n                    if too_much > 0:\\n                        append_edge(u, v)\\n                        todo.add(v)\\n                        too_much -= 1\\n\\n    \\ndef print_tree():\\n    for u, v in te:\\n        print(u, v)\\n    \\n    \\nu0 = 1 \\nt = {u0}\\nte = []\\nstarts = set(E[u0])\\ntoo_much = len(starts) - D\\nif too_much >= 0:\\n    for v in starts:\\n        if v not in t:\\n            append_edge(u0, v)\\n            complete_tree(v)\\nif not too_much:\\n    print(\\\"YES\\\")\\n    print_tree()\\nelse:\\n    print(\\\"NO\\\")\", \"import sys\\nfrom collections import Counter, defaultdict\\ndef i_ints():\\n    return map(int, sys.stdin.readline().split())\\n\\nn, m, D = i_ints()\\nE = defaultdict(set)\\nfor i in range(m):\\n    u, v = i_ints()\\n    E[u].add(v)\\n    E[v].add(u)\\n    \\n    \\ndef append_edge(u, v):\\n#    E[u].discard(v)\\n    E[v].discard(u)\\n#    t.add(u)\\n    t.add(v)\\n    te.append((u, v))\\n    \\ndef complete_tree(u):\\n    nonlocal too_much\\n    todo = {u}\\n    while todo:\\n        u = todo.pop()\\n        for v in list(E[u]):\\n            if v not in t:\\n                if v not in starts:\\n                    append_edge(u, v)\\n                    todo.add(v)\\n                else:\\n                    if too_much > 0:\\n                        append_edge(u, v)\\n                        todo.add(v)\\n                        too_much -= 1\\n\\n    \\ndef print_tree():\\n    for u, v in te:\\n        print(u, v)\\n    \\n    \\nu0 = 1 \\nt = {u0}\\nte = []\\nstarts = set(E[u0])\\ntoo_much = len(starts) - D\\nif too_much >= 0:\\n    for v in starts:\\n        if v not in t:\\n            append_edge(u0, v)\\n            complete_tree(v)\\nif not too_much:\\n    print(\\\"YES\\\")\\n    print_tree()\\nelse:\\n    print(\\\"NO\\\")\", \"import os\\nfrom io import BytesIO\\ninput = BytesIO(os.read(0, os.fstat(0).st_size)).readline\\n\\ndef main():\\n    def union(u, v):\\n        p, q = find(u), find(v)\\n        if p == q: return\\n        if rank[p] < rank[q]: p, q = q, p\\n        if rank[p] == rank[q]: rank[p] += 1\\n        parent[q] = p\\n\\n    def find(u):\\n        p = parent[u]\\n        if p == u: return u\\n        root = find(p)\\n        parent[u] = root\\n        return root\\n\\n\\n    n, m, D = map(int, input().split())\\n    E = []\\n    E0 = []\\n    E0rmn = []\\n    MSTE = []\\n\\n    parent = list(range(n))\\n    rank = [0] * n\\n\\n    for _ in range(m):\\n        u, v = map(int, input().split())\\n        u, v = u-1, v-1\\n        if u == 0 or v == 0:\\n            E0.append((u, v))\\n        else:\\n            E.append((u, v))\\n\\n    if len(E0) < D:\\n        print('NO')\\n        return\\n\\n    for u, v in E:\\n        if find(u) != find(v):\\n            union(u, v)\\n            MSTE.append((u, v))\\n\\n    k = 0\\n    for u, v in E0:\\n        if find(u) != find(v):\\n            union(u, v)\\n            MSTE.append((u, v))\\n            k += 1\\n        else:\\n            E0rmn.append((u, v))\\n\\n    if D < k:\\n        print('NO')\\n        return\\n\\n    while k < D:\\n        e = E0rmn.pop()\\n        MSTE.append(e)\\n        k += 1\\n\\n    parent = list(range(n))\\n    rank = [0] * n\\n\\n    out = ['YES']\\n    for u, v in reversed(MSTE):\\n        if find(u) != find(v):\\n            union(u, v)\\n            out.append(str(u+1) + ' ' + str(v+1))\\n\\n    print('\\\\n'.join(out))\\n\\nmain()\", \"import sys\\nfrom collections import deque\\nsys.setrecursionlimit(20000000)\\ninput = sys.stdin.readline\\nn,m,d = map(int,input().split())\\ng = [[] for i in range(n)]\\nfor i in range(m):\\n        a,b = map(int,input().split())\\n        a-=1;b-=1\\n        g[a].append(b)\\n        g[b].append(a)\\n\\nne = 0\\n\\n\\nans = []\\nmita = [0]*n\\nmita[ne] = -1\\ndef dfs(x,y):\\n        for i in g[x]:\\n                if mita[i] == 0:\\n                        ans.append([x+1,i+1])\\n                        mita[i] = y\\n                        que.append([i,y])\\nfor i in g[ne]:\\n        if mita[i] != 0:\\n                continue\\n        mita[i] = i\\n        que = deque()\\n        que.append([i,i])\\n        while que:\\n                x,y = que.popleft()\\n                dfs(x,y)\\nsyo = len(set(mita))-1\\nif syo > d or len(g[ne]) < d:\\n        print(\\\"NO\\\")\\n        return\\nprint(\\\"YES\\\")\\nuse = set()\\nki  = set()\\nfor i in g[ne]:\\n        if mita[i] in ki:\\n                continue\\n        else:\\n                ki.add(mita[i])\\n                use.add(i)\\nfor i in g[ne]:\\n        if len(use) == d:\\n                break\\n        if i not in use:\\n                use.add(i)\\n\\ng[ne] = list(use)\\nans = []\\nmita = [0]*n\\nmita[ne] = 1\\ndef dfs(x):\\n        for i in g[x]:\\n                if mita[i] == 0:\\n                        ans.append([x+1,i+1])\\n                        mita[i] = 1\\n                        que.append(i)\\nque = deque()\\nque.append(ne)\\nwhile que:\\n        dfs(que.popleft())\\nfor i,j in ans:\\n        print(i,j)\", \"import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n \\nBUFSIZE = 8192\\n \\n \\nclass FastIO(IOBase):\\n    newlines = 0\\n \\n    def __init__(self, file):\\n        self._fd = file.fileno()\\n        self.buffer = BytesIO()\\n        self.writable = \\\"x\\\" in file.mode or \\\"r\\\" not in file.mode\\n        self.write = self.buffer.write if self.writable else None\\n \\n    def read(self):\\n        while True:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            if not b:\\n                break\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines = 0\\n        return self.buffer.read()\\n \\n    def readline(self):\\n        while self.newlines == 0:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            self.newlines = b.count(b\\\"\\\\n\\\") + (not b)\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines -= 1\\n        return self.buffer.readline()\\n \\n    def flush(self):\\n        if self.writable:\\n            os.write(self._fd, self.buffer.getvalue())\\n            self.buffer.truncate(0), self.buffer.seek(0)\\n \\n \\nclass IOWrapper(IOBase):\\n    def __init__(self, file):\\n        self.buffer = FastIO(file)\\n        self.flush = self.buffer.flush\\n        self.writable = self.buffer.writable\\n        self.write = lambda s: self.buffer.write(s.encode(\\\"ascii\\\"))\\n        self.read = lambda: self.buffer.read().decode(\\\"ascii\\\")\\n        self.readline = lambda: self.buffer.readline().decode(\\\"ascii\\\")\\n \\n \\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\\ninput = lambda: sys.stdin.readline().rstrip(\\\"\\\\r\\\\n\\\")\\n#######################################\\nimport sys,threading\\nsys.setrecursionlimit(400000)\\nthreading.stack_size(10**8)\\ndef dfs(x,y,t):\\n    nonlocal v,l1,l2,adj,d,ans,l3,c\\n    v[x]=1\\n    l1[x]=t\\n    l2[x]=t\\n    for i in adj[x]:\\n        if not v[i]:\\n            if x==1:\\n                c+=1\\n            dfs(i,x,t+1)\\n            if l2[i]<=l1[x]:\\n                l2[x]=l2[i]\\n                ans.append([x,i])\\n                if x==1:\\n                    d-=1\\n            else:\\n                ans.append([x,i])\\n                if x==1:\\n                    d-=1\\n        else:\\n            if i!=y:\\n                if l2[i]<l1[x]:\\n                    l2[x]=l2[i]\\n                    if i==1:\\n                        l3.append([x,(y,x)])\\ndef main():\\n    nonlocal v,l1,l2,adj,d,ans,l3,c\\n    n,m,d=list(map(int,input().split()))\\n    d1=d\\n    adj=[[] for i in range(n+1)]\\n    v=[0]*(n+1)\\n    l1=[0]*(n+1)\\n    l2=[0]*(n+1)\\n    l3=[]\\n    ans=[]\\n    c=0\\n    for i in range(m):\\n        x,y=list(map(int,input().split()))\\n        adj[x].append(y)\\n        adj[y].append(x)\\n    if len(adj[1])<d:\\n        print(\\\"NO\\\")\\n    else:\\n        dfs(1,0,0)\\n        a=\\\"YES\\\"\\n        from collections import defaultdict\\n        dd=defaultdict(int)\\n        if c>d1:\\n            a=\\\"NO\\\"\\n        elif c<d1:\\n            for i in l3:\\n                if d==0:\\n                    break\\n                ans.append([1,i[0]])\\n                dd[i[1]]=1\\n                d-=1\\n        print(a)\\n        if a==\\\"YES\\\":\\n            for i in ans:\\n                x,y=i\\n                if dd[(x,y)]==0:\\n                    print(*i)\\nt=threading.Thread(target=main)\\nt.start()\\nt.join()\\n\\n        \\n        \\n        \\n\\n\\n\\n    \\n\", \"import sys\\nimport math\\nfrom collections import defaultdict,deque\\nimport heapq\\ndef find(node,parent):\\n\\twhile parent[node]!=node:\\n\\t\\tnode=parent[node]\\n\\treturn node\\ndef union(a,b,child,parent):\\n\\t#print(a,'a',b,'b')\\n\\tpara=find(a,parent)\\n\\tparb=find(b,parent)\\n\\t#print(para,'para')\\n\\tca=child[para]\\n\\tcb=child[parb]\\n\\tif para!=parb:\\n\\t\\tif ca>cb:\\n\\t\\t\\tparent[parb]=para\\n\\t\\t\\tchild[para]+=child[parb]\\n\\t\\telse:\\n\\t\\t\\tparent[para]=parb\\n\\t\\t\\tchild[parb]+=child[para]\\n\\t\\t\\nn,m,d=map(int,sys.stdin.readline().split())\\ngraph=defaultdict(list)\\nparent=[i for i in range(n+1)]\\nchild=[1 for i in range(n+1)]\\nedges=[]\\nfor i in range(m):\\n\\tu,v=map(int,sys.stdin.readline().split())\\n\\tgraph[u].append(v)\\n\\tgraph[v].append(u)\\n\\t#edges.append([u,v])\\nvis=defaultdict(int)\\nq=deque()\\n\\nvis[1]=1\\nfor j in graph[1]:\\n\\tif vis[j]==0:\\n\\t\\tvis[j]=1\\n\\t\\tq.append(j)\\n\\t\\t#print(j,'j')\\n\\t\\tchild[j]+=1\\n\\t\\t#print(child[j],'child')\\n\\t\\twhile q:\\n\\t\\t\\tcur=q.pop()\\n\\t\\t\\t#print(cur,'cur')\\n\\t\\t\\tfor i in graph[cur]:\\n\\t\\t\\t\\tif vis[i]==0:\\n\\t\\t\\t\\t\\tq.append(i)\\n\\t\\t\\t\\t\\tif cur!=1 and i!=1:\\n\\t\\t\\t\\t\\t\\t#print(cur,'cur',i,'i')\\n\\t\\t\\t\\t\\t\\tunion(cur,i,child,parent)\\n\\t\\t\\t\\t\\tvis[i]=1\\nif len(graph[1]) < d:\\n\\tprint(\\\"NO\\\")\\n\\treturn\\n#print(graph[1],'one')\\n#print(parent,'parent')\\n#print(child,'child')\\ncnt=set()\\nfor i in graph[1]:\\n\\tcnt.add(find(i,parent))\\n#print(cnt,'cnt')\\nif len(cnt)>d:\\n\\tprint(\\\"NO\\\")\\n\\treturn\\nq=deque()\\nres=0\\nans=[]\\nvis=defaultdict(int)\\nfor i in cnt:\\n\\tans.append([1,i])\\n\\tq.append(i)\\n\\tvis[i]=1\\n\\tres+=1\\nrem=d-res\\nvis[1]=1\\nfor i in graph[1]:\\n\\tif rem>0 and vis[i]==0:\\n\\t\\tvis[i]=1\\n\\t\\tq.append(i)\\n\\t\\trem-=1\\n\\t\\tans.append([1,i])\\n\\nwhile q:\\n\\tcur=q.popleft()\\n\\tfor j in graph[cur]:\\n\\t\\tif vis[j]==0:\\n\\t\\t\\tq.append(j)\\n\\t\\t\\tans.append([cur,j])\\n\\t\\t\\tvis[j]=1\\nprint(\\\"YES\\\")\\nfor i in range(n-1):\\n\\tprint(ans[i][0],ans[i][1])\", \"import collections as cc\\nimport math as mt\\nimport sys\\nI=lambda:list(map(int,input().split()))\\ndef find(u):\\n\\twhile u!=parent[u]:\\n\\t\\tu=parent[u]\\n\\treturn u\\ndef union(u,v):\\n\\ta=find(u)\\n\\tb=find(v)\\n\\tif a!=b:\\n\\t\\tparent[a]=parent[b]=min(a,b)\\nn,m,d=I()\\nuu=set()\\nuu.add(1)\\nparent=[i for i in range(n+1)]\\ng=cc.defaultdict(list)\\non=[]\\ntf=cc.defaultdict(int)\\nother=[]\\nfor i in range(m):\\n\\tx,y=sorted(I())\\n\\tg[x].append(y)\\n\\tg[y].append(x)\\n\\tif x!=1 and y!=1:\\n\\t\\tother.append([x,y])\\n\\t\\tunion(x,y)\\ntemp=g[1]\\ncon=[find(i) for i in set(temp)]\\nif len(set(con))>d or len(set(temp))<d:\\n\\tprint(\\\"NO\\\")\\n\\treturn\\nelse:\\n\\tprint(\\\"YES\\\")\\n\\tused=cc.defaultdict(int)\\n\\tans=[]\\n\\tst=cc.deque()\\n\\tuse=[0]*(n+1)\\n\\tuse[1]=1\\n\\tj=0\\n\\tfor i in range(len(temp)):\\n\\t\\tif not used[find(temp[i])]:\\n\\t\\t\\tused[find(temp[i])]=1\\n\\t\\t\\tans.append([1,temp[i]])\\n\\t\\t\\tst.append(temp[i])\\n\\t\\t\\tuse[temp[i]]=1\\n\\t\\t\\td-=1\\n\\tfor i in range(d):\\n\\t\\twhile use[temp[j]]==1:\\n\\t\\t\\tj+=1\\n\\t\\tans.append([1,temp[j]])\\n\\t\\tst.append(temp[j])\\n\\t\\tuse[temp[j]]=1\\n\\twhile st:\\n\\t\\tx=st.popleft()\\n\\t\\tuse[x]=1\\n\\t\\tfor y in g[x]:\\n\\t\\t\\tif not use[y]:\\n\\t\\t\\t\\tans.append([x,y])\\n\\t\\t\\t\\tst.append(y)\\n\\t\\t\\t\\tuse[y]=1\\n\\tfor i in ans:\\n\\t\\tprint(*i)\\n\", \"import sys\\ninput = sys.stdin.readline\\n \\nn,m,D=map(int,input().split())\\nE=[list(map(int,input().split())) for i in range(m)]\\n \\n \\nEDGELIST=[[] for i in range(n+1)]\\n \\nfor x,y in E:\\n    EDGELIST[x].append(y)\\n    EDGELIST[y].append(x)\\n \\nGroup=[i for i in range(n+1)]\\n \\ndef find(x):\\n    while Group[x] != x:\\n        x=Group[x]\\n    return x\\n \\ndef Union(x,y):\\n    if find(x) != find(y):\\n        Group[find(y)]=Group[find(x)]=min(find(y),find(x))\\n \\nONE=EDGELIST[1]\\n \\nfor x,y in E:\\n    if x==1 or y==1:\\n        continue\\n    Union(x,y)\\n \\nONEU=[find(e) for e in ONE]\\n \\nif len(set(ONEU))>D or D>len(ONE):\\n    print(\\\"NO\\\")\\n    return\\nelse:\\n    print(\\\"YES\\\")\\n \\nUSED=set()\\nANS=[]\\nfrom collections import deque\\nQUE=deque()\\ncheck=[0]*(n+1)\\ncheck[1]=1\\n \\nfor j in range(len(ONE)):\\n    if find(ONE[j]) in USED:\\n        continue\\n    else:\\n        ANS.append([1,ONE[j]])\\n        QUE.append(ONE[j])\\n        USED.add(find(ONE[j]))\\n        check[ONE[j]]=1\\n        D-=1\\n \\nj=0\\nfor i in range(D):\\n    while check[ONE[j]]==1:\\n        j+=1\\n    ANS.append([1,ONE[j]])\\n    QUE.append(ONE[j])\\n    check[ONE[j]]=1\\n    \\n \\nwhile QUE:\\n    x=QUE.popleft()\\n    check[x]=1\\n \\n    for to in EDGELIST[x]:\\n        if check[to]==0:\\n            ANS.append([x,to])\\n            QUE.append(to)\\n            check[to]=1\\n        \\n#print(ANS)\\nfor x,y in ANS:\\n    print(x,y)\", \"# ---------------------------iye ha aam zindegi---------------------------------------------\\nimport math\\nimport random\\nimport heapq, bisect\\nimport sys\\nfrom collections import deque, defaultdict\\nfrom fractions import Fraction\\nimport sys\\nimport threading\\nfrom collections import defaultdict\\nthreading.stack_size(10**8)\\nmod = 10 ** 9 + 7\\nmod1 = 998244353\\n\\n# ------------------------------warmup----------------------------\\nimport os\\nimport sys\\nfrom io import BytesIO, IOBase\\nsys.setrecursionlimit(300000)\\n\\nBUFSIZE = 8192\\n\\n\\nclass FastIO(IOBase):\\n    newlines = 0\\n\\n    def __init__(self, file):\\n        self._fd = file.fileno()\\n        self.buffer = BytesIO()\\n        self.writable = \\\"x\\\" in file.mode or \\\"r\\\" not in file.mode\\n        self.write = self.buffer.write if self.writable else None\\n\\n    def read(self):\\n        while True:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            if not b:\\n                break\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines = 0\\n        return self.buffer.read()\\n\\n    def readline(self):\\n        while self.newlines == 0:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            self.newlines = b.count(b\\\"\\\\n\\\") + (not b)\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines -= 1\\n        return self.buffer.readline()\\n\\n    def flush(self):\\n        if self.writable:\\n            os.write(self._fd, self.buffer.getvalue())\\n            self.buffer.truncate(0), self.buffer.seek(0)\\n\\n\\nclass IOWrapper(IOBase):\\n    def __init__(self, file):\\n        self.buffer = FastIO(file)\\n        self.flush = self.buffer.flush\\n        self.writable = self.buffer.writable\\n        self.write = lambda s: self.buffer.write(s.encode(\\\"ascii\\\"))\\n        self.read = lambda: self.buffer.read().decode(\\\"ascii\\\")\\n        self.readline = lambda: self.buffer.readline().decode(\\\"ascii\\\")\\n\\n\\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\\ninput = lambda: sys.stdin.readline().rstrip(\\\"\\\\r\\\\n\\\")\\n\\n\\n# -------------------game starts now----------------------------------------------------import math\\nclass TreeNode:\\n    def __init__(self, k, v):\\n        self.key = k\\n        self.value = v\\n        self.left = None\\n        self.right = None\\n        self.parent = None\\n        self.height = 1\\n        self.num_left = 1\\n        self.num_total = 1\\n\\n\\nclass AvlTree:\\n\\n    def __init__(self):\\n        self._tree = None\\n\\n    def add(self, k, v):\\n        if not self._tree:\\n            self._tree = TreeNode(k, v)\\n            return\\n        node = self._add(k, v)\\n        if node:\\n            self._rebalance(node)\\n\\n    def _add(self, k, v):\\n        node = self._tree\\n        while node:\\n            if k < node.key:\\n                if node.left:\\n                    node = node.left\\n                else:\\n                    node.left = TreeNode(k, v)\\n                    node.left.parent = node\\n                    return node.left\\n            elif node.key < k:\\n                if node.right:\\n                    node = node.right\\n                else:\\n                    node.right = TreeNode(k, v)\\n                    node.right.parent = node\\n                    return node.right\\n            else:\\n                node.value = v\\n                return\\n\\n    @staticmethod\\n    def get_height(x):\\n        return x.height if x else 0\\n\\n    @staticmethod\\n    def get_num_total(x):\\n        return x.num_total if x else 0\\n\\n    def _rebalance(self, node):\\n\\n        n = node\\n        while n:\\n            lh = self.get_height(n.left)\\n            rh = self.get_height(n.right)\\n            n.height = max(lh, rh) + 1\\n            balance_factor = lh - rh\\n            n.num_total = 1 + self.get_num_total(n.left) + self.get_num_total(n.right)\\n            n.num_left = 1 + self.get_num_total(n.left)\\n\\n            if balance_factor > 1:\\n                if self.get_height(n.left.left) < self.get_height(n.left.right):\\n                    self._rotate_left(n.left)\\n                self._rotate_right(n)\\n            elif balance_factor < -1:\\n                if self.get_height(n.right.right) < self.get_height(n.right.left):\\n                    self._rotate_right(n.right)\\n                self._rotate_left(n)\\n            else:\\n                n = n.parent\\n\\n    def _remove_one(self, node):\\n        \\\"\\\"\\\"\\n        Side effect!!! Changes node. Node should have exactly one child\\n        \\\"\\\"\\\"\\n        replacement = node.left or node.right\\n        if node.parent:\\n            if AvlTree._is_left(node):\\n                node.parent.left = replacement\\n            else:\\n                node.parent.right = replacement\\n            replacement.parent = node.parent\\n            node.parent = None\\n        else:\\n            self._tree = replacement\\n            replacement.parent = None\\n        node.left = None\\n        node.right = None\\n        node.parent = None\\n        self._rebalance(replacement)\\n\\n    def _remove_leaf(self, node):\\n        if node.parent:\\n            if AvlTree._is_left(node):\\n                node.parent.left = None\\n            else:\\n                node.parent.right = None\\n            self._rebalance(node.parent)\\n        else:\\n            self._tree = None\\n        node.parent = None\\n        node.left = None\\n        node.right = None\\n\\n    def remove(self, k):\\n        node = self._get_node(k)\\n        if not node:\\n            return\\n        if AvlTree._is_leaf(node):\\n            self._remove_leaf(node)\\n            return\\n        if node.left and node.right:\\n            nxt = AvlTree._get_next(node)\\n            node.key = nxt.key\\n            node.value = nxt.value\\n            if self._is_leaf(nxt):\\n                self._remove_leaf(nxt)\\n            else:\\n                self._remove_one(nxt)\\n            self._rebalance(node)\\n        else:\\n            self._remove_one(node)\\n\\n    def get(self, k):\\n        node = self._get_node(k)\\n        return node.value if node else -1\\n\\n    def _get_node(self, k):\\n        if not self._tree:\\n            return None\\n        node = self._tree\\n        while node:\\n            if k < node.key:\\n                node = node.left\\n            elif node.key < k:\\n                node = node.right\\n            else:\\n                return node\\n        return None\\n\\n    def get_at(self, pos):\\n        x = pos + 1\\n        node = self._tree\\n        while node:\\n            if x < node.num_left:\\n                node = node.left\\n            elif node.num_left < x:\\n                x -= node.num_left\\n                node = node.right\\n            else:\\n                return (node.key, node.value)\\n        raise IndexError(\\\"Out of ranges\\\")\\n\\n    @staticmethod\\n    def _is_left(node):\\n        return node.parent.left and node.parent.left == node\\n\\n    @staticmethod\\n    def _is_leaf(node):\\n        return node.left is None and node.right is None\\n\\n    def _rotate_right(self, node):\\n        if not node.parent:\\n            self._tree = node.left\\n            node.left.parent = None\\n        elif AvlTree._is_left(node):\\n            node.parent.left = node.left\\n            node.left.parent = node.parent\\n        else:\\n            node.parent.right = node.left\\n            node.left.parent = node.parent\\n        bk = node.left.right\\n        node.left.right = node\\n        node.parent = node.left\\n        node.left = bk\\n        if bk:\\n            bk.parent = node\\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\\n        node.num_left = 1 + self.get_num_total(node.left)\\n\\n    def _rotate_left(self, node):\\n        if not node.parent:\\n            self._tree = node.right\\n            node.right.parent = None\\n        elif AvlTree._is_left(node):\\n            node.parent.left = node.right\\n            node.right.parent = node.parent\\n        else:\\n            node.parent.right = node.right\\n            node.right.parent = node.parent\\n        bk = node.right.left\\n        node.right.left = node\\n        node.parent = node.right\\n        node.right = bk\\n        if bk:\\n            bk.parent = node\\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\\n        node.num_left = 1 + self.get_num_total(node.left)\\n\\n    @staticmethod\\n    def _get_next(node):\\n        if not node.right:\\n            return node.parent\\n        n = node.right\\n        while n.left:\\n            n = n.left\\n        return n\\n\\n\\n# -----------------------------------------------binary seacrh tree---------------------------------------\\nclass SegmentTree1:\\n    def __init__(self, data, default=2**51, func=lambda a, b: a & b):\\n        \\\"\\\"\\\"initialize the segment tree with data\\\"\\\"\\\"\\n        self._default = default\\n        self._func = func\\n        self._len = len(data)\\n        self._size = _size = 1 << (self._len - 1).bit_length()\\n\\n        self.data = [default] * (2 * _size)\\n        self.data[_size:_size + self._len] = data\\n        for i in reversed(range(_size)):\\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\\n\\n    def __delitem__(self, idx):\\n        self[idx] = self._default\\n\\n    def __getitem__(self, idx):\\n        return self.data[idx + self._size]\\n\\n    def __setitem__(self, idx, value):\\n        idx += self._size\\n        self.data[idx] = value\\n        idx >>= 1\\n        while idx:\\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\\n            idx >>= 1\\n\\n    def __len__(self):\\n        return self._len\\n\\n    def query(self, start, stop):\\n        if start == stop:\\n            return self.__getitem__(start)\\n        stop += 1\\n        start += self._size\\n        stop += self._size\\n\\n        res = self._default\\n        while start < stop:\\n            if start & 1:\\n                res = self._func(res, self.data[start])\\n                start += 1\\n            if stop & 1:\\n                stop -= 1\\n                res = self._func(res, self.data[stop])\\n            start >>= 1\\n            stop >>= 1\\n        return res\\n\\n    def __repr__(self):\\n        return \\\"SegmentTree({0})\\\".format(self.data)\\n\\n\\n# -------------------game starts now----------------------------------------------------import math\\nclass SegmentTree:\\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\\n        \\\"\\\"\\\"initialize the segment tree with data\\\"\\\"\\\"\\n        self._default = default\\n        self._func = func\\n        self._len = len(data)\\n        self._size = _size = 1 << (self._len - 1).bit_length()\\n\\n        self.data = [default] * (2 * _size)\\n        self.data[_size:_size + self._len] = data\\n        for i in reversed(range(_size)):\\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\\n\\n    def __delitem__(self, idx):\\n        self[idx] = self._default\\n\\n    def __getitem__(self, idx):\\n        return self.data[idx + self._size]\\n\\n    def __setitem__(self, idx, value):\\n        idx += self._size\\n        self.data[idx] = value\\n        idx >>= 1\\n        while idx:\\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\\n            idx >>= 1\\n\\n    def __len__(self):\\n        return self._len\\n\\n    def query(self, start, stop):\\n        if start == stop:\\n            return self.__getitem__(start)\\n        stop += 1\\n        start += self._size\\n        stop += self._size\\n\\n        res = self._default\\n        while start < stop:\\n            if start & 1:\\n                res = self._func(res, self.data[start])\\n                start += 1\\n            if stop & 1:\\n                stop -= 1\\n                res = self._func(res, self.data[stop])\\n            start >>= 1\\n            stop >>= 1\\n        return res\\n\\n    def __repr__(self):\\n        return \\\"SegmentTree({0})\\\".format(self.data)\\n\\n\\n# -------------------------------iye ha chutiya zindegi-------------------------------------\\nclass Factorial:\\n    def __init__(self, MOD):\\n        self.MOD = MOD\\n        self.factorials = [1, 1]\\n        self.invModulos = [0, 1]\\n        self.invFactorial_ = [1, 1]\\n\\n    def calc(self, n):\\n        if n <= -1:\\n            print(\\\"Invalid argument to calculate n!\\\")\\n            print(\\\"n must be non-negative value. But the argument was \\\" + str(n))\\n            return\\n        if n < len(self.factorials):\\n            return self.factorials[n]\\n        nextArr = [0] * (n + 1 - len(self.factorials))\\n        initialI = len(self.factorials)\\n        prev = self.factorials[-1]\\n        m = self.MOD\\n        for i in range(initialI, n + 1):\\n            prev = nextArr[i - initialI] = prev * i % m\\n        self.factorials += nextArr\\n        return self.factorials[n]\\n\\n    def inv(self, n):\\n        if n <= -1:\\n            print(\\\"Invalid argument to calculate n^(-1)\\\")\\n            print(\\\"n must be non-negative value. But the argument was \\\" + str(n))\\n            return\\n        p = self.MOD\\n        pi = n % p\\n        if pi < len(self.invModulos):\\n            return self.invModulos[pi]\\n        nextArr = [0] * (n + 1 - len(self.invModulos))\\n        initialI = len(self.invModulos)\\n        for i in range(initialI, min(p, n + 1)):\\n            next = -self.invModulos[p % i] * (p // i) % p\\n            self.invModulos.append(next)\\n        return self.invModulos[pi]\\n\\n    def invFactorial(self, n):\\n        if n <= -1:\\n            print(\\\"Invalid argument to calculate (n^(-1))!\\\")\\n            print(\\\"n must be non-negative value. But the argument was \\\" + str(n))\\n            return\\n        if n < len(self.invFactorial_):\\n            return self.invFactorial_[n]\\n        self.inv(n)  # To make sure already calculated n^-1\\n        nextArr = [0] * (n + 1 - len(self.invFactorial_))\\n        initialI = len(self.invFactorial_)\\n        prev = self.invFactorial_[-1]\\n        p = self.MOD\\n        for i in range(initialI, n + 1):\\n            prev = nextArr[i - initialI] = (prev * self.invModulos[i % p]) % p\\n        self.invFactorial_ += nextArr\\n        return self.invFactorial_[n]\\n\\n\\nclass Combination:\\n    def __init__(self, MOD):\\n        self.MOD = MOD\\n        self.factorial = Factorial(MOD)\\n\\n    def ncr(self, n, k):\\n        if k < 0 or n < k:\\n            return 0\\n        k = min(k, n - k)\\n        f = self.factorial\\n        return f.calc(n) * f.invFactorial(max(n - k, k)) * f.invFactorial(min(k, n - k)) % self.MOD\\n\\n\\n# --------------------------------------iye ha combinations ka zindegi---------------------------------\\ndef powm(a, n, m):\\n    if a == 1 or n == 0:\\n        return 1\\n    if n % 2 == 0:\\n        s = powm(a, n // 2, m)\\n        return s * s % m\\n    else:\\n        return a * powm(a, n - 1, m) % m\\n\\n\\n# --------------------------------------iye ha power ka zindegi---------------------------------\\ndef sort_list(list1, list2):\\n    zipped_pairs = zip(list2, list1)\\n\\n    z = [x for _, x in sorted(zipped_pairs)]\\n\\n    return z\\n\\n\\n# --------------------------------------------------product----------------------------------------\\ndef product(l):\\n    por = 1\\n    for i in range(len(l)):\\n        por *= l[i]\\n    return por\\n\\n\\n# --------------------------------------------------binary----------------------------------------\\ndef binarySearchCount(arr, n, key):\\n    left = 0\\n    right = n - 1\\n\\n    count = 0\\n\\n    while (left <= right):\\n        mid = int((right + left) / 2)\\n\\n        # Check if middle element is\\n        # less than or equal to key\\n        if (arr[mid] < key):\\n            count = mid + 1\\n            left = mid + 1\\n\\n        # If key is smaller, ignore right half\\n        else:\\n            right = mid - 1\\n\\n    return count\\n\\n\\n# --------------------------------------------------binary----------------------------------------\\ndef countdig(n):\\n    c = 0\\n    while (n > 0):\\n        n //= 10\\n        c += 1\\n    return c\\ndef binary(x, length):\\n    y = bin(x)[2:]\\n    return y if len(y) >= length else \\\"0\\\" * (length - len(y)) + y\\n\\ndef countGreater(arr, n, k):\\n    l = 0\\n    r = n - 1\\n\\n    # Stores the index of the left most element\\n    # from the array which is greater than k\\n    leftGreater = n\\n\\n    # Finds number of elements greater than k\\n    while (l <= r):\\n        m = int(l + (r - l) / 2)\\n        if (arr[m] >= k):\\n            leftGreater = m\\n            r = m - 1\\n\\n        # If mid element is less than\\n        # or equal to k update l\\n        else:\\n            l = m + 1\\n\\n    # Return the count of elements\\n    # greater than k\\n    return (n - leftGreater)\\n\\n\\n# --------------------------------------------------binary------------------------------------\\ndef main():\\n    er=[]\\n    graph=defaultdict(list)\\n    n, m, d = map(int, input().split())\\n    vis=[0]*n\\n    pre=[-1]*n\\n    def dfs(v,p):\\n        pre[v]=p\\n        vis[v]=1\\n        for i in graph[v]:\\n            if vis[i]==0:\\n                dfs(i,v)\\n    for i in range(m):\\n        a,b=map(int,input().split())\\n        if a==1:\\n            er.append(b-1)\\n        elif b == 1:\\n            er.append(a-1)\\n        else:\\n            graph[a-1].append(b-1)\\n            graph[b-1].append(a-1)\\n    for i in range(len(er)):\\n        if vis[er[i]]==0:\\n            dfs(er[i],-1)\\n    t=0\\n    for i in range(len(er)):\\n        if pre[er[i]]==-1:\\n            pre[er[i]]=0\\n            t+=1\\n    if t>d:\\n        print(\\\"NO\\\")\\n        return\\n    for i in range(len(er)):\\n        if pre[er[i]]==0:\\n            continue\\n        if t<d:\\n            pre[er[i]]=0\\n            t+=1\\n        else:\\n            break\\n    if t<d:\\n        print(\\\"NO\\\")\\n        return\\n    rt=0\\n    for i in range(n):\\n        if pre[i]==-1:\\n            rt+=1\\n        if rt>=2:\\n            print(\\\"NO\\\")\\n            return\\n    print(\\\"YES\\\")\\n    for i in range(n):\\n        if pre[i]!=-1:\\n            print(pre[i]+1,i+1)\\nt = threading.Thread(target=main)\\nt.start()\\nt.join()\"]", "input_output": "{\n  \"inputs\": [\n    \"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\",\n    \"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\",\n    \"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\",\n    \"2 1 1\\n1 2\\n\",\n    \"3 2 1\\n1 2\\n3 1\\n\",\n    \"3 3 1\\n2 3\\n1 2\\n3 1\\n\",\n    \"4 3 2\\n1 2\\n1 3\\n1 4\\n\",\n    \"4 4 1\\n4 1\\n4 3\\n4 2\\n1 3\\n\",\n    \"4 5 2\\n4 1\\n2 4\\n1 2\\n1 3\\n4 3\\n\",\n    \"4 6 2\\n3 2\\n2 1\\n1 4\\n3 1\\n3 4\\n4 2\\n\",\n    \"5 4 2\\n3 1\\n1 5\\n4 5\\n4 2\\n\",\n    \"5 6 3\\n1 5\\n2 4\\n3 5\\n4 3\\n2 1\\n1 4\\n\",\n    \"5 10 3\\n5 3\\n1 2\\n1 5\\n1 3\\n4 2\\n2 3\\n2 5\\n3 4\\n4 5\\n4 1\\n\",\n    \"6 5 1\\n6 5\\n4 1\\n2 4\\n5 4\\n2 3\\n\",\n    \"6 6 1\\n5 1\\n3 4\\n2 3\\n1 6\\n5 4\\n3 5\\n\",\n    \"6 7 1\\n5 1\\n4 3\\n1 3\\n2 3\\n1 6\\n3 6\\n2 1\\n\",\n    \"6 8 3\\n3 1\\n2 3\\n4 1\\n1 2\\n5 4\\n6 5\\n6 1\\n6 4\\n\",\n    \"6 9 1\\n5 6\\n3 6\\n4 2\\n4 1\\n4 3\\n5 1\\n2 1\\n1 3\\n6 2\\n\",\n    \"6 10 3\\n1 6\\n3 2\\n3 4\\n1 3\\n2 1\\n1 4\\n5 1\\n2 6\\n2 5\\n4 2\\n\",\n    \"7 6 1\\n2 1\\n1 3\\n7 4\\n3 7\\n5 2\\n4 6\\n\",\n    \"7 8 1\\n4 1\\n5 7\\n7 1\\n6 3\\n5 6\\n1 2\\n7 2\\n4 6\\n\",\n    \"7 10 2\\n7 1\\n1 3\\n5 2\\n6 1\\n6 5\\n3 7\\n5 7\\n1 2\\n5 1\\n1 4\\n\",\n    \"7 13 6\\n6 5\\n6 1\\n1 3\\n3 5\\n3 7\\n6 7\\n4 1\\n5 7\\n1 2\\n1 5\\n7 2\\n1 7\\n4 7\\n\",\n    \"7 15 1\\n7 5\\n4 6\\n1 4\\n6 5\\n4 2\\n5 2\\n3 7\\n6 3\\n3 5\\n1 2\\n6 2\\n7 4\\n5 4\\n2 7\\n1 3\\n\",\n    \"7 17 1\\n7 5\\n3 4\\n3 2\\n7 1\\n7 3\\n6 1\\n7 2\\n6 3\\n6 5\\n3 5\\n5 4\\n5 2\\n3 1\\n2 1\\n7 4\\n6 7\\n2 4\\n\",\n    \"10 15 2\\n6 2\\n5 1\\n4 3\\n4 9\\n2 4\\n4 10\\n2 5\\n1 8\\n7 8\\n9 1\\n1 4\\n1 2\\n6 4\\n2 8\\n9 3\\n\",\n    \"10 15 1\\n6 2\\n10 2\\n6 1\\n7 6\\n9 10\\n7 4\\n9 3\\n7 9\\n4 1\\n3 4\\n8 1\\n5 10\\n4 5\\n1 5\\n9 1\\n\",\n    \"10 15 3\\n8 10\\n9 8\\n1 6\\n7 6\\n10 2\\n4 3\\n2 3\\n8 5\\n2 5\\n4 8\\n2 8\\n6 10\\n10 4\\n5 1\\n9 5\\n\",\n    \"10 16 1\\n4 3\\n4 10\\n9 6\\n2 5\\n10 6\\n5 4\\n6 7\\n3 1\\n2 4\\n8 6\\n1 5\\n8 1\\n2 8\\n1 4\\n4 9\\n9 5\\n\",\n    \"10 16 1\\n2 6\\n6 7\\n2 7\\n10 4\\n6 4\\n6 3\\n4 2\\n3 8\\n7 5\\n10 1\\n9 7\\n4 5\\n2 3\\n6 1\\n1 2\\n5 3\\n\",\n    \"10 16 1\\n10 1\\n7 8\\n7 3\\n5 9\\n2 6\\n4 10\\n3 8\\n2 10\\n9 10\\n4 3\\n2 8\\n9 2\\n4 1\\n5 8\\n9 7\\n10 8\\n\",\n    \"10 17 3\\n1 8\\n4 9\\n7 5\\n7 6\\n3 1\\n1 2\\n1 6\\n1 10\\n2 8\\n9 1\\n7 4\\n3 10\\n1 7\\n6 2\\n2 7\\n4 8\\n1 5\\n\",\n    \"10 17 1\\n8 2\\n8 10\\n5 8\\n6 4\\n4 10\\n4 9\\n2 5\\n7 1\\n2 9\\n7 2\\n2 1\\n1 3\\n3 2\\n4 3\\n5 7\\n7 3\\n7 6\\n\",\n    \"10 17 2\\n7 4\\n3 5\\n6 5\\n2 7\\n2 3\\n8 9\\n5 7\\n5 2\\n7 1\\n2 6\\n4 2\\n2 8\\n8 6\\n2 9\\n10 2\\n9 7\\n8 4\\n\",\n    \"10 18 5\\n10 9\\n1 9\\n2 4\\n6 8\\n10 5\\n3 4\\n1 3\\n4 7\\n5 7\\n8 4\\n9 8\\n8 3\\n1 2\\n4 6\\n2 10\\n1 10\\n4 1\\n1 6\\n\",\n    \"10 18 3\\n4 8\\n9 3\\n8 3\\n9 1\\n4 1\\n1 5\\n6 3\\n1 10\\n2 6\\n6 4\\n8 5\\n8 7\\n4 2\\n6 8\\n3 2\\n5 10\\n8 1\\n7 3\\n\",\n    \"10 18 4\\n9 4\\n3 8\\n6 1\\n8 6\\n1 5\\n2 4\\n1 2\\n10 9\\n4 3\\n8 7\\n7 2\\n4 1\\n9 7\\n5 10\\n4 6\\n3 10\\n5 3\\n3 1\\n\",\n    \"11 15 3\\n10 7\\n1 2\\n9 6\\n1 5\\n1 11\\n9 3\\n9 8\\n6 5\\n5 3\\n4 6\\n1 9\\n5 8\\n2 4\\n7 1\\n6 11\\n\",\n    \"11 15 3\\n3 8\\n10 11\\n11 3\\n9 10\\n6 5\\n5 9\\n11 6\\n8 4\\n9 3\\n8 11\\n6 10\\n1 2\\n1 5\\n1 10\\n7 11\\n\",\n    \"11 15 1\\n8 4\\n3 9\\n11 10\\n7 3\\n9 1\\n11 5\\n9 7\\n4 9\\n3 2\\n11 8\\n7 5\\n3 6\\n11 7\\n6 2\\n3 4\\n\",\n    \"11 16 2\\n9 3\\n8 1\\n7 10\\n6 10\\n4 1\\n5 10\\n9 11\\n1 7\\n3 10\\n11 1\\n10 11\\n11 6\\n2 11\\n2 6\\n6 5\\n2 3\\n\",\n    \"11 16 3\\n3 2\\n6 4\\n8 10\\n5 3\\n7 11\\n2 9\\n9 10\\n3 4\\n11 8\\n6 10\\n1 2\\n6 1\\n1 11\\n7 9\\n4 1\\n11 10\\n\",\n    \"11 16 3\\n10 2\\n1 2\\n11 7\\n4 7\\n8 4\\n5 6\\n4 10\\n6 3\\n11 3\\n1 10\\n7 8\\n7 5\\n6 9\\n3 2\\n2 9\\n10 7\\n\",\n    \"11 17 1\\n3 4\\n8 2\\n1 3\\n6 1\\n3 9\\n2 5\\n5 9\\n7 2\\n5 1\\n4 1\\n4 5\\n8 1\\n10 9\\n11 1\\n9 1\\n3 7\\n7 10\\n\",\n    \"11 17 2\\n9 10\\n2 3\\n1 7\\n10 7\\n6 9\\n8 9\\n8 11\\n1 5\\n11 6\\n5 4\\n6 10\\n1 9\\n10 4\\n4 3\\n7 9\\n2 7\\n9 11\\n\",\n    \"11 17 2\\n3 8\\n8 1\\n4 6\\n1 5\\n1 4\\n10 2\\n6 11\\n11 3\\n1 6\\n11 7\\n7 4\\n2 5\\n9 2\\n10 5\\n2 6\\n8 2\\n11 5\\n\",\n    \"11 18 1\\n1 11\\n11 8\\n5 2\\n8 4\\n10 3\\n4 2\\n7 4\\n6 8\\n11 7\\n11 4\\n5 11\\n2 6\\n4 6\\n1 5\\n9 1\\n11 6\\n11 3\\n2 1\\n\",\n    \"11 18 2\\n8 5\\n1 4\\n4 3\\n2 7\\n3 6\\n11 2\\n2 4\\n5 1\\n2 10\\n8 9\\n5 6\\n1 9\\n10 8\\n9 10\\n3 10\\n6 8\\n1 11\\n6 1\\n\",\n    \"11 18 3\\n1 9\\n11 9\\n6 1\\n7 9\\n5 7\\n3 8\\n4 10\\n5 9\\n9 8\\n9 6\\n2 10\\n8 5\\n8 4\\n2 1\\n10 3\\n10 9\\n8 10\\n3 11\\n\",\n    \"12 15 1\\n5 2\\n12 3\\n12 8\\n11 12\\n1 6\\n12 2\\n1 12\\n9 3\\n9 1\\n4 10\\n9 7\\n9 10\\n5 1\\n4 1\\n7 5\\n\",\n    \"12 15 1\\n6 12\\n10 9\\n9 4\\n5 1\\n3 11\\n2 4\\n3 7\\n2 3\\n9 8\\n9 11\\n12 1\\n1 3\\n1 2\\n4 8\\n11 12\\n\",\n    \"12 15 3\\n9 8\\n1 4\\n10 11\\n5 1\\n12 9\\n2 12\\n7 3\\n1 12\\n2 4\\n6 5\\n8 4\\n6 4\\n12 3\\n9 10\\n12 8\\n\",\n    \"12 16 1\\n2 1\\n8 4\\n5 7\\n3 10\\n9 6\\n11 9\\n8 2\\n1 5\\n6 10\\n12 6\\n9 3\\n4 3\\n10 1\\n8 1\\n1 12\\n1 3\\n\",\n    \"12 16 1\\n2 9\\n1 9\\n7 12\\n10 9\\n11 2\\n3 12\\n8 1\\n2 12\\n3 5\\n11 1\\n10 8\\n1 3\\n9 11\\n8 4\\n6 4\\n6 3\\n\",\n    \"12 16 2\\n11 7\\n8 5\\n7 6\\n6 11\\n9 6\\n11 3\\n1 12\\n4 7\\n1 7\\n10 6\\n4 12\\n11 9\\n7 2\\n12 3\\n10 11\\n8 2\\n\",\n    \"12 17 1\\n2 5\\n8 1\\n6 5\\n4 1\\n11 10\\n2 11\\n1 5\\n1 7\\n3 5\\n8 10\\n1 6\\n9 6\\n6 11\\n11 1\\n6 2\\n4 8\\n7 12\\n\",\n    \"12 17 1\\n4 5\\n12 6\\n11 8\\n10 12\\n2 1\\n5 8\\n2 7\\n11 5\\n5 10\\n5 9\\n12 7\\n2 3\\n6 8\\n6 1\\n10 4\\n9 6\\n11 1\\n\",\n    \"12 17 1\\n1 9\\n5 3\\n3 7\\n4 7\\n8 2\\n11 3\\n2 9\\n11 8\\n12 11\\n7 6\\n6 2\\n10 7\\n7 1\\n11 5\\n11 2\\n3 6\\n5 8\\n\",\n    \"12 18 3\\n4 6\\n2 12\\n1 9\\n8 3\\n9 7\\n3 6\\n2 6\\n11 6\\n1 6\\n4 9\\n9 10\\n6 5\\n6 12\\n8 9\\n8 2\\n10 11\\n10 6\\n9 2\\n\",\n    \"12 18 3\\n2 4\\n2 10\\n9 1\\n10 4\\n7 8\\n5 10\\n10 1\\n11 3\\n2 1\\n11 12\\n6 2\\n1 3\\n5 7\\n8 3\\n6 1\\n12 1\\n2 8\\n6 7\\n\",\n    \"12 18 1\\n11 7\\n11 1\\n9 8\\n5 2\\n3 2\\n5 6\\n11 9\\n10 7\\n3 7\\n1 7\\n6 4\\n10 3\\n2 10\\n9 4\\n6 8\\n6 12\\n9 7\\n12 4\\n\",\n    \"13 15 6\\n1 3\\n3 6\\n13 3\\n11 9\\n7 1\\n11 4\\n1 9\\n4 9\\n13 7\\n10 7\\n4 1\\n5 3\\n3 2\\n9 8\\n1 12\\n\",\n    \"13 15 1\\n7 12\\n5 8\\n12 5\\n3 8\\n7 4\\n10 9\\n2 9\\n11 8\\n3 5\\n8 2\\n5 13\\n5 1\\n1 6\\n1 11\\n1 4\\n\",\n    \"13 15 1\\n7 12\\n5 9\\n4 5\\n6 11\\n6 12\\n2 10\\n7 4\\n13 7\\n3 1\\n4 10\\n2 12\\n11 12\\n3 10\\n3 9\\n8 7\\n\",\n    \"13 16 4\\n1 8\\n12 1\\n7 1\\n9 1\\n1 4\\n11 1\\n9 7\\n10 13\\n5 7\\n2 9\\n12 4\\n13 5\\n9 13\\n1 3\\n6 9\\n8 13\\n\",\n    \"13 16 2\\n2 9\\n5 11\\n10 7\\n5 8\\n2 13\\n4 10\\n6 1\\n9 6\\n4 7\\n3 8\\n7 6\\n11 2\\n12 9\\n2 1\\n7 8\\n1 3\\n\",\n    \"13 16 2\\n11 10\\n8 4\\n13 1\\n7 2\\n7 11\\n5 4\\n2 13\\n8 3\\n9 1\\n12 11\\n6 4\\n10 9\\n10 2\\n4 13\\n11 13\\n12 3\\n\",\n    \"13 17 7\\n13 1\\n6 1\\n1 8\\n4 6\\n6 5\\n1 3\\n13 4\\n1 11\\n12 3\\n8 7\\n2 7\\n12 1\\n10 1\\n9 8\\n2 3\\n1 5\\n1 2\\n\",\n    \"13 17 1\\n7 10\\n9 3\\n10 9\\n10 4\\n10 1\\n3 4\\n13 7\\n7 2\\n13 4\\n2 12\\n2 6\\n5 8\\n8 1\\n1 4\\n3 1\\n7 3\\n5 11\\n\",\n    \"13 17 1\\n13 2\\n2 1\\n4 12\\n11 2\\n5 3\\n3 12\\n11 9\\n9 8\\n10 9\\n5 11\\n9 2\\n10 8\\n11 7\\n10 6\\n13 7\\n8 6\\n6 2\\n\",\n    \"13 18 4\\n12 10\\n4 12\\n13 12\\n5 4\\n13 8\\n5 10\\n1 8\\n7 8\\n10 3\\n5 2\\n9 8\\n6 11\\n12 1\\n9 2\\n11 1\\n7 1\\n5 1\\n10 1\\n\",\n    \"13 18 2\\n5 1\\n8 11\\n2 1\\n12 9\\n3 2\\n5 6\\n5 2\\n2 11\\n12 6\\n4 13\\n3 4\\n8 7\\n6 2\\n12 13\\n2 10\\n8 5\\n7 5\\n1 7\\n\",\n    \"13 18 2\\n4 5\\n11 8\\n10 8\\n5 8\\n2 12\\n9 2\\n3 9\\n13 7\\n6 10\\n7 4\\n11 13\\n3 7\\n10 1\\n6 12\\n1 6\\n5 12\\n13 4\\n5 9\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n2 3\\n3 4\\n2 1\\n\",\n    \"YES\\n4 1\\n2 1\\n1 3\\n\",\n    \"NO\\n\",\n    \"YES\\n1 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1 2\\n3 2\\n\",\n    \"NO\\n\",\n    \"YES\\n4 2\\n4 3\\n1 4\\n\",\n    \"YES\\n4 3\\n2 1\\n1 4\\n\",\n    \"YES\\n1 4\\n2 3\\n1 2\\n\",\n    \"YES\\n1 3\\n2 4\\n5 4\\n1 5\\n\",\n    \"YES\\n5 3\\n1 2\\n4 1\\n5 1\\n\",\n    \"YES\\n2 4\\n1 5\\n3 1\\n2 1\\n\",\n    \"YES\\n2 3\\n5 6\\n2 4\\n1 4\\n5 4\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n6 4\\n2 1\\n1 3\\n1 4\\n4 5\\n\",\n    \"YES\\n2 4\\n5 6\\n2 6\\n1 4\\n4 3\\n\",\n    \"YES\\n3 1\\n4 2\\n2 5\\n1 6\\n1 2\\n\",\n    \"NO\\n\",\n    \"YES\\n4 1\\n2 7\\n6 4\\n7 5\\n6 3\\n6 5\\n\",\n    \"YES\\n1 7\\n4 1\\n5 6\\n2 5\\n7 3\\n7 5\\n\",\n    \"YES\\n1 6\\n4 1\\n7 1\\n5 1\\n3 1\\n2 1\\n\",\n    \"YES\\n1 4\\n5 2\\n3 5\\n7 2\\n2 4\\n6 2\\n\",\n    \"YES\\n7 1\\n6 3\\n2 7\\n4 2\\n2 5\\n2 3\\n\",\n    \"YES\\n1 5\\n8 1\\n2 5\\n4 9\\n6 2\\n4 10\\n7 8\\n3 4\\n2 4\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n6 7\\n3 4\\n4 2\\n2 5\\n1 3\\n6 8\\n5 9\\n8 2\\n10 4\\n\",\n    \"YES\\n3 8\\n10 4\\n4 2\\n2 7\\n1 10\\n9 7\\n7 5\\n3 2\\n6 2\\n\",\n    \"YES\\n8 5\\n10 2\\n10 4\\n2 8\\n1 10\\n3 8\\n8 7\\n9 2\\n6 2\\n\",\n    \"YES\\n1 2\\n7 2\\n1 3\\n10 3\\n8 4\\n1 8\\n2 6\\n5 7\\n4 9\\n\",\n    \"YES\\n3 2\\n8 10\\n4 9\\n2 8\\n2 5\\n6 7\\n9 2\\n2 7\\n1 7\\n\",\n    \"NO\\n\",\n    \"YES\\n1 9\\n10 1\\n6 4\\n1 2\\n7 4\\n8 4\\n1 4\\n10 5\\n3 1\\n\",\n    \"YES\\n10 5\\n3 7\\n6 2\\n9 3\\n4 2\\n5 1\\n8 5\\n4 1\\n1 9\\n\",\n    \"YES\\n9 4\\n7 8\\n10 9\\n1 4\\n5 3\\n2 1\\n7 2\\n5 1\\n1 6\\n\",\n    \"YES\\n7 1\\n5 6\\n3 9\\n7 10\\n4 2\\n9 6\\n1 2\\n8 9\\n1 5\\n11 6\\n\",\n    \"YES\\n1 5\\n11 6\\n11 7\\n8 3\\n9 5\\n1 2\\n4 8\\n3 9\\n1 10\\n11 10\\n\",\n    \"YES\\n9 1\\n11 7\\n5 7\\n3 7\\n10 11\\n2 3\\n9 3\\n6 2\\n3 4\\n8 4\\n\",\n    \"NO\\n\",\n    \"YES\\n11 10\\n2 3\\n6 1\\n9 2\\n2 1\\n5 3\\n10 8\\n4 6\\n1 11\\n9 7\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n7 1\\n7 9\\n11 9\\n2 3\\n2 7\\n6 10\\n7 10\\n5 1\\n8 9\\n5 4\\n\",\n    \"YES\\n8 1\\n5 11\\n4 6\\n2 9\\n2 8\\n6 2\\n8 3\\n5 1\\n7 11\\n2 10\\n\",\n    \"NO\\n\",\n    \"YES\\n8 5\\n1 4\\n2 11\\n3 4\\n2 4\\n2 7\\n6 3\\n1 5\\n9 10\\n10 2\\n\",\n    \"YES\\n7 9\\n1 9\\n10 4\\n10 9\\n2 1\\n9 5\\n8 10\\n1 6\\n11 3\\n3 10\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n10 9\\n2 4\\n8 12\\n3 12\\n12 9\\n12 1\\n4 6\\n7 3\\n5 1\\n1 4\\n10 11\\n\",\n    \"NO\\n\",\n    \"YES\\n7 12\\n5 3\\n1 9\\n10 8\\n12 3\\n11 2\\n9 10\\n12 2\\n3 6\\n8 4\\n2 9\\n\",\n    \"YES\\n2 7\\n10 11\\n8 2\\n7 11\\n5 8\\n11 9\\n1 7\\n7 6\\n12 1\\n3 11\\n4 12\\n\",\n    \"NO\\n\",\n    \"YES\\n11 8\\n10 12\\n2 1\\n5 10\\n7 12\\n9 6\\n10 4\\n6 8\\n6 12\\n2 3\\n7 2\\n\",\n    \"YES\\n6 2\\n4 7\\n7 6\\n2 11\\n10 7\\n11 12\\n9 2\\n8 5\\n9 1\\n3 6\\n8 2\\n\",\n    \"NO\\n\",\n    \"YES\\n2 8\\n3 11\\n4 2\\n1 10\\n9 1\\n1 2\\n3 8\\n2 6\\n5 10\\n7 6\\n12 11\\n\",\n    \"YES\\n10 2\\n8 6\\n1 11\\n2 5\\n5 6\\n9 7\\n7 3\\n2 3\\n6 12\\n6 4\\n7 11\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n10 4\\n7 8\\n10 2\\n5 4\\n12 2\\n9 3\\n10 3\\n6 12\\n1 3\\n11 12\\n7 13\\n12 7\\n\",\n    \"YES\\n9 6\\n12 1\\n9 7\\n11 1\\n13 9\\n8 13\\n12 4\\n1 8\\n5 7\\n10 13\\n2 9\\n1 3\\n\",\n    \"YES\\n4 7\\n2 11\\n8 3\\n6 1\\n12 9\\n7 6\\n2 13\\n8 5\\n1 2\\n7 10\\n9 6\\n11 5\\n\",\n    \"YES\\n8 4\\n6 4\\n3 12\\n1 13\\n4 5\\n9 1\\n10 9\\n11 12\\n13 4\\n2 7\\n2 13\\n11 7\\n\",\n    \"YES\\n2 1\\n8 7\\n5 6\\n8 1\\n1 10\\n12 1\\n8 9\\n1 3\\n11 1\\n4 6\\n4 13\\n1 13\\n\",\n    \"NO\\n\",\n    \"YES\\n5 3\\n9 8\\n9 2\\n4 12\\n11 5\\n10 9\\n2 1\\n11 2\\n7 13\\n2 6\\n2 13\\n3 12\\n\",\n    \"YES\\n9 2\\n10 5\\n1 11\\n1 8\\n13 8\\n4 12\\n10 3\\n5 4\\n11 6\\n7 1\\n12 1\\n8 9\\n\",\n    \"YES\\n6 2\\n4 3\\n9 12\\n1 5\\n2 10\\n2 1\\n3 2\\n4 13\\n5 7\\n2 11\\n8 5\\n12 6\\n\",\n    \"YES\\n4 5\\n3 9\\n7 3\\n1 10\\n5 8\\n6 1\\n5 12\\n8 11\\n12 2\\n2 9\\n12 6\\n13 4\\n\"\n  ]\n}", "difficulty": "introductory", "url": "https://codeforces.com/problemset/problem/1133/F2", "starter_code": ""}
